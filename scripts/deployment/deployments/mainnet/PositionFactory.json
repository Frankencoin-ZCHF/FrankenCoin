{
  "address": "0x5F9C74b58D2C0a4FaB41318F94b5A23ba27FA98a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_parent",
          "type": "address"
        }
      ],
      "name": "clonePosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_deuro",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "_initPeriod",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "_duration",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "_challengePeriod",
          "type": "uint40"
        },
        {
          "internalType": "uint24",
          "name": "_riskPremiumPPM",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "_liqPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_reserve",
          "type": "uint24"
        }
      ],
      "name": "createNewPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0abfde7e39c291cc4000577a84c8504325165957fbe504dbf47e369addd98082",
  "receipt": {
    "to": null,
    "from": "0x58b104da218e80DA6DA7E14C37A32851a26c8a6a",
    "contractAddress": "0x5F9C74b58D2C0a4FaB41318F94b5A23ba27FA98a",
    "transactionIndex": 113,
    "gasUsed": "3031682",
    "logsBloom": "0x
    "blockHash": "0x507a0be4885aec9c884348e59435e6d422d4c52e99c72f5bab5cedb0f62af6d9",
    "transactionHash": "0x0abfde7e39c291cc4000577a84c8504325165957fbe504dbf47e369addd98082",
    "logs": [],
    "blockNumber": 21275976,
    "cumulativeGasUsed": "10498443",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2b6c9a674c0f5cac576001fd230e0d7c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"}],\"name\":\"clonePosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_deuro\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"_initPeriod\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_duration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_challengePeriod\",\"type\":\"uint40\"},{\"internalType\":\"uint24\",\"name\":\"_riskPremiumPPM\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"_liqPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_reserve\",\"type\":\"uint24\"}],\"name\":\"createNewPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clonePosition(address)\":{\"params\":{\"_parent\":\"address of the position we want to clone\"},\"returns\":{\"_0\":\"address of the newly created clone position\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clonePosition(address)\":{\"notice\":\"clone an existing position. This can be a clone of another clone, or an original position.\"},\"createNewPosition(address,address,address,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)\":{\"notice\":\"Create a completely new position in a newly deployed contract. Must be called through minting hub to be recognized as valid position.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintingHubV2/PositionFactory.sol\":\"PositionFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/MintingHubV2/Position.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {MathUtil} from \\\"../utils/MathUtil.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IDecentralizedEURO} from \\\"../interface/IDecentralizedEURO.sol\\\";\\nimport {IReserve} from \\\"../interface/IReserve.sol\\\";\\nimport {ILeadrate} from \\\"../interface/ILeadrate.sol\\\";\\n\\nimport {IPosition} from \\\"./interface/IPosition.sol\\\";\\n\\n/**\\n * @title Position\\n * @notice A collateralized minting position.\\n */\\ncontract Position is Ownable, IPosition, MathUtil {\\n    /**\\n     * @notice Note that this contract is intended to be cloned. All clones will share the same values for\\n     * the constant and immutable fields, but have their own values for the other fields.\\n     */\\n\\n    /**\\n     * @notice The deuro price per unit of the collateral below which challenges succeed, (36 - collateral.decimals) decimals\\n     */\\n    uint256 public price;\\n\\n    /**\\n     * @notice Net minted amount, including reserve.\\n     */\\n    uint256 public minted;\\n\\n    /**\\n     * @notice How much has been minted in total. This variable is only used in the parent position.\\n     */\\n    uint256 private totalMinted;\\n\\n    uint256 public immutable limit;\\n\\n    /**\\n     * @notice Amount of the collateral that is currently under a challenge.\\n     * Used to figure out whether there are pending challenges.\\n     */\\n    uint256 public challengedAmount;\\n\\n    /**\\n     * @notice Challenge period in seconds.\\n     */\\n    uint40 public immutable challengePeriod;\\n\\n    /**\\n     * @notice Timestamp when minting can start and the position no longer denied.\\n     */\\n    uint40 public immutable start;\\n\\n    /**\\n     * @notice End of the latest cooldown. If this is in the future, minting is suspended.\\n     */\\n    uint40 public cooldown;\\n\\n    /**\\n     * @notice Timestamp of the expiration of the position. After expiration, challenges cannot be averted\\n     * any more. This is also the basis for fee calculations.\\n     */\\n    uint40 public expiration;\\n\\n    /**\\n     * @notice The original position to help identifying clones.\\n     */\\n    address public immutable original;\\n\\n    /**\\n     * @notice Pointer to the minting hub.\\n     */\\n    address public immutable hub;\\n\\n    /**\\n     * @notice The Eurocoin contract.\\n     */\\n    IDecentralizedEURO public immutable deuro;\\n\\n    /**\\n     * @notice The collateral token.\\n     */\\n    IERC20 public immutable override collateral;\\n\\n    /**\\n     * @notice Minimum acceptable collateral amount to prevent dust.\\n     */\\n    uint256 public immutable override minimumCollateral;\\n\\n    /**\\n     * @notice The interest in parts per million per year that is deducted when minting dEURO.\\n     * To be paid upfront.\\n     */\\n    uint24 public immutable riskPremiumPPM;\\n\\n    /**\\n     * @notice The reserve contribution in parts per million of the minted amount.\\n     */\\n    uint24 public immutable reserveContribution;\\n\\n    event MintingUpdate(uint256 collateral, uint256 price, uint256 minted);\\n    event PositionDenied(address indexed sender, string message); // emitted if closed by governance\\n\\n    error InsufficientCollateral(uint256 needed, uint256 available);\\n    error TooLate();\\n    error RepaidTooMuch(uint256 excess);\\n    error LimitExceeded(uint256 tried, uint256 available);\\n    error ChallengeTooSmall();\\n    error Expired(uint40 time, uint40 expiration);\\n    error Alive();\\n    error Hot();\\n    error Challenged();\\n    error NotHub();\\n    error NotOriginal();\\n    error InvalidExpiration();\\n    error AlreadyInitialized();\\n\\n    modifier alive() {\\n        if (block.timestamp >= expiration) revert Expired(uint40(block.timestamp), expiration);\\n        _;\\n    }\\n\\n    modifier expired() {\\n        if (block.timestamp < expiration) revert Alive();\\n        _;\\n    }\\n\\n    modifier noCooldown() {\\n        if (block.timestamp <= cooldown) revert Hot();\\n        _;\\n    }\\n\\n    modifier noChallenge() {\\n        if (challengedAmount > 0) revert Challenged();\\n        _;\\n    }\\n\\n    modifier onlyHub() {\\n        if (msg.sender != address(hub)) revert NotHub();\\n        _;\\n    }\\n\\n    modifier ownerOrRoller() {\\n        if (msg.sender != address(IHub(hub).roller())) _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev See MintingHub.openPosition\\n     */\\n    constructor(\\n        address _owner,\\n        address _hub,\\n        address _deuro,\\n        address _collateral,\\n        uint256 _minCollateral,\\n        uint256 _initialLimit,\\n        uint40 _initPeriod,\\n        uint40 _duration,\\n        uint40 _challengePeriod,\\n        uint24 _riskPremiumPPM,\\n        uint256 _liqPrice,\\n        uint24 _reservePPM\\n    ) Ownable(_owner) {\\n        require(_initPeriod >= 3 days); // must be at least three days, recommended to use higher values\\n        original = address(this);\\n        hub = _hub;\\n        deuro = IDecentralizedEURO(_deuro);\\n        collateral = IERC20(_collateral);\\n        riskPremiumPPM = _riskPremiumPPM;\\n        reserveContribution = _reservePPM;\\n        minimumCollateral = _minCollateral;\\n        challengePeriod = _challengePeriod;\\n        start = uint40(block.timestamp) + _initPeriod; // at least three days time to deny the position\\n        cooldown = start;\\n        expiration = start + _duration;\\n        limit = _initialLimit;\\n        _setPrice(_liqPrice, _initialLimit);\\n    }\\n\\n    /**\\n     * Initialization method for clones.\\n     * Can only be called once. Should be called immediately after creating the clone.\\n     */\\n    function initialize(address parent, uint40 _expiration) external onlyHub {\\n        if (expiration != 0) revert AlreadyInitialized();\\n        if (_expiration < block.timestamp || _expiration > Position(original).expiration()) revert InvalidExpiration(); // expiration must not be later than original\\n        expiration = _expiration;\\n        price = Position(parent).price();\\n        _transferOwnership(hub);\\n    }\\n\\n    /**\\n     * Cloning a position is only allowed if the position is not challenged, not expired and not in cooldown.\\n     */\\n    function assertCloneable() external noChallenge noCooldown alive {}\\n\\n    /**\\n     * Notify the original that some amount has been minted.\\n     */\\n    function notifyMint(uint256 mint_) external {\\n        if (deuro.getPositionParent(msg.sender) != hub) revert NotHub();\\n        totalMinted += mint_;\\n    }\\n\\n    function notifyRepaid(uint256 repaid_) external {\\n        if (deuro.getPositionParent(msg.sender) != hub) revert NotHub();\\n        totalMinted -= repaid_;\\n    }\\n\\n    function availableForClones() external view returns (uint256) {\\n        // reserve capacity for the original to the extent the owner provided collateral\\n        uint256 unusedPotential = (_collateralBalance() * price) / ONE_DEC18 - minted;\\n        if (totalMinted + unusedPotential >= limit) {\\n            return 0;\\n        } else {\\n            return limit - totalMinted - unusedPotential;\\n        }\\n    }\\n\\n    function availableForMinting() public view returns (uint256) {\\n        if (address(this) == original) {\\n            return limit - totalMinted;\\n        } else {\\n            return Position(original).availableForClones();\\n        }\\n    }\\n\\n    /**\\n     * @notice Qualified pool share holders can call this method to immediately expire a freshly proposed position.\\n     */\\n    function deny(address[] calldata helpers, string calldata message) external {\\n        if (block.timestamp >= start) revert TooLate();\\n        IReserve(deuro.reserve()).checkQualified(msg.sender, helpers);\\n        _close();\\n        emit PositionDenied(msg.sender, message);\\n    }\\n\\n    /**\\n     * Closes the position by putting it into eternal cooldown.\\n     * This allows the users to still withdraw the collateral that is left, but never to mint again.\\n     */\\n    function _close() internal {\\n        cooldown = type(uint40).max;\\n    }\\n\\n    function isClosed() public view returns (bool) {\\n        return cooldown == type(uint40).max;\\n    }\\n\\n    /**\\n     * @notice This is how much the minter can actually use when minting deuro, with the rest being used\\n     * assigned to the minter reserve or (if applicable) fees.\\n     */\\n    function getUsableMint(uint256 totalMint, bool afterFees) public view returns (uint256) {\\n        if (afterFees) {\\n            return (totalMint * (1000_000 - reserveContribution - calculateCurrentFee())) / 1000_000;\\n        } else {\\n            return (totalMint * (1000_000 - reserveContribution)) / 1000_000;\\n        }\\n    }\\n\\n    /**\\n     * Returns the corresponding mint amount (disregarding the limit).\\n     */\\n    function getMintAmount(uint256 usableMint) external view returns (uint256) {\\n        return\\n            usableMint == 0\\n                ? 0\\n                : (usableMint * 1000_000 - 1) / (1000_000 - reserveContribution - calculateCurrentFee()) + 1;\\n    }\\n\\n    /**\\n     * @notice \\\"All in one\\\" function to adjust the outstanding amount of deuro, the collateral amount,\\n     * and the price in one transaction.\\n     */\\n    function adjust(uint256 newMinted, uint256 newCollateral, uint256 newPrice) external onlyOwner {\\n        uint256 colbal = _collateralBalance();\\n        if (newCollateral > colbal) {\\n            collateral.transferFrom(msg.sender, address(this), newCollateral - colbal);\\n        }\\n        // Must be called after collateral deposit, but before withdrawal\\n        if (newMinted < minted) {\\n            deuro.burnFromWithReserve(msg.sender, minted - newMinted, reserveContribution);\\n            _notifyRepaid(minted - newMinted);\\n        }\\n        if (newCollateral < colbal) {\\n            _withdrawCollateral(msg.sender, colbal - newCollateral);\\n        }\\n        // Must be called after collateral withdrawal\\n        if (newMinted > minted) {\\n            _mint(msg.sender, newMinted - minted, newCollateral);\\n        }\\n        if (newPrice != price) {\\n            _adjustPrice(newPrice);\\n        }\\n        emit MintingUpdate(newCollateral, newPrice, newMinted);\\n    }\\n\\n    /**\\n     * @notice Allows the position owner to adjust the liquidation price as long as there is no pending challenge.\\n     * Lowering the liquidation price can be done with immediate effect, given that there is enough collateral.\\n     * Increasing the liquidation price triggers a cooldown period of 3 days, during which minting is suspended.\\n     */\\n    function adjustPrice(uint256 newPrice) public onlyOwner {\\n        _adjustPrice(newPrice);\\n        emit MintingUpdate(_collateralBalance(), price, minted);\\n    }\\n\\n    function _adjustPrice(uint256 newPrice) internal noChallenge alive {\\n        if (newPrice > price) {\\n            _restrictMinting(3 days);\\n        } else {\\n            _checkCollateral(_collateralBalance(), newPrice);\\n        }\\n        _setPrice(newPrice, minted + availableForMinting());\\n    }\\n\\n    function _setPrice(uint256 newPrice, uint256 bounds) internal {\\n        require(newPrice * minimumCollateral <= bounds * ONE_DEC18); // sanity check\\n        price = newPrice;\\n    }\\n\\n    function _collateralBalance() internal view returns (uint256) {\\n        return IERC20(collateral).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Mint deuro as long as there is no open challenge, the position is not subject to a cooldown,\\n     * and there is sufficient collateral.\\n     */\\n    function mint(address target, uint256 amount) public ownerOrRoller {\\n        uint256 collateralBalance = _collateralBalance();\\n        _mint(target, amount, collateralBalance);\\n        emit MintingUpdate(collateralBalance, price, minted);\\n    }\\n\\n    /**\\n     * The applicable upfront fee in ppm when minting more dEURO based on the annual interest rate and\\n     * the expiration of the position.\\n     */\\n    function calculateCurrentFee() public view returns (uint24) {\\n        return calculateFee(expiration);\\n    }\\n\\n    /**\\n     * The applicable interest rate in ppm when minting more dEURO.\\n     * It consists on the globally valid interest plus an individual risk premium.\\n     */\\n    function annualInterestPPM() public view returns (uint24) {\\n        return IHub(hub).rate().currentRatePPM() + riskPremiumPPM;\\n    }\\n\\n    /**\\n     * The fee in ppm when cloning and minting with the given expiration date.\\n     */\\n    function calculateFee(uint256 exp) public view returns (uint24) {\\n        uint256 time = block.timestamp < start ? start : block.timestamp;\\n        uint256 timePassed = exp - time;\\n        // Time resolution is in the range of minutes for typical interest rates.\\n        uint256 feePPM = (timePassed * annualInterestPPM()) / 365 days;\\n        return uint24(feePPM > 1000000 ? 1000000 : feePPM); // fee cannot exceed 100%\\n    }\\n\\n    function _mint(address target, uint256 amount, uint256 collateral_) internal noChallenge noCooldown alive {\\n        if (amount > availableForMinting()) revert LimitExceeded(amount, availableForMinting());\\n        Position(original).notifyMint(amount);\\n        deuro.mintWithReserve(target, amount, reserveContribution, calculateCurrentFee());\\n        minted += amount;\\n        _checkCollateral(collateral_, price);\\n    }\\n\\n    function _restrictMinting(uint40 period) internal {\\n        uint40 horizon = uint40(block.timestamp) + period;\\n        if (horizon > cooldown) {\\n            cooldown = horizon;\\n        }\\n    }\\n\\n    /**\\n     * @notice Repay some deuro. If too much is repaid, the call fails.\\n     * It is possible to repay while there are challenges, but the collateral is locked until all is clear again.\\n     *\\n     * The repaid amount should fulfill the following equation in order to close the position,\\n     * i.e. bring the minted amount to 0:\\n     * minted = amount + deuro.calculateAssignedReserve(amount, reservePPM)\\n     *\\n     * Under normal circumstances, this implies:\\n     * amount = minted * (1000000 - reservePPM)\\n     *\\n     * E.g. if minted is 50 and reservePPM is 200000, it is necessary to repay 40 to be able to close the position.\\n     */\\n    function repay(uint256 amount) public returns (uint256) {\\n        IERC20(deuro).transferFrom(msg.sender, address(this), amount);\\n        uint256 actuallyRepaid = IDecentralizedEURO(deuro).burnWithReserve(amount, reserveContribution);\\n        _notifyRepaid(actuallyRepaid);\\n        emit MintingUpdate(_collateralBalance(), price, minted);\\n        return actuallyRepaid;\\n    }\\n\\n    function _notifyRepaid(uint256 amount) internal {\\n        if (amount > minted) revert RepaidTooMuch(amount - minted);\\n        Position(original).notifyRepaid(amount);\\n        minted -= amount;\\n    }\\n\\n    /**\\n     * Force the sale of some collateral after the position is expired.\\n     * Can only be called by the minting hub and the minting hub is trusted to calculate the price correctly.\\n     * The proceeds from the sale are first used to repay the outstanding balance and then (if anything is left)\\n     * it is sent to the owner of the position.\\n     */\\n    function forceSale(address buyer, uint256 collAmount, uint256 proceeds) external onlyHub expired {\\n        if (minted > 0) {\\n            uint256 availableReserve = deuro.calculateAssignedReserve(minted, reserveContribution);\\n            if (proceeds + availableReserve >= minted) {\\n                // repay everything from the buyer's account\\n                uint256 returnedReserve = deuro.burnFromWithReserve(buyer, minted, reserveContribution);\\n                assert(returnedReserve == availableReserve);\\n                // transfer the remaining purchase price from the buyer to the owner\\n                deuro.transferFrom(buyer, owner(), proceeds + returnedReserve - minted);\\n                _notifyRepaid(minted);\\n            } else {\\n                // we can only repay a part, nothing left to pay to owner\\n                deuro.transferFrom(buyer, address(this), proceeds);\\n                uint256 repaid = deuro.burnWithReserve(proceeds, reserveContribution);\\n                _notifyRepaid(repaid);\\n            }\\n        } else {\\n            // wire funds directly to owner\\n            deuro.transferFrom(buyer, owner(), proceeds);\\n        }\\n        // send collateral to buyer\\n        collateral.transfer(buyer, collAmount);\\n        _considerClose(_collateralBalance());\\n        emit MintingUpdate(_collateralBalance(), price, minted);\\n    }\\n\\n    /**\\n     * @notice Withdraw any ERC20 token that might have ended up on this address.\\n     * Withdrawing collateral is subject to the same restrictions as withdrawCollateral(...).\\n     */\\n    function withdraw(address token, address target, uint256 amount) external onlyOwner {\\n        if (token == address(collateral)) {\\n            withdrawCollateral(target, amount);\\n        } else {\\n            uint256 balance = _collateralBalance();\\n            IERC20(token).transfer(target, amount);\\n            require(balance == _collateralBalance()); // guard against double-entry-point tokens\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral from the position up to the extent that it is still well collateralized afterwards.\\n     * Not possible as long as there is an open challenge or the contract is subject to a cooldown.\\n     *\\n     * Withdrawing collateral below the minimum collateral amount formally closes the position.\\n     */\\n    function withdrawCollateral(address target, uint256 amount) public ownerOrRoller {\\n        uint256 balance = _withdrawCollateral(target, amount);\\n        emit MintingUpdate(balance, price, minted);\\n    }\\n\\n    function _withdrawCollateral(address target, uint256 amount) internal noChallenge returns (uint256) {\\n        if (block.timestamp <= cooldown && !isClosed()) revert Hot();\\n        uint256 balance = _sendCollateral(target, amount);\\n        _checkCollateral(balance, price);\\n        return balance;\\n    }\\n\\n    function _sendCollateral(address target, uint256 amount) internal returns (uint256) {\\n        if (amount > 0) {\\n            // Some weird tokens fail when trying to transfer 0 amounts\\n            IERC20(collateral).transfer(target, amount);\\n        }\\n        uint256 balance = _collateralBalance();\\n        _considerClose(balance);\\n        return balance;\\n    }\\n\\n    function _considerClose(uint256 collateralBalance) internal {\\n        if (collateralBalance < minimumCollateral && challengedAmount == 0) {\\n            // This leaves a slightly unsatisfying possibility open: if the withdrawal happens due to a successful\\n            // challenge, there might be a small amount of collateral left that is not withheld in case there are no\\n            // other pending challenges. The only way to cleanly solve this would be to have two distinct cooldowns,\\n            // one for minting and one for withdrawals.\\n            _close();\\n        }\\n    }\\n\\n    /**\\n     * @notice This invariant must always hold and must always be checked when any of the three\\n     * variables change in an adverse way.\\n     */\\n    function _checkCollateral(uint256 collateralReserve, uint256 atPrice) internal view {\\n        if (collateralReserve * atPrice < minted * ONE_DEC18)\\n            revert InsufficientCollateral(collateralReserve * atPrice, minted * ONE_DEC18);\\n    }\\n\\n    /**\\n     * @notice Returns the liquidation price and the durations for phase1 and phase2 of the challenge.\\n     * Both phases are usually of equal duration, but near expiration, phase one is adjusted such that\\n     * it cannot last beyond the expiration date of the position.\\n     */\\n    function challengeData() external view returns (uint256 liqPrice, uint40 phase) {\\n        return (price, challengePeriod);\\n    }\\n\\n    function notifyChallengeStarted(uint256 size) external onlyHub {\\n        // Require minimum size. Collateral balance can be below minimum if it was partially challenged before.\\n        if (size < minimumCollateral && size < _collateralBalance()) revert ChallengeTooSmall();\\n        if (size == 0) revert ChallengeTooSmall();\\n        challengedAmount += size;\\n    }\\n\\n    /**\\n     * @param size   amount of collateral challenged (dec18)\\n     */\\n    function notifyChallengeAverted(uint256 size) external onlyHub {\\n        challengedAmount -= size;\\n\\n        // Don't allow minter to close the position immediately so challenge can be repeated before\\n        // the owner has a chance to mint more on an undercollateralized position\\n        _restrictMinting(1 days);\\n\\n        // If this was the last open challenge and there is only a dust amount of collateral left, the position should be closed\\n        _considerClose(_collateralBalance());\\n    }\\n\\n    /**\\n     * @notice Notifies the position that a challenge was successful.\\n     * Triggers the payout of the challenged part of the collateral.\\n     * Everything else is assumed to be handled by the hub.\\n     *\\n     * @param _bidder   address of the bidder that receives the collateral\\n     * @param _size     amount of the collateral bid for\\n     * @return (position owner, effective challenge size in deuro, amount to be repaid, reserve ppm)\\n     */\\n    function notifyChallengeSucceeded(\\n        address _bidder,\\n        uint256 _size\\n    ) external onlyHub returns (address, uint256, uint256, uint32) {\\n        challengedAmount -= _size;\\n        uint256 colBal = _collateralBalance();\\n        if (colBal < _size) {\\n            _size = colBal;\\n        }\\n        uint256 repayment = colBal == 0 ? 0 : (minted * _size) / colBal; // for enormous colBal, this could be rounded to 0, which is ok\\n        _notifyRepaid(repayment); // we assume the caller takes care of the actual repayment\\n\\n        // Give time for additional challenges before the owner can mint again. In particular,\\n        // the owner might have added collateral only seconds before the challenge ended, preventing a close.\\n        _restrictMinting(3 days);\\n\\n        uint256 newBalance = _sendCollateral(_bidder, _size); // transfer collateral to the bidder and emit update\\n\\n        emit MintingUpdate(newBalance, price, minted);\\n\\n        return (owner(), _size, repayment, reserveContribution);\\n    }\\n}\\n\\ninterface IHub {\\n    function rate() external view returns (ILeadrate);\\n\\n    function roller() external view returns (address);\\n}\\n\",\"keccak256\":\"0xecaf7811ee98733fd5b44697455d2be23514f7f07454059ebfa6e1b065aa04e8\",\"license\":\"MIT\"},\"contracts/MintingHubV2/PositionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Position} from \\\"./Position.sol\\\";\\nimport {IDecentralizedEURO} from \\\"../interface/IDecentralizedEURO.sol\\\";\\n\\ncontract PositionFactory {\\n    /**\\n     * Create a completely new position in a newly deployed contract.\\n     * Must be called through minting hub to be recognized as valid position.\\n     */\\n    function createNewPosition(\\n        address _owner,\\n        address _deuro,\\n        address _collateral,\\n        uint256 _minCollateral,\\n        uint256 _initialLimit,\\n        uint40 _initPeriod,\\n        uint40 _duration,\\n        uint40 _challengePeriod,\\n        uint24 _riskPremiumPPM,\\n        uint256 _liqPrice,\\n        uint24 _reserve\\n    ) external returns (address) {\\n        return\\n            address(\\n                new Position(\\n                    _owner,\\n                    msg.sender,\\n                    _deuro,\\n                    _collateral,\\n                    _minCollateral,\\n                    _initialLimit,\\n                    _initPeriod,\\n                    _duration,\\n                    _challengePeriod,\\n                    _riskPremiumPPM,\\n                    _liqPrice,\\n                    _reserve\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice clone an existing position. This can be a clone of another clone,\\n     * or an original position.\\n     * @param _parent address of the position we want to clone\\n     * @return address of the newly created clone position\\n     */\\n    function clonePosition(address _parent) external returns (address) {\\n        Position parent = Position(_parent);\\n        parent.assertCloneable();\\n        Position clone = Position(_createClone(parent.original()));\\n        return address(clone);\\n    }\\n\\n    // github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n    function _createClone(address target) internal returns (address result) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            result := create(0, clone, 0x37)\\n        }\\n        require(result != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc9a9eb3d72b419e0b6bd7db1b2af3bd85384bdc5722563bdc2630281888794f8\",\"license\":\"MIT\"},\"contracts/MintingHubV2/interface/IPosition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPosition {\\n    function hub() external view returns (address);\\n\\n    function collateral() external view returns (IERC20);\\n\\n    function minimumCollateral() external view returns (uint256);\\n\\n    function price() external view returns (uint256);\\n\\n    function minted() external view returns (uint256);\\n\\n    function challengedAmount() external view returns (uint256);\\n\\n    function original() external view returns (address);\\n\\n    function expiration() external view returns (uint40);\\n\\n    function cooldown() external view returns (uint40);\\n\\n    function limit() external view returns (uint256);\\n\\n    function challengePeriod() external view returns (uint40);\\n\\n    function start() external view returns (uint40);\\n\\n    function riskPremiumPPM() external view returns (uint24);\\n\\n    function reserveContribution() external view returns (uint24);\\n\\n    function initialize(address parent, uint40 _expiration) external;\\n\\n    function assertCloneable() external;\\n\\n    function notifyMint(uint256 mint_) external;\\n\\n    function notifyRepaid(uint256 repaid_) external;\\n\\n    function availableForClones() external view returns (uint256);\\n\\n    function availableForMinting() external view returns (uint256);\\n\\n    function deny(address[] calldata helpers, string calldata message) external;\\n\\n    function getUsableMint(uint256 totalMint, bool afterFees) external view returns (uint256);\\n\\n    function getMintAmount(uint256 usableMint) external view returns (uint256);\\n\\n    function adjust(uint256 newMinted, uint256 newCollateral, uint256 newPrice) external;\\n\\n    function adjustPrice(uint256 newPrice) external;\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function calculateCurrentFee() external view returns (uint24);\\n\\n    function annualInterestPPM() external view returns (uint24);\\n\\n    function calculateFee(uint256 exp) external view returns (uint24);\\n\\n    function repay(uint256 amount) external returns (uint256);\\n\\n    function forceSale(address buyer, uint256 collAmount, uint256 proceeds) external;\\n\\n    function withdraw(address token, address target, uint256 amount) external;\\n\\n    function withdrawCollateral(address target, uint256 amount) external;\\n\\n    function challengeData() external view returns (uint256 liqPrice, uint40 phase);\\n\\n    function notifyChallengeStarted(uint256 size) external;\\n\\n    function notifyChallengeAverted(uint256 size) external;\\n\\n    function notifyChallengeSucceeded(\\n        address _bidder,\\n        uint256 _size\\n    ) external returns (address, uint256, uint256, uint32);\\n}\\n\",\"keccak256\":\"0xa70e20bd25aed2aac8d4c1fcd91819492c57b20947f822f6fe212d8c2acb8ef7\",\"license\":\"MIT\"},\"contracts/interface/IDecentralizedEURO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IReserve} from \\\"./IReserve.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDecentralizedEURO is IERC20 {\\n    function suggestMinter(\\n        address _minter,\\n        uint256 _applicationPeriod,\\n        uint256 _applicationFee,\\n        string calldata _message\\n    ) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function minterReserve() external view returns (uint256);\\n\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\n\\n    function calculateFreedAmount(uint256 amountExcludingReserve, uint32 reservePPM) external view returns (uint256);\\n\\n    function equity() external view returns (uint256);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function getPositionParent(address position) external view returns (address);\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burnFrom(address target, uint256 amount) external;\\n\\n    function burnWithoutReserve(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnFromWithReserve(\\n        address payer,\\n        uint256 targetTotalBurnAmount,\\n        uint32 _reservePPM\\n    ) external returns (uint256);\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n    function coverLoss(address source, uint256 amount) external;\\n\\n    function collectProfits(address source, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x5a794e79a91424814795d9f3edd3db86e4d360f652a0250c04c279592417bb8e\",\"license\":\"MIT\"},\"contracts/interface/ILeadrate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILeadrate {\\n   function currentRatePPM() external view returns (uint24);\\n   function currentTicks() external view returns (uint64);\\n}\",\"keccak256\":\"0x881b944dbc6c7d79ad5e8de37e31e1c11ff9b75eed314b62b1071f2e5b96dfc4\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IReserve is IERC20 {\\n    function invest(uint256 amount, uint256 expected) external returns (uint256);\\n    function checkQualified(address sender, address[] calldata helpers) external view;\\n}\\n\",\"keccak256\":\"0x8d413b94c7860d6f8a9ba0168642db626830209824e4ad2d879d5f252490d2b9\",\"license\":\"MIT\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Functions for share valuation\\n */\\ncontract MathUtil {\\n    uint256 internal constant ONE_DEC18 = 10 ** 18;\\n\\n    // Let's go for 12 digits of precision (18-6)\\n    uint256 internal constant THRESH_DEC18 = 10 ** 6;\\n\\n    /**\\n     * @notice Cubic root with Halley approximation\\n     *         Number 1e18 decimal\\n     * @param _v     number for which we calculate x**(1/3)\\n     * @return returns _v**(1/3)\\n     */\\n    function _cubicRoot(uint256 _v) internal pure returns (uint256) {\\n        // Good first guess for _v slightly above 1.0, which is often the case in the dEURO system\\n        uint256 x = _v > ONE_DEC18 && _v < 10 ** 19 ? (_v - ONE_DEC18) / 3 + ONE_DEC18 : ONE_DEC18;\\n        uint256 diff;\\n        do {\\n            uint256 powX3 = _mulD18(_mulD18(x, x), x);\\n            uint256 xnew = (x * (powX3 + 2 * _v)) / (2 * powX3 + _v);\\n            diff = xnew > x ? xnew - x : x - xnew;\\n            x = xnew;\\n        } while (diff > THRESH_DEC18);\\n        return x;\\n    }\\n\\n    function _mulD18(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a * _b) / ONE_DEC18;\\n    }\\n\\n    function _divD18(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a * ONE_DEC18) / _b;\\n    }\\n\\n    function _power3(uint256 _x) internal pure returns (uint256) {\\n        return _mulD18(_mulD18(_x, _x), _x);\\n    }\\n\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xc7c822f9db3f8ff7a4fdfa704cec3ce41f7799a983d2d6055531e2c068da0b4e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b5061364f8061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635d824f761461003b578063b3e891801461006a575b600080fd5b61004e61004936600461029e565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e61007836600461035b565b6100d9565b60008b338c8c8c8c8c8c8c8c8c8c6040516100979061024c565b6100ac9c9b9a9998979695949392919061037f565b604051809103906000f0801580156100c8573d6000803e3d6000fd5b509c9b505050505050505050505050565b600080829050806001600160a01b0316630e49d77e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561011a57600080fd5b505af115801561012e573d6000803e3d6000fd5b50505050600061019e826001600160a01b03166346c715fa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610175573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610199919061040f565b6101a6565b949350505050565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09250506001600160a01b0382166102465760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b50919050565b6131ed8061042d83390190565b6001600160a01b038116811461026e57600080fd5b50565b803564ffffffffff8116811461028657600080fd5b919050565b803562ffffff8116811461028657600080fd5b60008060008060008060008060008060006101608c8e0312156102c057600080fd5b8b356102cb81610259565b9a5060208c01356102db81610259565b995060408c01356102eb81610259565b985060608c0135975060808c0135965061030760a08d01610271565b955061031560c08d01610271565b945061032360e08d01610271565b93506103326101008d0161028b565b92506101208c013591506103496101408d0161028b565b90509295989b509295989b9093969950565b60006020828403121561036d57600080fd5b813561037881610259565b9392505050565b6001600160a01b038d811682528c811660208301528b811660408301528a1660608201526080810189905260a0810188905264ffffffffff87811660c0830152861660e0820152610180810164ffffffffff861661010083015262ffffff8516610120830152836101408301526103fe61016083018462ffffff169052565b9d9c50505050505050505050505050565b60006020828403121561042157600080fd5b81516103788161025956fe6101c060405234801561001157600080fd5b506040516131ed3803806131ed83398101604081905261003091610201565b8b6001600160a01b03811661005f57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100688161013c565b506203f4808664ffffffffff16101561008057600080fd5b3060e0526001600160a01b038b8116610100528a81166101205289166101405262ffffff8084166101805281166101a05261016088905264ffffffffff841660a0526100cc86426102e0565b64ffffffffff1660c08190526005805464ffffffffff1916821790556100f39086906102e0565b6005805464ffffffffff92909216650100000000000264ffffffffff60281b19909216919091179055608087905261012b828861018c565b50505050505050505050505061031a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61019e670de0b6b3a764000082610303565b610160516101ac9084610303565b11156101b757600080fd5b50600155565b80516001600160a01b03811681146101d457600080fd5b919050565b805164ffffffffff811681146101d457600080fd5b805162ffffff811681146101d457600080fd5b6000806000806000806000806000806000806101808d8f03121561022457600080fd5b61022d8d6101bd565b9b5061023b60208e016101bd565b9a5061024960408e016101bd565b995061025760608e016101bd565b60808e015160a08f0151919a509850965061027460c08e016101d9565b955061028260e08e016101d9565b94506102916101008e016101d9565b93506102a06101208e016101ee565b6101408e015190935091506102b86101608e016101ee565b90509295989b509295989b509295989b565b634e487b7160e01b600052601160045260246000fd5b64ffffffffff81811683821601908111156102fd576102fd6102ca565b92915050565b80820281158282048414176102fd576102fd6102ca565b60805160a05160c05160e05161010051610120516101405161016051610180516101a051612cd7610516600039600081816103d0015281816106bd0152818161071801528181610a8401528181610b4d01528181610c2d01528181610e4f0152818161130401528181611a4b01528181611d91015261255d0152600081816104e20152611bb80152600081816105b801528181611540015281816122e701526127a301526000818161063501528181610fcd0152818161194001528181611fa9015281816120dd015261225a0152600081816105220152818161082a01528181610b7701528181610c5701528181610cd701528181610db801528181610e7901528181610f030152818161126d0152818161132e01528181611688015281816119e001528181611ef9015261252c0152600081816103620152818161097c01528181610ab8015281816111740152818161140e01528181611500015281816115d70152818161166401528181611739015281816118f201528181611bd90152611ed501526000818161044b01528181611098015281816110f2015281816117b70152818161217501526124c60152600081816105df015281816107e301528181611cc90152611cfd01526000818161031f0152610682015260008181610589015281816110c701528181611e3f0152611e7f0152612cd76000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c80636f871cec11610146578063a035b1fe116100c3578063c2b6b58c11610087578063c2b6b58c14610601578063cfb636f01461061d578063d8dfeb4514610630578063d9caed1214610657578063f2fde38b1461066a578063f3f480d91461067d57600080fd5b8063a035b1fe1461057b578063a4d66daf14610584578063a8a3e31d146105ab578063babe7c74146105b3578063be9a6555146105da57600080fd5b80637bd6fb9b1161010a5780637bd6fb9b1461051557806382b8eaf51461051d5780638da5cb5b1461054457806399a5d747146105555780639de2f7961461056857600080fd5b80636f871cec146104af578063715018a6146104c257806372bf079e146104ca578063730d48b7146104dd578063787a08a61461050457600080fd5b8063371fd8e6116101df5780634665096d116101a35780634665096d1461041857806346c715fa1461044657806349746f101461046d5780634f02c420146104805780635be980f5146104895780636d4749fa1461049c57600080fd5b8063371fd8e61461039c578063383ef46e146103af5780633a7c29fb146103cb57806340c10f19146103f257806342d020411461040557600080fd5b806324e657fe1161022657806324e657fe146102fc5780632a37eeae14610305578063329864aa1461030d578063350c35e91461034a578063365a86fc1461035d57600080fd5b806308262940146102635780630e49d77e146102895780631bbea34c1461029357806320aa9e72146102a6578063211d7983146102e9575b600080fd5b6102766102713660046127e7565b6106a4565b6040519081526020015b60405180910390f35b610291610743565b005b6102916102a1366004612860565b6107e1565b6102b96102b4366004612918565b61096c565b604080516001600160a01b03909516855260208501939093529183015263ffffffff166060820152608001610280565b6102916102f7366004612944565b610aad565b61027660045481565b61027661108c565b6001546040805191825264ffffffffff7f000000000000000000000000000000000000000000000000000000000000000016602083015201610280565b610291610358366004612918565b611172565b6103847f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610280565b6102766103aa366004612979565b611253565b6103b76113ef565b60405162ffffff9091168152602001610280565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b610291610400366004612918565b61140c565b610291610413366004612979565b6114f5565b60055461043090600160281b900464ffffffffff1681565b60405164ffffffffff9091168152602001610280565b6103847f000000000000000000000000000000000000000000000000000000000000000081565b61029161047b366004612979565b6115cc565b61027660025481565b610291610497366004612979565b611647565b6102916104aa3660046129a5565b61172e565b6102916104bd3660046129d3565b61191a565b610291611b53565b6102916104d8366004612979565b611b65565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b6005546104309064ffffffffff1681565b6103b7611bb4565b6103847f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316610384565b6103b7610563366004612979565b611cc4565b610276610576366004612979565b611d7c565b61027660015481565b6102767f000000000000000000000000000000000000000000000000000000000000000081565b610276611e03565b6102767f000000000000000000000000000000000000000000000000000000000000000081565b6104307f000000000000000000000000000000000000000000000000000000000000000081565b60055460405164ffffffffff9182169091148152602001610280565b61029161062b366004612979565b611eb8565b6103847f000000000000000000000000000000000000000000000000000000000000000081565b6102916106653660046129ff565b611f9f565b610291610678366004612a40565b61208a565b6104307f000000000000000000000000000000000000000000000000000000000000000081565b6000811561070f57620f42406106b86113ef565b6106e57f0000000000000000000000000000000000000000000000000000000000000000620f4240612a73565b6106ef9190612a73565b6106fe9062ffffff1685612a8e565b6107089190612aa5565b905061073d565b620f42406106ef7f000000000000000000000000000000000000000000000000000000000000000082612a73565b92915050565b600454156107645760405163d26e2de960e01b815260040160405180910390fd5b60055464ffffffffff16421161078d57604051631c02820f60e21b815260040160405180910390fd5b600554600160281b900464ffffffffff1642106107df576005546040516238ddd760e41b815264ffffffffff4281166004830152600160281b9092049190911660248201526044015b60405180910390fd5b565b7f000000000000000000000000000000000000000000000000000000000000000064ffffffffff1642106108285760405163ecdd1c2960e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108aa9190612ac7565b6001600160a01b031663352e3a833386866040518463ffffffff1660e01b81526004016108d993929190612ae4565b60006040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506109236005805464ffffffffff191664ffffffffff179055565b336001600160a01b03167faca80c800ec0d2aa9d9d31b7f886a1dd3067d4676abc637626a18ffb9381653d838360405161095e929190612b42565b60405180910390a250505050565b6000808080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109ba576040516313bd2e8360e31b815260040160405180910390fd5b84600460008282546109cc9190612b71565b90915550600090506109dc6120c5565b9050858110156109ea578095505b60008115610a10578187600254610a019190612a8e565b610a0b9190612aa5565b610a13565b60005b9050610a1e8161212c565b610a2a6203f4806121eb565b6000610a36898961222c565b600154600254604080518481526020810193909352820152909150600080516020612c828339815191529060600160405180910390a1506000546001600160a01b0316989697509562ffffff7f00000000000000000000000000000000000000000000000000000000000000001695509350505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610af6576040516313bd2e8360e31b815260040160405180910390fd5b600554600160281b900464ffffffffff16421015610b27576040516302de694d60e41b815260040160405180910390fd5b60025415610f01576002546040516302dc1ca760e31b8152600481019190915262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906316e0e53890604401602060405180830381865afa158015610bc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bea9190612b84565b600254909150610bfa8284612b9d565b10610da1576002546040516318af9f3960e11b81526001600160a01b038681166004830152602482019290925262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063315f3e72906064016020604051808303816000875af1158015610ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc49190612b84565b9050818114610cd557610cd5612bb0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd86610d176000546001600160a01b031690565b600254610d248689612b9d565b610d2e9190612b71565b6040518463ffffffff1660e01b8152600401610d4c93929190612bc6565b6020604051808303816000875af1158015610d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8f9190612bea565b50610d9b60025461212c565b50610efb565b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90610df190879030908790600401612bc6565b6020604051808303816000875af1158015610e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e349190612bea565b5060405163a47d75ad60e01b81526004810183905262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a47d75ad906044016020604051808303816000875af1158015610eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee9190612b84565b9050610ef98161212c565b505b50610fa7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd84610f436000546001600160a01b031690565b846040518463ffffffff1660e01b8152600401610f6293929190612bc6565b6020604051808303816000875af1158015610f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa59190612bea565b505b60405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103a9190612bea565b5061104b6110466120c5565b6122e5565b600080516020612c828339815191526110626120c5565b600154600254604080519384526020840192909252908201526060015b60405180910390a1505050565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036110f0576003546110eb907f0000000000000000000000000000000000000000000000000000000000000000612b71565b905090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a8a3e31d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561114e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110eb9190612b84565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632f09177d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f49190612ac7565b6001600160a01b0316336001600160a01b03161461121457611214612333565b60006112208383612360565b600154600254604080518481526020810193909352820152909150600080516020612c828339815191529060600161107f565b6040516323b872dd60e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906112a690339030908790600401612bc6565b6020604051808303816000875af11580156112c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e99190612bea565b5060405163a47d75ad60e01b81526004810183905262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a47d75ad906044016020604051808303816000875af115801561137f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a39190612b84565b90506113ae8161212c565b600080516020612c828339815191526113c56120c5565b6001546002546040805193845260208401929092529082015260600160405180910390a192915050565b6005546000906110eb90600160281b900464ffffffffff16611cc4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632f09177d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561146a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148e9190612ac7565b6001600160a01b0316336001600160a01b0316146114ae576114ae612333565b60006114b86120c5565b90506114c58383836123df565b600154600254604080518481526020810193909352820152600080516020612c828339815191529060600161107f565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461153e576040516313bd2e8360e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008110801561157357506115706120c5565b81105b1561159157604051633c80636b60e21b815260040160405180910390fd5b806000036115b257604051633c80636b60e21b815260040160405180910390fd5b80600460008282546115c49190612b9d565b909155505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611615576040516313bd2e8360e31b815260040160405180910390fd5b80600460008282546116279190612b71565b909155506116399050620151806121eb565b6116446110466120c5565b50565b60405163aa5dd7f160e01b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa1580156116d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f59190612ac7565b6001600160a01b03161461171c576040516313bd2e8360e31b815260040160405180910390fd5b80600360008282546115c49190612b71565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611777576040516313bd2e8360e31b815260040160405180910390fd5b600554600160281b900464ffffffffff16156117a55760405162dc149f60e41b815260040160405180910390fd5b428164ffffffffff16108061184857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118379190612c07565b64ffffffffff168164ffffffffff16115b1561186657604051637d9533a960e11b815260040160405180910390fd5b806005806101000a81548164ffffffffff021916908364ffffffffff160217905550816001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ea9190612b84565b6001556119167f000000000000000000000000000000000000000000000000000000000000000061261c565b5050565b611922612333565b600061192c6120c5565b9050808311156119d4576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd33306119718588612b71565b6040518463ffffffff1660e01b815260040161198f93929190612bc6565b6020604051808303816000875af11580156119ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d29190612bea565b505b600254841015611acd577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663315f3e723386600254611a1c9190612b71565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660448201526064016020604051808303816000875af1158015611a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab69190612b84565b50611acd84600254611ac89190612b71565b61212c565b80831015611aea57611ae833611ae38584612b71565b612360565b505b600254841115611b0c57611b0c3360025486611b069190612b71565b856123df565b6001548214611b1e57611b1e8261266c565b6040805184815260208101849052908101859052600080516020612c828339815191529060600160405180910390a150505050565b611b5b612333565b6107df600061261c565b611b6d612333565b611b768161266c565b600080516020612c82833981519152611b8d6120c5565b6001546002546040805193845260208401929092529082015260600160405180910390a150565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632c4e722e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c599190612ac7565b6001600160a01b03166306a7b3766040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cba9190612c24565b6110eb9190612c49565b6000807f000000000000000000000000000000000000000000000000000000000000000064ffffffffff164210611cfb5742611d24565b7f000000000000000000000000000000000000000000000000000000000000000064ffffffffff165b90506000611d328285612b71565b905060006301e13380611d43611bb4565b611d529062ffffff1684612a8e565b611d5c9190612aa5565b9050620f42408111611d6e5780611d73565b620f42405b95945050505050565b60008115611dfb57611d8c6113ef565b611db97f0000000000000000000000000000000000000000000000000000000000000000620f4240612a73565b611dc39190612a73565b62ffffff166001611dd784620f4240612a8e565b611de19190612b71565b611deb9190612aa5565b611df6906001612b9d565b61073d565b600092915050565b600080600254670de0b6b3a7640000600154611e1d6120c5565b611e279190612a8e565b611e319190612aa5565b611e3b9190612b71565b90507f000000000000000000000000000000000000000000000000000000000000000081600354611e6c9190612b9d565b10611e7957600091505090565b806003547f0000000000000000000000000000000000000000000000000000000000000000611ea89190612b71565b611eb29190612b71565b91505090565b60405163aa5dd7f160e01b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa158015611f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f669190612ac7565b6001600160a01b031614611f8d576040516313bd2e8360e31b815260040160405180910390fd5b80600360008282546115c49190612b9d565b611fa7612333565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031603611fef57611fea8282611172565b505050565b6000611ff96120c5565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529192509085169063a9059cbb906044016020604051808303816000875af115801561204c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120709190612bea565b506120796120c5565b811461208457600080fd5b50505050565b612092612333565b6001600160a01b0381166120bc57604051631e4fbdf760e01b8152600060048201526024016107d6565b6116448161261c565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561114e573d6000803e3d6000fd5b60025481111561215f576002546121439082612b71565b604051635795d46960e11b81526004016107d691815260200190565b604051635be980f560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635be980f590602401600060405180830381600087803b1580156121c157600080fd5b505af11580156121d5573d6000803e3d6000fd5b5050505080600260008282546115c49190612b71565b60006121f78242612c64565b60055490915064ffffffffff9081169082161115611916576005805464ffffffffff831664ffffffffff199091161790555050565b600081156122c95760405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156122a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c79190612bea565b505b60006122d36120c5565b90506122de816122e5565b9392505050565b7f0000000000000000000000000000000000000000000000000000000000000000811080156123145750600454155b15611644576116446005805464ffffffffff191664ffffffffff179055565b6000546001600160a01b031633146107df5760405163118cdaa760e01b81523360048201526024016107d6565b600454600090156123845760405163d26e2de960e01b815260040160405180910390fd5b60055464ffffffffff1642118015906123a7575060055464ffffffffff90811614155b156123c557604051631c02820f60e21b815260040160405180910390fd5b60006123d1848461222c565b90506122de81600154612724565b600454156124005760405163d26e2de960e01b815260040160405180910390fd5b60055464ffffffffff16421161242957604051631c02820f60e21b815260040160405180910390fd5b600554600160281b900464ffffffffff164210612476576005546040516238ddd760e41b815264ffffffffff4281166004830152600160281b9092049190911660248201526044016107d6565b61247e61108c565b8211156124b0578161248e61108c565b604051634779077960e11b8152600481019290925260248201526044016107d6565b604051630cfb636f60e41b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cfb636f090602401600060405180830381600087803b15801561251257600080fd5b505af1158015612526573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638112eb2b84847f00000000000000000000000000000000000000000000000000000000000000006125846113ef565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925262ffffff9081166044840152166064820152608401600060405180830381600087803b1580156125df57600080fd5b505af11580156125f3573d6000803e3d6000fd5b5050505081600260008282546126099190612b9d565b92505081905550611fea81600154612724565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6004541561268d5760405163d26e2de960e01b815260040160405180910390fd5b600554600160281b900464ffffffffff1642106126da576005546040516238ddd760e41b815264ffffffffff4281166004830152600160281b9092049190911660248201526044016107d6565b6001548111156126f5576126f06203f4806121eb565b612706565b6127066127006120c5565b82612724565b6116448161271261108c565b60025461271f9190612b9d565b61278c565b670de0b6b3a764000060025461273a9190612a8e565b6127448284612a8e565b1015611916576127548183612a8e565b670de0b6b3a764000060025461276a9190612a8e565b604051632c1f8ef160e21b8152600481019290925260248201526044016107d6565b61279e670de0b6b3a764000082612a8e565b6127c87f000000000000000000000000000000000000000000000000000000000000000084612a8e565b11156127d357600080fd5b50600155565b801515811461164457600080fd5b600080604083850312156127fa57600080fd5b82359150602083013561280c816127d9565b809150509250929050565b60008083601f84011261282957600080fd5b50813567ffffffffffffffff81111561284157600080fd5b60208301915083602082850101111561285957600080fd5b9250929050565b6000806000806040858703121561287657600080fd5b843567ffffffffffffffff81111561288d57600080fd5b8501601f8101871361289e57600080fd5b803567ffffffffffffffff8111156128b557600080fd5b8760208260051b84010111156128ca57600080fd5b60209182019550935085013567ffffffffffffffff8111156128eb57600080fd5b6128f787828801612817565b95989497509550505050565b6001600160a01b038116811461164457600080fd5b6000806040838503121561292b57600080fd5b823561293681612903565b946020939093013593505050565b60008060006060848603121561295957600080fd5b833561296481612903565b95602085013595506040909401359392505050565b60006020828403121561298b57600080fd5b5035919050565b64ffffffffff8116811461164457600080fd5b600080604083850312156129b857600080fd5b82356129c381612903565b9150602083013561280c81612992565b6000806000606084860312156129e857600080fd5b505081359360208301359350604090920135919050565b600080600060608486031215612a1457600080fd5b8335612a1f81612903565b92506020840135612a2f81612903565b929592945050506040919091013590565b600060208284031215612a5257600080fd5b81356122de81612903565b634e487b7160e01b600052601160045260246000fd5b62ffffff828116828216039081111561073d5761073d612a5d565b808202811582820484141761073d5761073d612a5d565b600082612ac257634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612ad957600080fd5b81516122de81612903565b6001600160a01b0384168152604060208201819052810182905260008360608301825b85811015612b37578235612b1a81612903565b6001600160a01b0316825260209283019290910190600101612b07565b509695505050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b8181038181111561073d5761073d612a5d565b600060208284031215612b9657600080fd5b5051919050565b8082018082111561073d5761073d612a5d565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215612bfc57600080fd5b81516122de816127d9565b600060208284031215612c1957600080fd5b81516122de81612992565b600060208284031215612c3657600080fd5b815162ffffff811681146122de57600080fd5b62ffffff818116838216019081111561073d5761073d612a5d565b64ffffffffff818116838216019081111561073d5761073d612a5d56fe9483a26ad376f30b5199a79e75df3bb05158c4ee32a348f53e83245a5e50c86ea2646970667358221220b6038b5b913bbf94379e79c8f52d3682e65a7122c35a649749c2bb41bbd2f08164736f6c634300081a0033a2646970667358221220430d9d4d6f6c8a5fd60f55077182df1c1e9ba7d1484e3bb2603fcdca3e9c574a64736f6c634300081a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80635d824f761461003b578063b3e891801461006a575b600080fd5b61004e61004936600461029e565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e61007836600461035b565b6100d9565b60008b338c8c8c8c8c8c8c8c8c8c6040516100979061024c565b6100ac9c9b9a9998979695949392919061037f565b604051809103906000f0801580156100c8573d6000803e3d6000fd5b509c9b505050505050505050505050565b600080829050806001600160a01b0316630e49d77e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561011a57600080fd5b505af115801561012e573d6000803e3d6000fd5b50505050600061019e826001600160a01b03166346c715fa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610175573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610199919061040f565b6101a6565b949350505050565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09250506001600160a01b0382166102465760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b50919050565b6131ed8061042d83390190565b6001600160a01b038116811461026e57600080fd5b50565b803564ffffffffff8116811461028657600080fd5b919050565b803562ffffff8116811461028657600080fd5b60008060008060008060008060008060006101608c8e0312156102c057600080fd5b8b356102cb81610259565b9a5060208c01356102db81610259565b995060408c01356102eb81610259565b985060608c0135975060808c0135965061030760a08d01610271565b955061031560c08d01610271565b945061032360e08d01610271565b93506103326101008d0161028b565b92506101208c013591506103496101408d0161028b565b90509295989b509295989b9093969950565b60006020828403121561036d57600080fd5b813561037881610259565b9392505050565b6001600160a01b038d811682528c811660208301528b811660408301528a1660608201526080810189905260a0810188905264ffffffffff87811660c0830152861660e0820152610180810164ffffffffff861661010083015262ffffff8516610120830152836101408301526103fe61016083018462ffffff169052565b9d9c50505050505050505050505050565b60006020828403121561042157600080fd5b81516103788161025956fe6101c060405234801561001157600080fd5b506040516131ed3803806131ed83398101604081905261003091610201565b8b6001600160a01b03811661005f57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100688161013c565b506203f4808664ffffffffff16101561008057600080fd5b3060e0526001600160a01b038b8116610100528a81166101205289166101405262ffffff8084166101805281166101a05261016088905264ffffffffff841660a0526100cc86426102e0565b64ffffffffff1660c08190526005805464ffffffffff1916821790556100f39086906102e0565b6005805464ffffffffff92909216650100000000000264ffffffffff60281b19909216919091179055608087905261012b828861018c565b50505050505050505050505061031a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61019e670de0b6b3a764000082610303565b610160516101ac9084610303565b11156101b757600080fd5b50600155565b80516001600160a01b03811681146101d457600080fd5b919050565b805164ffffffffff811681146101d457600080fd5b805162ffffff811681146101d457600080fd5b6000806000806000806000806000806000806101808d8f03121561022457600080fd5b61022d8d6101bd565b9b5061023b60208e016101bd565b9a5061024960408e016101bd565b995061025760608e016101bd565b60808e015160a08f0151919a509850965061027460c08e016101d9565b955061028260e08e016101d9565b94506102916101008e016101d9565b93506102a06101208e016101ee565b6101408e015190935091506102b86101608e016101ee565b90509295989b509295989b509295989b565b634e487b7160e01b600052601160045260246000fd5b64ffffffffff81811683821601908111156102fd576102fd6102ca565b92915050565b80820281158282048414176102fd576102fd6102ca565b60805160a05160c05160e05161010051610120516101405161016051610180516101a051612cd7610516600039600081816103d0015281816106bd0152818161071801528181610a8401528181610b4d01528181610c2d01528181610e4f0152818161130401528181611a4b01528181611d91015261255d0152600081816104e20152611bb80152600081816105b801528181611540015281816122e701526127a301526000818161063501528181610fcd0152818161194001528181611fa9015281816120dd015261225a0152600081816105220152818161082a01528181610b7701528181610c5701528181610cd701528181610db801528181610e7901528181610f030152818161126d0152818161132e01528181611688015281816119e001528181611ef9015261252c0152600081816103620152818161097c01528181610ab8015281816111740152818161140e01528181611500015281816115d70152818161166401528181611739015281816118f201528181611bd90152611ed501526000818161044b01528181611098015281816110f2015281816117b70152818161217501526124c60152600081816105df015281816107e301528181611cc90152611cfd01526000818161031f0152610682015260008181610589015281816110c701528181611e3f0152611e7f0152612cd76000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c80636f871cec11610146578063a035b1fe116100c3578063c2b6b58c11610087578063c2b6b58c14610601578063cfb636f01461061d578063d8dfeb4514610630578063d9caed1214610657578063f2fde38b1461066a578063f3f480d91461067d57600080fd5b8063a035b1fe1461057b578063a4d66daf14610584578063a8a3e31d146105ab578063babe7c74146105b3578063be9a6555146105da57600080fd5b80637bd6fb9b1161010a5780637bd6fb9b1461051557806382b8eaf51461051d5780638da5cb5b1461054457806399a5d747146105555780639de2f7961461056857600080fd5b80636f871cec146104af578063715018a6146104c257806372bf079e146104ca578063730d48b7146104dd578063787a08a61461050457600080fd5b8063371fd8e6116101df5780634665096d116101a35780634665096d1461041857806346c715fa1461044657806349746f101461046d5780634f02c420146104805780635be980f5146104895780636d4749fa1461049c57600080fd5b8063371fd8e61461039c578063383ef46e146103af5780633a7c29fb146103cb57806340c10f19146103f257806342d020411461040557600080fd5b806324e657fe1161022657806324e657fe146102fc5780632a37eeae14610305578063329864aa1461030d578063350c35e91461034a578063365a86fc1461035d57600080fd5b806308262940146102635780630e49d77e146102895780631bbea34c1461029357806320aa9e72146102a6578063211d7983146102e9575b600080fd5b6102766102713660046127e7565b6106a4565b6040519081526020015b60405180910390f35b610291610743565b005b6102916102a1366004612860565b6107e1565b6102b96102b4366004612918565b61096c565b604080516001600160a01b03909516855260208501939093529183015263ffffffff166060820152608001610280565b6102916102f7366004612944565b610aad565b61027660045481565b61027661108c565b6001546040805191825264ffffffffff7f000000000000000000000000000000000000000000000000000000000000000016602083015201610280565b610291610358366004612918565b611172565b6103847f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610280565b6102766103aa366004612979565b611253565b6103b76113ef565b60405162ffffff9091168152602001610280565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b610291610400366004612918565b61140c565b610291610413366004612979565b6114f5565b60055461043090600160281b900464ffffffffff1681565b60405164ffffffffff9091168152602001610280565b6103847f000000000000000000000000000000000000000000000000000000000000000081565b61029161047b366004612979565b6115cc565b61027660025481565b610291610497366004612979565b611647565b6102916104aa3660046129a5565b61172e565b6102916104bd3660046129d3565b61191a565b610291611b53565b6102916104d8366004612979565b611b65565b6103b77f000000000000000000000000000000000000000000000000000000000000000081565b6005546104309064ffffffffff1681565b6103b7611bb4565b6103847f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316610384565b6103b7610563366004612979565b611cc4565b610276610576366004612979565b611d7c565b61027660015481565b6102767f000000000000000000000000000000000000000000000000000000000000000081565b610276611e03565b6102767f000000000000000000000000000000000000000000000000000000000000000081565b6104307f000000000000000000000000000000000000000000000000000000000000000081565b60055460405164ffffffffff9182169091148152602001610280565b61029161062b366004612979565b611eb8565b6103847f000000000000000000000000000000000000000000000000000000000000000081565b6102916106653660046129ff565b611f9f565b610291610678366004612a40565b61208a565b6104307f000000000000000000000000000000000000000000000000000000000000000081565b6000811561070f57620f42406106b86113ef565b6106e57f0000000000000000000000000000000000000000000000000000000000000000620f4240612a73565b6106ef9190612a73565b6106fe9062ffffff1685612a8e565b6107089190612aa5565b905061073d565b620f42406106ef7f000000000000000000000000000000000000000000000000000000000000000082612a73565b92915050565b600454156107645760405163d26e2de960e01b815260040160405180910390fd5b60055464ffffffffff16421161078d57604051631c02820f60e21b815260040160405180910390fd5b600554600160281b900464ffffffffff1642106107df576005546040516238ddd760e41b815264ffffffffff4281166004830152600160281b9092049190911660248201526044015b60405180910390fd5b565b7f000000000000000000000000000000000000000000000000000000000000000064ffffffffff1642106108285760405163ecdd1c2960e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108aa9190612ac7565b6001600160a01b031663352e3a833386866040518463ffffffff1660e01b81526004016108d993929190612ae4565b60006040518083038186803b1580156108f157600080fd5b505afa158015610905573d6000803e3d6000fd5b505050506109236005805464ffffffffff191664ffffffffff179055565b336001600160a01b03167faca80c800ec0d2aa9d9d31b7f886a1dd3067d4676abc637626a18ffb9381653d838360405161095e929190612b42565b60405180910390a250505050565b6000808080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109ba576040516313bd2e8360e31b815260040160405180910390fd5b84600460008282546109cc9190612b71565b90915550600090506109dc6120c5565b9050858110156109ea578095505b60008115610a10578187600254610a019190612a8e565b610a0b9190612aa5565b610a13565b60005b9050610a1e8161212c565b610a2a6203f4806121eb565b6000610a36898961222c565b600154600254604080518481526020810193909352820152909150600080516020612c828339815191529060600160405180910390a1506000546001600160a01b0316989697509562ffffff7f00000000000000000000000000000000000000000000000000000000000000001695509350505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610af6576040516313bd2e8360e31b815260040160405180910390fd5b600554600160281b900464ffffffffff16421015610b27576040516302de694d60e41b815260040160405180910390fd5b60025415610f01576002546040516302dc1ca760e31b8152600481019190915262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906316e0e53890604401602060405180830381865afa158015610bc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bea9190612b84565b600254909150610bfa8284612b9d565b10610da1576002546040516318af9f3960e11b81526001600160a01b038681166004830152602482019290925262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660448201526000917f0000000000000000000000000000000000000000000000000000000000000000169063315f3e72906064016020604051808303816000875af1158015610ca0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc49190612b84565b9050818114610cd557610cd5612bb0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd86610d176000546001600160a01b031690565b600254610d248689612b9d565b610d2e9190612b71565b6040518463ffffffff1660e01b8152600401610d4c93929190612bc6565b6020604051808303816000875af1158015610d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8f9190612bea565b50610d9b60025461212c565b50610efb565b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90610df190879030908790600401612bc6565b6020604051808303816000875af1158015610e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e349190612bea565b5060405163a47d75ad60e01b81526004810183905262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a47d75ad906044016020604051808303816000875af1158015610eca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eee9190612b84565b9050610ef98161212c565b505b50610fa7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd84610f436000546001600160a01b031690565b846040518463ffffffff1660e01b8152600401610f6293929190612bc6565b6020604051808303816000875af1158015610f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa59190612bea565b505b60405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103a9190612bea565b5061104b6110466120c5565b6122e5565b600080516020612c828339815191526110626120c5565b600154600254604080519384526020840192909252908201526060015b60405180910390a1505050565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036110f0576003546110eb907f0000000000000000000000000000000000000000000000000000000000000000612b71565b905090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a8a3e31d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561114e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110eb9190612b84565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632f09177d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f49190612ac7565b6001600160a01b0316336001600160a01b03161461121457611214612333565b60006112208383612360565b600154600254604080518481526020810193909352820152909150600080516020612c828339815191529060600161107f565b6040516323b872dd60e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906112a690339030908790600401612bc6565b6020604051808303816000875af11580156112c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e99190612bea565b5060405163a47d75ad60e01b81526004810183905262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a47d75ad906044016020604051808303816000875af115801561137f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a39190612b84565b90506113ae8161212c565b600080516020612c828339815191526113c56120c5565b6001546002546040805193845260208401929092529082015260600160405180910390a192915050565b6005546000906110eb90600160281b900464ffffffffff16611cc4565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632f09177d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561146a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148e9190612ac7565b6001600160a01b0316336001600160a01b0316146114ae576114ae612333565b60006114b86120c5565b90506114c58383836123df565b600154600254604080518481526020810193909352820152600080516020612c828339815191529060600161107f565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461153e576040516313bd2e8360e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008110801561157357506115706120c5565b81105b1561159157604051633c80636b60e21b815260040160405180910390fd5b806000036115b257604051633c80636b60e21b815260040160405180910390fd5b80600460008282546115c49190612b9d565b909155505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611615576040516313bd2e8360e31b815260040160405180910390fd5b80600460008282546116279190612b71565b909155506116399050620151806121eb565b6116446110466120c5565b50565b60405163aa5dd7f160e01b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa1580156116d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f59190612ac7565b6001600160a01b03161461171c576040516313bd2e8360e31b815260040160405180910390fd5b80600360008282546115c49190612b71565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611777576040516313bd2e8360e31b815260040160405180910390fd5b600554600160281b900464ffffffffff16156117a55760405162dc149f60e41b815260040160405180910390fd5b428164ffffffffff16108061184857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611813573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118379190612c07565b64ffffffffff168164ffffffffff16115b1561186657604051637d9533a960e11b815260040160405180910390fd5b806005806101000a81548164ffffffffff021916908364ffffffffff160217905550816001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ea9190612b84565b6001556119167f000000000000000000000000000000000000000000000000000000000000000061261c565b5050565b611922612333565b600061192c6120c5565b9050808311156119d4576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd33306119718588612b71565b6040518463ffffffff1660e01b815260040161198f93929190612bc6565b6020604051808303816000875af11580156119ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d29190612bea565b505b600254841015611acd577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663315f3e723386600254611a1c9190612b71565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015262ffffff7f00000000000000000000000000000000000000000000000000000000000000001660448201526064016020604051808303816000875af1158015611a92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab69190612b84565b50611acd84600254611ac89190612b71565b61212c565b80831015611aea57611ae833611ae38584612b71565b612360565b505b600254841115611b0c57611b0c3360025486611b069190612b71565b856123df565b6001548214611b1e57611b1e8261266c565b6040805184815260208101849052908101859052600080516020612c828339815191529060600160405180910390a150505050565b611b5b612333565b6107df600061261c565b611b6d612333565b611b768161266c565b600080516020612c82833981519152611b8d6120c5565b6001546002546040805193845260208401929092529082015260600160405180910390a150565b60007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632c4e722e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c599190612ac7565b6001600160a01b03166306a7b3766040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cba9190612c24565b6110eb9190612c49565b6000807f000000000000000000000000000000000000000000000000000000000000000064ffffffffff164210611cfb5742611d24565b7f000000000000000000000000000000000000000000000000000000000000000064ffffffffff165b90506000611d328285612b71565b905060006301e13380611d43611bb4565b611d529062ffffff1684612a8e565b611d5c9190612aa5565b9050620f42408111611d6e5780611d73565b620f42405b95945050505050565b60008115611dfb57611d8c6113ef565b611db97f0000000000000000000000000000000000000000000000000000000000000000620f4240612a73565b611dc39190612a73565b62ffffff166001611dd784620f4240612a8e565b611de19190612b71565b611deb9190612aa5565b611df6906001612b9d565b61073d565b600092915050565b600080600254670de0b6b3a7640000600154611e1d6120c5565b611e279190612a8e565b611e319190612aa5565b611e3b9190612b71565b90507f000000000000000000000000000000000000000000000000000000000000000081600354611e6c9190612b9d565b10611e7957600091505090565b806003547f0000000000000000000000000000000000000000000000000000000000000000611ea89190612b71565b611eb29190612b71565b91505090565b60405163aa5dd7f160e01b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116917f00000000000000000000000000000000000000000000000000000000000000009091169063aa5dd7f190602401602060405180830381865afa158015611f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f669190612ac7565b6001600160a01b031614611f8d576040516313bd2e8360e31b815260040160405180910390fd5b80600360008282546115c49190612b9d565b611fa7612333565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b031603611fef57611fea8282611172565b505050565b6000611ff96120c5565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529192509085169063a9059cbb906044016020604051808303816000875af115801561204c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120709190612bea565b506120796120c5565b811461208457600080fd5b50505050565b612092612333565b6001600160a01b0381166120bc57604051631e4fbdf760e01b8152600060048201526024016107d6565b6116448161261c565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561114e573d6000803e3d6000fd5b60025481111561215f576002546121439082612b71565b604051635795d46960e11b81526004016107d691815260200190565b604051635be980f560e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635be980f590602401600060405180830381600087803b1580156121c157600080fd5b505af11580156121d5573d6000803e3d6000fd5b5050505080600260008282546115c49190612b71565b60006121f78242612c64565b60055490915064ffffffffff9081169082161115611916576005805464ffffffffff831664ffffffffff199091161790555050565b600081156122c95760405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156122a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c79190612bea565b505b60006122d36120c5565b90506122de816122e5565b9392505050565b7f0000000000000000000000000000000000000000000000000000000000000000811080156123145750600454155b15611644576116446005805464ffffffffff191664ffffffffff179055565b6000546001600160a01b031633146107df5760405163118cdaa760e01b81523360048201526024016107d6565b600454600090156123845760405163d26e2de960e01b815260040160405180910390fd5b60055464ffffffffff1642118015906123a7575060055464ffffffffff90811614155b156123c557604051631c02820f60e21b815260040160405180910390fd5b60006123d1848461222c565b90506122de81600154612724565b600454156124005760405163d26e2de960e01b815260040160405180910390fd5b60055464ffffffffff16421161242957604051631c02820f60e21b815260040160405180910390fd5b600554600160281b900464ffffffffff164210612476576005546040516238ddd760e41b815264ffffffffff4281166004830152600160281b9092049190911660248201526044016107d6565b61247e61108c565b8211156124b0578161248e61108c565b604051634779077960e11b8152600481019290925260248201526044016107d6565b604051630cfb636f60e41b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cfb636f090602401600060405180830381600087803b15801561251257600080fd5b505af1158015612526573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638112eb2b84847f00000000000000000000000000000000000000000000000000000000000000006125846113ef565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925262ffffff9081166044840152166064820152608401600060405180830381600087803b1580156125df57600080fd5b505af11580156125f3573d6000803e3d6000fd5b5050505081600260008282546126099190612b9d565b92505081905550611fea81600154612724565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6004541561268d5760405163d26e2de960e01b815260040160405180910390fd5b600554600160281b900464ffffffffff1642106126da576005546040516238ddd760e41b815264ffffffffff4281166004830152600160281b9092049190911660248201526044016107d6565b6001548111156126f5576126f06203f4806121eb565b612706565b6127066127006120c5565b82612724565b6116448161271261108c565b60025461271f9190612b9d565b61278c565b670de0b6b3a764000060025461273a9190612a8e565b6127448284612a8e565b1015611916576127548183612a8e565b670de0b6b3a764000060025461276a9190612a8e565b604051632c1f8ef160e21b8152600481019290925260248201526044016107d6565b61279e670de0b6b3a764000082612a8e565b6127c87f000000000000000000000000000000000000000000000000000000000000000084612a8e565b11156127d357600080fd5b50600155565b801515811461164457600080fd5b600080604083850312156127fa57600080fd5b82359150602083013561280c816127d9565b809150509250929050565b60008083601f84011261282957600080fd5b50813567ffffffffffffffff81111561284157600080fd5b60208301915083602082850101111561285957600080fd5b9250929050565b6000806000806040858703121561287657600080fd5b843567ffffffffffffffff81111561288d57600080fd5b8501601f8101871361289e57600080fd5b803567ffffffffffffffff8111156128b557600080fd5b8760208260051b84010111156128ca57600080fd5b60209182019550935085013567ffffffffffffffff8111156128eb57600080fd5b6128f787828801612817565b95989497509550505050565b6001600160a01b038116811461164457600080fd5b6000806040838503121561292b57600080fd5b823561293681612903565b946020939093013593505050565b60008060006060848603121561295957600080fd5b833561296481612903565b95602085013595506040909401359392505050565b60006020828403121561298b57600080fd5b5035919050565b64ffffffffff8116811461164457600080fd5b600080604083850312156129b857600080fd5b82356129c381612903565b9150602083013561280c81612992565b6000806000606084860312156129e857600080fd5b505081359360208301359350604090920135919050565b600080600060608486031215612a1457600080fd5b8335612a1f81612903565b92506020840135612a2f81612903565b929592945050506040919091013590565b600060208284031215612a5257600080fd5b81356122de81612903565b634e487b7160e01b600052601160045260246000fd5b62ffffff828116828216039081111561073d5761073d612a5d565b808202811582820484141761073d5761073d612a5d565b600082612ac257634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612ad957600080fd5b81516122de81612903565b6001600160a01b0384168152604060208201819052810182905260008360608301825b85811015612b37578235612b1a81612903565b6001600160a01b0316825260209283019290910190600101612b07565b509695505050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b8181038181111561073d5761073d612a5d565b600060208284031215612b9657600080fd5b5051919050565b8082018082111561073d5761073d612a5d565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215612bfc57600080fd5b81516122de816127d9565b600060208284031215612c1957600080fd5b81516122de81612992565b600060208284031215612c3657600080fd5b815162ffffff811681146122de57600080fd5b62ffffff818116838216019081111561073d5761073d612a5d565b64ffffffffff818116838216019081111561073d5761073d612a5d56fe9483a26ad376f30b5199a79e75df3bb05158c4ee32a348f53e83245a5e50c86ea2646970667358221220b6038b5b913bbf94379e79c8f52d3682e65a7122c35a649749c2bb41bbd2f08164736f6c634300081a0033a2646970667358221220430d9d4d6f6c8a5fd60f55077182df1c1e9ba7d1484e3bb2603fcdca3e9c574a64736f6c634300081a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "clonePosition(address)": {
        "params": {
          "_parent": "address of the position we want to clone"
        },
        "returns": {
          "_0": "address of the newly created clone position"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "clonePosition(address)": {
        "notice": "clone an existing position. This can be a clone of another clone, or an original position."
      },
      "createNewPosition(address,address,address,uint256,uint256,uint40,uint40,uint40,uint24,uint256,uint24)": {
        "notice": "Create a completely new position in a newly deployed contract. Must be called through minting hub to be recognized as valid position."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
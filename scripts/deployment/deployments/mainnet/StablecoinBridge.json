{
  "address": "0x7bbe8F18040aF0032f4C2435E7a76db6F1E346DF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "other",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "zchfAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "Limit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "UnsupportedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnAndSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chf",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "horizon",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zchf",
      "outputs": [
        {
          "internalType": "contract IFrankencoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2fed189dd64ef63b8bc3d4820b0caed5bc34bfb6466b4c9ad107ad36445f2f11",
  "receipt": {
    "to": null,
    "from": "0x58f13e67E465d302a733285488f868e917D99629",
    "contractAddress": "0x7bbe8F18040aF0032f4C2435E7a76db6F1E346DF",
    "transactionIndex": 54,
    "gasUsed": "393248",
    "logsBloom": "0x
    "blockHash": "0xb4833b5c7be46c8b0036da43fd19cdf37b5178298ba7e7be8e433e8848d86a94",
    "transactionHash": "0x2fed189dd64ef63b8bc3d4820b0caed5bc34bfb6466b4c9ad107ad36445f2f11",
    "logs": [],
    "blockNumber": 18451571,
    "cumulativeGasUsed": "8763467",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb4272071ecadd69d933adcd19ca99fe80664fc08",
    "0xB58E61C3098d85632Df34EecfB899A1Ed80921cB",
    "10000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "b9f4a1c164efac5e1e967e1b0ca42ccf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"other\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zchfAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"Limit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnsupportedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chf\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"horizon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zchf\",\"outputs\":[{\"internalType\":\"contract IFrankencoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Frankencoin\",\"kind\":\"dev\",\"methods\":{\"mintTo(address,uint256)\":{\"details\":\"This only works if an allowance for the source coins has been set and the caller has enough of them.\"}},\"title\":\"Stable Coin Bridge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Convenience method for burnAndSend(msg.sender, amount)\"},\"burnAndSend(address,uint256)\":{\"notice\":\"Burn the indicated amount of Frankencoin and send the same number of source coin to the caller.\"},\"horizon()\":{\"notice\":\"The time horizon after which this bridge expires and needs to be replaced by a new contract.\"},\"limit()\":{\"notice\":\"The maximum amount of outstanding converted source stablecoins.\"},\"mint(uint256)\":{\"notice\":\"Convenience method for mint(msg.sender, amount)\"},\"mintTo(address,uint256)\":{\"notice\":\"Mint the target amount of Frankencoins, taking the equal amount of source coins from the sender.\"}},\"notice\":\"A minting contract for another Swiss franc stablecoin ('source stablecoin') that we trust.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StablecoinBridge.sol\":\"StablecoinBridge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/StablecoinBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interface/IERC20.sol\\\";\\r\\nimport \\\"./interface/IERC677Receiver.sol\\\";\\r\\nimport \\\"./interface/IFrankencoin.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Stable Coin Bridge\\r\\n * @notice A minting contract for another Swiss franc stablecoin ('source stablecoin') that we trust.\\r\\n * @author Frankencoin\\r\\n */\\r\\ncontract StablecoinBridge {\\r\\n    IERC20 public immutable chf; // the source stablecoin\\r\\n    IFrankencoin public immutable zchf; // the Frankencoin\\r\\n\\r\\n    /**\\r\\n     * @notice The time horizon after which this bridge expires and needs to be replaced by a new contract.\\r\\n     */\\r\\n    uint256 public immutable horizon;\\r\\n\\r\\n    /**\\r\\n     * The maximum amount of outstanding converted source stablecoins.\\r\\n     */\\r\\n    uint256 public immutable limit;\\r\\n    uint256 public minted;\\r\\n\\r\\n    error Limit(uint256 amount, uint256 limit);\\r\\n    error Expired(uint256 time, uint256 expiration);\\r\\n    error UnsupportedToken(address token);\\r\\n\\r\\n    constructor(address other, address zchfAddress, uint256 limit_) {\\r\\n        chf = IERC20(other);\\r\\n        zchf = IFrankencoin(zchfAddress);\\r\\n        horizon = block.timestamp + 52 weeks;\\r\\n        limit = limit_;\\r\\n        minted = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Convenience method for mint(msg.sender, amount)\\r\\n     */\\r\\n    function mint(uint256 amount) external {\\r\\n        mintTo(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Mint the target amount of Frankencoins, taking the equal amount of source coins from the sender.\\r\\n     * @dev This only works if an allowance for the source coins has been set and the caller has enough of them.\\r\\n     */\\r\\n    function mintTo(address target, uint256 amount) public {\\r\\n        chf.transferFrom(msg.sender, address(this), amount);\\r\\n        _mint(target, amount);\\r\\n    }\\r\\n\\r\\n    function _mint(address target, uint256 amount) internal {\\r\\n        if (block.timestamp > horizon) revert Expired(block.timestamp, horizon);\\r\\n        zchf.mint(target, amount);\\r\\n        minted += amount;\\r\\n        if (minted > limit) revert Limit(amount, limit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Convenience method for burnAndSend(msg.sender, amount)\\r\\n     */\\r\\n    function burn(uint256 amount) external {\\r\\n        _burn(msg.sender, msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burn the indicated amount of Frankencoin and send the same number of source coin to the caller.\\r\\n     */\\r\\n    function burnAndSend(address target, uint256 amount) external {\\r\\n        _burn(msg.sender, target, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address zchfHolder, address target, uint256 amount) internal {\\r\\n        zchf.burnFrom(zchfHolder, amount);\\r\\n        chf.transfer(target, amount);\\r\\n        minted -= amount;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x739467189974be42c1b286c626cc0890ec3ed25a91335807f5e0edf97b10f12d\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"/**\\r\\n * SPDX-License-Identifier: MIT\\r\\n *\\r\\n * Copyright (c) 2016-2019 zOS Global Limited\\r\\n *\\r\\n */\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\r\\n * the optional functions; to access them see `ERC20Detailed`.\\r\\n */\\r\\n\\r\\ninterface IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns always true. Throws error on failure.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value can change when `approve` or `transferFrom` are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * > Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an `Approval` event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns always true. Throws error on failure.\\r\\n     *\\r\\n     * Emits a `Transfer` event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to `approve`. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0xb03b76da4615a3d96c7ab98626f9f6b77068a0335aa4cb6f29ee068c71577181\",\"license\":\"MIT\"},\"contracts/interface/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC677Receiver {\\r\\n    \\r\\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\r\\n\\r\\n}\",\"keccak256\":\"0x1641961d25b21e0e7fdc93c1cb29fbd9ecdf02ee67e112794c3f2c4dad74910c\",\"license\":\"MIT\"},\"contracts/interface/IFrankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IReserve.sol\\\";\\r\\n\\r\\ninterface IFrankencoin is IERC20 {\\r\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, uint256 _applicationFee, string calldata _message) external;\\r\\n\\r\\n    function registerPosition(address position) external;\\r\\n\\r\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\r\\n\\r\\n    function reserve() external view returns (IReserve);\\r\\n\\r\\n    function minterReserve() external view returns (uint256);\\r\\n\\r\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\r\\n\\r\\n    function equity() external view returns (uint256);\\r\\n\\r\\n    function isMinter(address minter) external view returns (bool);\\r\\n\\r\\n    function getPositionParent(address position) external view returns (address);\\r\\n\\r\\n    function mint(address target, uint256 amount) external;\\r\\n\\r\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\r\\n\\r\\n    function burnFrom(address target, uint256 amount) external;\\r\\n\\r\\n    function burnWithoutReserve(uint256 amountIncludingReserve, uint32 reservePPM) external;\\r\\n\\r\\n    function burnFromWithReserve(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external returns (uint256);\\r\\n\\r\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\r\\n\\r\\n    function coverLoss(address source, uint256 amount) external;\\r\\n\\r\\n    function collectProfits(address source, uint256 _amount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf642157f61929639037d9b22484020d8e4ca793e71fd0ef2efb8c5bd53d8fd17\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\ninterface IReserve is IERC20 {\\r\\n   function invest(uint256 amount, uint256 expected) external returns (uint256);\\r\\n   function checkQualified(address sender, address[] calldata helpers) external view;\\r\\n}\",\"keccak256\":\"0xa0ec8a4b3c8b5320aca82d7a7a8e9910fd31f03cf44653031474821412cdc1cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b506040516107643803806107648339810160408190526100309161007e565b6001600160a01b03808416608052821660a052610051426301dfe2006100ba565b60c05260e0525050600080556100e1565b80516001600160a01b038116811461007957600080fd5b919050565b60008060006060848603121561009357600080fd5b61009c84610062565b92506100aa60208501610062565b9150604084015190509250925092565b808201808211156100db57634e487b7160e01b600052601160045260246000fd5b92915050565b60805160a05160c05160e0516106146101506000396000818161016d015281816104bb01526104f6015260008181609d015281816103b201526103ed015260008181610194015281816102a5015261044401526000818160d7015281816101e6015261032501526106146000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80634f02c420116100665780634f02c420146101395780639e41b44d14610142578063a0712d6814610155578063a4d66daf14610168578063c4d4803a1461018f57600080fd5b80631ce832b51461009857806337b272b0146100d257806342966c6814610111578063449a52f814610126575b600080fd5b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100f97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c9565b61012461011f366004610522565b6101b6565b005b61012461013436600461053b565b6101c4565b6100bf60005481565b61012461015036600461053b565b61026a565b610124610163366004610522565b610275565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6100f97f000000000000000000000000000000000000000000000000000000000000000081565b6101c133338361027f565b50565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025b9190610573565b5061026682826103b0565b5050565b61026633838361027f565b6101c133826101c4565b60405163079cc67960e41b81526001600160a01b038481166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906379cc679090604401600060405180830381600087803b1580156102e957600080fd5b505af11580156102fd573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016925063a9059cbb91506044016020604051808303816000875af1158015610370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103949190610573565b50806000808282546103a691906105b2565b9091555050505050565b7f000000000000000000000000000000000000000000000000000000000000000042111561041e5760405163aa2fd92560e01b81524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044015b60405180910390fd5b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561048857600080fd5b505af115801561049c573d6000803e3d6000fd5b50505050806000808282546104b191906105cb565b90915550506000547f0000000000000000000000000000000000000000000000000000000000000000101561026657604051631927a4b960e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006024820152604401610415565b60006020828403121561053457600080fd5b5035919050565b6000806040838503121561054e57600080fd5b82356001600160a01b038116811461056557600080fd5b946020939093013593505050565b60006020828403121561058557600080fd5b8151801515811461059557600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105c5576105c561059c565b92915050565b808201808211156105c5576105c561059c56fea26469706673582212200d23349045d49a02089d7b39302762f8a2d7ded4cba49045aa129e8f1f7fb75d64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80634f02c420116100665780634f02c420146101395780639e41b44d14610142578063a0712d6814610155578063a4d66daf14610168578063c4d4803a1461018f57600080fd5b80631ce832b51461009857806337b272b0146100d257806342966c6814610111578063449a52f814610126575b600080fd5b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100f97f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c9565b61012461011f366004610522565b6101b6565b005b61012461013436600461053b565b6101c4565b6100bf60005481565b61012461015036600461053b565b61026a565b610124610163366004610522565b610275565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6100f97f000000000000000000000000000000000000000000000000000000000000000081565b6101c133338361027f565b50565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025b9190610573565b5061026682826103b0565b5050565b61026633838361027f565b6101c133826101c4565b60405163079cc67960e41b81526001600160a01b038481166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906379cc679090604401600060405180830381600087803b1580156102e957600080fd5b505af11580156102fd573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016925063a9059cbb91506044016020604051808303816000875af1158015610370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103949190610573565b50806000808282546103a691906105b2565b9091555050505050565b7f000000000000000000000000000000000000000000000000000000000000000042111561041e5760405163aa2fd92560e01b81524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044015b60405180910390fd5b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561048857600080fd5b505af115801561049c573d6000803e3d6000fd5b50505050806000808282546104b191906105cb565b90915550506000547f0000000000000000000000000000000000000000000000000000000000000000101561026657604051631927a4b960e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006024820152604401610415565b60006020828403121561053457600080fd5b5035919050565b6000806040838503121561054e57600080fd5b82356001600160a01b038116811461056557600080fd5b946020939093013593505050565b60006020828403121561058557600080fd5b8151801515811461059557600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105c5576105c561059c565b92915050565b808201808211156105c5576105c561059c56fea26469706673582212200d23349045d49a02089d7b39302762f8a2d7ded4cba49045aa129e8f1f7fb75d64736f6c63430008140033",
  "devdoc": {
    "author": "Frankencoin",
    "kind": "dev",
    "methods": {
      "mintTo(address,uint256)": {
        "details": "This only works if an allowance for the source coins has been set and the caller has enough of them."
      }
    },
    "title": "Stable Coin Bridge",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Convenience method for burnAndSend(msg.sender, amount)"
      },
      "burnAndSend(address,uint256)": {
        "notice": "Burn the indicated amount of Frankencoin and send the same number of source coin to the caller."
      },
      "horizon()": {
        "notice": "The time horizon after which this bridge expires and needs to be replaced by a new contract."
      },
      "limit()": {
        "notice": "The maximum amount of outstanding converted source stablecoins."
      },
      "mint(uint256)": {
        "notice": "Convenience method for mint(msg.sender, amount)"
      },
      "mintTo(address,uint256)": {
        "notice": "Mint the target amount of Frankencoins, taking the equal amount of source coins from the sender."
      }
    },
    "notice": "A minting contract for another Swiss franc stablecoin ('source stablecoin') that we trust.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4430,
        "contract": "contracts/StablecoinBridge.sol:StablecoinBridge",
        "label": "minted",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
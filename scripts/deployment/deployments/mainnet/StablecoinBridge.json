{
  "address": "0xA719b0D3f447118632fECc48c3273224D1319099",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "other",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dEUROAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weeks_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "Limit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "UnsupportedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnAndSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dEURO",
      "outputs": [
        {
          "internalType": "contract IDecentralizedEURO",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eur",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "horizon",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x28f2195b40317167918d91019044bd9329ff99e5bdf742b40641992f1a35d6f4",
  "receipt": {
    "to": null,
    "from": "0x58b104da218e80DA6DA7E14C37A32851a26c8a6a",
    "contractAddress": "0xA719b0D3f447118632fECc48c3273224D1319099",
    "transactionIndex": 1,
    "gasUsed": "540364",
    "logsBloom": "0x
    "blockHash": "0x76259e5aa863318f4a1309ae2451814e4c2c81359884459519d6aaa352b105e3",
    "transactionHash": "0x28f2195b40317167918d91019044bd9329ff99e5bdf742b40641992f1a35d6f4",
    "logs": [],
    "blockNumber": 21278904,
    "cumulativeGasUsed": "561364",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdb25f211ab05b1c97d595516f45794528a807ad8",
    "0xd45e911843721083A2751fA9Cc9D2a8089D8C0f5",
    "500000000000000000000",
    30
  ],
  "numDeployments": 4,
  "solcInputHash": "477a6d2dedb862bfa753790fbf4e3610",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"other\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dEUROAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weeks_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"Limit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnsupportedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dEURO\",\"outputs\":[{\"internalType\":\"contract IDecentralizedEURO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eur\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"horizon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"dEURO\",\"kind\":\"dev\",\"methods\":{\"burn(uint256)\":{\"params\":{\"amount\":\"The amount of dEURO to burn.\"}},\"mintTo(address,uint256)\":{\"details\":\"This only works if an allowance for the source coins has been set and the caller has enough of them.\",\"params\":{\"amount\":\"The amount of the source stablecoin to bridge (convert).\"}}},\"title\":\"Stable Coin Bridge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Convenience method for burnAndSend(msg.sender, amount)\"},\"burnAndSend(address,uint256)\":{\"notice\":\"Burn the indicated amount of dEURO and send the same number of source coin to the caller.\"},\"horizon()\":{\"notice\":\"The time horizon after which this bridge expires and needs to be replaced by a new contract.\"},\"limit()\":{\"notice\":\"The maximum amount of outstanding converted source stablecoins.\"},\"mint(uint256)\":{\"notice\":\"Convenience method for mint(msg.sender, amount)\"},\"mintTo(address,uint256)\":{\"notice\":\"Mint the target amount of dEUROs, taking the equal amount of source coins from the sender.\"}},\"notice\":\"A minting contract for another Euro stablecoin ('source stablecoin') that we trust.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StablecoinBridge.sol\":\"StablecoinBridge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\"},\"contracts/StablecoinBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IDecentralizedEURO} from \\\"./interface/IDecentralizedEURO.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title Stable Coin Bridge\\n * @notice A minting contract for another Euro stablecoin ('source stablecoin') that we trust.\\n * @author dEURO\\n */\\ncontract StablecoinBridge {\\n    IERC20 public immutable eur; // the source stablecoin\\n    IDecentralizedEURO public immutable dEURO; // the dEURO\\n    uint8 private immutable eurDecimals;\\n    uint8 private immutable dEURODecimals;\\n\\n    /**\\n     * @notice The time horizon after which this bridge expires and needs to be replaced by a new contract.\\n     */\\n    uint256 public immutable horizon;\\n\\n    /**\\n     * The maximum amount of outstanding converted source stablecoins.\\n     */\\n    uint256 public immutable limit;\\n    uint256 public minted;\\n\\n    error Limit(uint256 amount, uint256 limit);\\n    error Expired(uint256 time, uint256 expiration);\\n    error UnsupportedToken(address token);\\n\\n    constructor(address other, address dEUROAddress, uint256 limit_, uint256 weeks_) {\\n        eur = IERC20(other);\\n        dEURO = IDecentralizedEURO(dEUROAddress);\\n        eurDecimals = IERC20Metadata(other).decimals();\\n        dEURODecimals = IERC20Metadata(dEUROAddress).decimals();\\n        horizon = block.timestamp + weeks_ * 1 weeks;\\n        limit = limit_;\\n        minted = 0;\\n    }\\n\\n    /**\\n     * @notice Convenience method for mint(msg.sender, amount)\\n     */\\n    function mint(uint256 amount) external {\\n        mintTo(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Mint the target amount of dEUROs, taking the equal amount of source coins from the sender.\\n     * @dev This only works if an allowance for the source coins has been set and the caller has enough of them.\\n     * @param amount The amount of the source stablecoin to bridge (convert).\\n     */\\n    function mintTo(address target, uint256 amount) public {\\n        eur.transferFrom(msg.sender, address(this), amount);\\n        \\n        uint256 targetAmount = _convertAmount(amount, eurDecimals, dEURODecimals);\\n        _mint(target, targetAmount);\\n    }\\n\\n    function _mint(address target, uint256 amount) internal {\\n        if (block.timestamp > horizon) revert Expired(block.timestamp, horizon);\\n        dEURO.mint(target, amount);\\n        minted += amount;\\n        if (minted > limit) revert Limit(amount, limit);\\n    }\\n\\n    /**\\n     * @notice Convenience method for burnAndSend(msg.sender, amount)\\n     * @param amount The amount of dEURO to burn.\\n     */\\n    function burn(uint256 amount) external {\\n        _burn(msg.sender, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Burn the indicated amount of dEURO and send the same number of source coin to the caller.\\n     */\\n    function burnAndSend(address target, uint256 amount) external {\\n        _burn(msg.sender, target, amount);\\n    }\\n\\n    function _burn(address dEUROHolder, address target, uint256 amount) internal {\\n        uint256 sourceAmount = _convertAmount(amount, dEURODecimals, eurDecimals);\\n        dEURO.burnFrom(dEUROHolder, amount);\\n        eur.transfer(target, sourceAmount);\\n        minted -= amount;\\n    }\\n\\n    /**\\n     * @notice Converts an amount between two tokens with different decimal places.\\n     * @param amount The amount to convert.\\n     * @param fromDecimals The decimal places of the source token.\\n     * @param toDecimals The decimal places of the target token.\\n     */\\n    function _convertAmount(uint256 amount, uint8 fromDecimals, uint8 toDecimals) internal pure returns (uint256) {\\n        if (fromDecimals < toDecimals) {\\n            return amount * 10**(toDecimals - fromDecimals);\\n        } else if (fromDecimals > toDecimals) {\\n            return amount / 10**(fromDecimals - toDecimals);\\n        } else {\\n            return amount;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fe5f16fe83ee78a1cd3f5efb121319fb19c0638d5c2a5e844aaf22cc12db9b1\",\"license\":\"MIT\"},\"contracts/interface/IDecentralizedEURO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IReserve} from \\\"./IReserve.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDecentralizedEURO is IERC20 {\\n    function suggestMinter(\\n        address _minter,\\n        uint256 _applicationPeriod,\\n        uint256 _applicationFee,\\n        string calldata _message\\n    ) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function minterReserve() external view returns (uint256);\\n\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\n\\n    function calculateFreedAmount(uint256 amountExcludingReserve, uint32 reservePPM) external view returns (uint256);\\n\\n    function equity() external view returns (uint256);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function getPositionParent(address position) external view returns (address);\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burnFrom(address target, uint256 amount) external;\\n\\n    function burnWithoutReserve(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnFromWithReserve(\\n        address payer,\\n        uint256 targetTotalBurnAmount,\\n        uint32 _reservePPM\\n    ) external returns (uint256);\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n    function coverLoss(address source, uint256 amount) external;\\n\\n    function collectProfits(address source, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x5a794e79a91424814795d9f3edd3db86e4d360f652a0250c04c279592417bb8e\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IReserve is IERC20 {\\n    function invest(uint256 amount, uint256 expected) external returns (uint256);\\n    function checkQualified(address sender, address[] calldata helpers) external view;\\n}\\n\",\"keccak256\":\"0x8d413b94c7860d6f8a9ba0168642db626830209824e4ad2d879d5f252490d2b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61014060405234801561001157600080fd5b50604051610b11380380610b1183398101604081905261003091610161565b6001600160a01b03808516608081905290841660a0526040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa158015610081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100a591906101a4565b60ff1660c08160ff1681525050826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011491906101a4565b60ff1660e0526101278162093a806101e4565b6101319042610201565b610100525061012052505060008055610214565b80516001600160a01b038116811461015c57600080fd5b919050565b6000806000806080858703121561017757600080fd5b61018085610145565b935061018e60208601610145565b6040860151606090960151949790965092505050565b6000602082840312156101b657600080fd5b815160ff811681146101c757600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176101fb576101fb6101ce565b92915050565b808201808211156101fb576101fb6101ce565b60805160a05160c05160e05161010051610120516108696102a86000396000818161016d015281816105cf015261060a015260008181609d015281816104c6015261050101526000818161028501526102db01526000818161026401526102fc015260008181610194015281816103490152610558015260008181610108015281816101e601526103cb01526108696000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80637439ae59116100665780637439ae59146101035780639e41b44d14610142578063a0712d6814610155578063a4d66daf14610168578063d395d24b1461018f57600080fd5b80631ce832b51461009857806342966c68146100d2578063449a52f8146100e75780634f02c420146100fa575b600080fd5b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100e56100e0366004610636565b6101b6565b005b6100e56100f536600461064f565b6101c4565b6100bf60005481565b61012a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c9565b6100e561015036600461064f565b6102ba565b6100e5610163366004610636565b6102c9565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b61012a7f000000000000000000000000000000000000000000000000000000000000000081565b6101c13333836102d3565b50565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025b9190610687565b5060006102a9827f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610457565b90506102b583826104c4565b505050565b6102c53383836102d3565b5050565b6101c133826101c4565b6000610320827f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610457565b60405163079cc67960e41b81526001600160a01b038681166004830152602482018590529192507f0000000000000000000000000000000000000000000000000000000000000000909116906379cc679090604401600060405180830381600087803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016925063a9059cbb91506044016020604051808303816000875af1158015610416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043a9190610687565b508160008082825461044c91906106bf565b909155505050505050565b60008160ff168360ff16101561048d5761047183836106d8565b61047c90600a6107d8565b61048690856107e7565b90506104bd565b8160ff168360ff1611156104ba576104a582846106d8565b6104b090600a6107d8565b61048690856107fe565b50825b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000004211156105325760405163aa2fd92560e01b81524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044015b60405180910390fd5b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561059c57600080fd5b505af11580156105b0573d6000803e3d6000fd5b50505050806000808282546105c59190610820565b90915550506000547f000000000000000000000000000000000000000000000000000000000000000010156102c557604051631927a4b960e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006024820152604401610529565b60006020828403121561064857600080fd5b5035919050565b6000806040838503121561066257600080fd5b82356001600160a01b038116811461067957600080fd5b946020939093013593505050565b60006020828403121561069957600080fd5b815180151581146104bd57600080fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156106d2576106d26106a9565b92915050565b60ff82811682821603908111156106d2576106d26106a9565b6001815b600184111561072c57808504811115610710576107106106a9565b600184161561071e57908102905b60019390931c9280026106f5565b935093915050565b600082610743575060016106d2565b81610750575060006106d2565b816001811461076657600281146107705761078c565b60019150506106d2565b60ff841115610781576107816106a9565b50506001821b6106d2565b5060208310610133831016604e8410600b84101617156107af575081810a6106d2565b6107bc60001984846106f1565b80600019048211156107d0576107d06106a9565b029392505050565b60006104bd60ff841683610734565b80820281158282048414176106d2576106d26106a9565b60008261081b57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156106d2576106d26106a956fea264697066735822122014fbf57e8417b936ca0b853ba5b46a09d0b02da1de13ef970d3ec4473ae5f82464736f6c634300081a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80637439ae59116100665780637439ae59146101035780639e41b44d14610142578063a0712d6814610155578063a4d66daf14610168578063d395d24b1461018f57600080fd5b80631ce832b51461009857806342966c68146100d2578063449a52f8146100e75780634f02c420146100fa575b600080fd5b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100e56100e0366004610636565b6101b6565b005b6100e56100f536600461064f565b6101c4565b6100bf60005481565b61012a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c9565b6100e561015036600461064f565b6102ba565b6100e5610163366004610636565b6102c9565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b61012a7f000000000000000000000000000000000000000000000000000000000000000081565b6101c13333836102d3565b50565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025b9190610687565b5060006102a9827f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610457565b90506102b583826104c4565b505050565b6102c53383836102d3565b5050565b6101c133826101c4565b6000610320827f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610457565b60405163079cc67960e41b81526001600160a01b038681166004830152602482018590529192507f0000000000000000000000000000000000000000000000000000000000000000909116906379cc679090604401600060405180830381600087803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038681166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016925063a9059cbb91506044016020604051808303816000875af1158015610416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043a9190610687565b508160008082825461044c91906106bf565b909155505050505050565b60008160ff168360ff16101561048d5761047183836106d8565b61047c90600a6107d8565b61048690856107e7565b90506104bd565b8160ff168360ff1611156104ba576104a582846106d8565b6104b090600a6107d8565b61048690856107fe565b50825b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000004211156105325760405163aa2fd92560e01b81524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044015b60405180910390fd5b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561059c57600080fd5b505af11580156105b0573d6000803e3d6000fd5b50505050806000808282546105c59190610820565b90915550506000547f000000000000000000000000000000000000000000000000000000000000000010156102c557604051631927a4b960e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006024820152604401610529565b60006020828403121561064857600080fd5b5035919050565b6000806040838503121561066257600080fd5b82356001600160a01b038116811461067957600080fd5b946020939093013593505050565b60006020828403121561069957600080fd5b815180151581146104bd57600080fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156106d2576106d26106a9565b92915050565b60ff82811682821603908111156106d2576106d26106a9565b6001815b600184111561072c57808504811115610710576107106106a9565b600184161561071e57908102905b60019390931c9280026106f5565b935093915050565b600082610743575060016106d2565b81610750575060006106d2565b816001811461076657600281146107705761078c565b60019150506106d2565b60ff841115610781576107816106a9565b50506001821b6106d2565b5060208310610133831016604e8410600b84101617156107af575081810a6106d2565b6107bc60001984846106f1565b80600019048211156107d0576107d06106a9565b029392505050565b60006104bd60ff841683610734565b80820281158282048414176106d2576106d26106a9565b60008261081b57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156106d2576106d26106a956fea264697066735822122014fbf57e8417b936ca0b853ba5b46a09d0b02da1de13ef970d3ec4473ae5f82464736f6c634300081a0033",
  "devdoc": {
    "author": "dEURO",
    "kind": "dev",
    "methods": {
      "burn(uint256)": {
        "params": {
          "amount": "The amount of dEURO to burn."
        }
      },
      "mintTo(address,uint256)": {
        "details": "This only works if an allowance for the source coins has been set and the caller has enough of them.",
        "params": {
          "amount": "The amount of the source stablecoin to bridge (convert)."
        }
      }
    },
    "title": "Stable Coin Bridge",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Convenience method for burnAndSend(msg.sender, amount)"
      },
      "burnAndSend(address,uint256)": {
        "notice": "Burn the indicated amount of dEURO and send the same number of source coin to the caller."
      },
      "horizon()": {
        "notice": "The time horizon after which this bridge expires and needs to be replaced by a new contract."
      },
      "limit()": {
        "notice": "The maximum amount of outstanding converted source stablecoins."
      },
      "mint(uint256)": {
        "notice": "Convenience method for mint(msg.sender, amount)"
      },
      "mintTo(address,uint256)": {
        "notice": "Mint the target amount of dEUROs, taking the equal amount of source coins from the sender."
      }
    },
    "notice": "A minting contract for another Euro stablecoin ('source stablecoin') that we trust.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/StablecoinBridge.sol:StablecoinBridge",
        "label": "minted",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
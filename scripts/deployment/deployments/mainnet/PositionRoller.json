{
  "address": "0x18fA3796a43c297950f76A1bA6162d58dD2d7EDa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "deuro_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Log",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pos",
          "type": "address"
        }
      ],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pos",
          "type": "address"
        }
      ],
      "name": "NotPosition",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collWithdraw",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collDeposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mint",
          "type": "uint256"
        }
      ],
      "name": "Roll",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPosition",
          "name": "pos",
          "type": "address"
        }
      ],
      "name": "findRepaymentAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPosition",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collWithdraw",
          "type": "uint256"
        },
        {
          "internalType": "contract IPosition",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "mint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "expiration",
          "type": "uint40"
        }
      ],
      "name": "roll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPosition",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "contract IPosition",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "rollFully",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPosition",
          "name": "source",
          "type": "address"
        },
        {
          "internalType": "contract IPosition",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint40",
          "name": "expiration",
          "type": "uint40"
        }
      ],
      "name": "rollFullyWithExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5009ff041dda4cf4473ae54821aa37e68e606d486c09e98e9cb3681fb07c75a0",
  "receipt": {
    "to": null,
    "from": "0x58b104da218e80DA6DA7E14C37A32851a26c8a6a",
    "contractAddress": "0x18fA3796a43c297950f76A1bA6162d58dD2d7EDa",
    "transactionIndex": 7,
    "gasUsed": "1074551",
    "logsBloom": "0x
    "blockHash": "0xb2e40392cf131fd2753ba5c5b9bf93a1bda5a159139db5ea00f15a351e87b76b",
    "transactionHash": "0x5009ff041dda4cf4473ae54821aa37e68e606d486c09e98e9cb3681fb07c75a0",
    "logs": [],
    "blockNumber": 21289175,
    "cumulativeGasUsed": "2097361",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd45e911843721083A2751fA9Cc9D2a8089D8C0f5"
  ],
  "numDeployments": 2,
  "solcInputHash": "03c47d03e6eff7df7c4a79a0658f45ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"deuro_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Log\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pos\",\"type\":\"address\"}],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pos\",\"type\":\"address\"}],\"name\":\"NotPosition\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collDeposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"}],\"name\":\"Roll\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IPosition\",\"name\":\"pos\",\"type\":\"address\"}],\"name\":\"findRepaymentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPosition\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"contract IPosition\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"}],\"name\":\"roll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPosition\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"contract IPosition\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"rollFully\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPosition\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"contract IPosition\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"expiration\",\"type\":\"uint40\"}],\"name\":\"rollFullyWithExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"roll(address,uint256,uint256,address,uint256,uint256,uint40)\":{\"params\":{\"collDeposit\":\"The amount of collateral to be send from msg.sender to the target position.\",\"collWithdraw\":\"Collateral to move from the source position to the msg.sender .\",\"expiration\":\"The desired expiration date for the target position.\",\"mint\":\"The amount to be minted from the target position using collateral from msg.sender.\",\"repay\":\"The amount to flash loan in order to repay the source position and free up some or all collateral.\",\"source\":\"The source position, must be owned by the msg.sender .\",\"target\":\"The target position. If not owned by msg.sender or if it does not have the desired expiration,               it is cloned to create a position owned by the msg.sender.\"}}},\"title\":\"PositionRoller Helper to roll over a debt from an old position to a new one. Both positions should have the same collateral. Otherwise, it does not make much sense.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"findRepaymentAmount(address)\":{\"notice\":\"Doing a binary search is not very efficient, but guaranteed to return a valid result without rounding errors. To save gas costs, the frontend can also call this and other methods to calculate the right parameters and then call 'roll' directly.\"},\"roll(address,uint256,uint256,address,uint256,uint256,uint40)\":{\"notice\":\"Rolls the source position into the target position using a flash loan. Both the source and the target position must recognize this roller. It is the responsibility of the caller to ensure that both positions are valid contracts.\"},\"rollFully(address,address)\":{\"notice\":\"Convenience method to roll and old position into a new one. Pre-condition is an allowance for the roller to spend the collateral assset on behalf of the caller, i.e. one should set collateral.approve(roller, collateral.balanceOf(sourcePosition)); The following is assumed: - If the limit of the target position permits, the user wants to roll everything - The user does not want to add additional collateral, but excess collateral is returned - If not enough can be minted in the new position, it is ok for the roller to use deuro from the msg.sender\"},\"rollFullyWithExpiration(address,address,uint40)\":{\"notice\":\"Like rollFully, but with a custom expiration date for the new position.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintingHubV2/PositionRoller.sol\":\"PositionRoller\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/MintingHubV2/PositionRoller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {IDecentralizedEURO} from \\\"../interface/IDecentralizedEURO.sol\\\";\\nimport {IReserve} from \\\"../interface/IReserve.sol\\\";\\n\\nimport {IPosition} from \\\"./interface/IPosition.sol\\\";\\n\\n/**\\n * @title PositionRoller\\n *\\n * Helper to roll over a debt from an old position to a new one.\\n * Both positions should have the same collateral. Otherwise, it does not make much sense.\\n */\\ncontract PositionRoller {\\n    IDecentralizedEURO private deuro;\\n\\n    error NotOwner(address pos);\\n    error NotPosition(address pos);\\n    error Log(uint256, uint256, uint256);\\n\\n    event Roll(address source, uint256 collWithdraw, uint256 repay, address target, uint256 collDeposit, uint256 mint);\\n\\n    constructor(address deuro_) {\\n        deuro = IDecentralizedEURO(deuro_);\\n    }\\n\\n    /**\\n     * Convenience method to roll and old position into a new one.\\n     *\\n     * Pre-condition is an allowance for the roller to spend the collateral assset on behalf of the caller,\\n     * i.e. one should set collateral.approve(roller, collateral.balanceOf(sourcePosition));\\n     *\\n     * The following is assumed:\\n     * - If the limit of the target position permits, the user wants to roll everything\\n     * - The user does not want to add additional collateral, but excess collateral is returned\\n     * - If not enough can be minted in the new position, it is ok for the roller to use deuro from the msg.sender\\n     */\\n    function rollFully(IPosition source, IPosition target) external {\\n        rollFullyWithExpiration(source, target, target.expiration());\\n    }\\n\\n    /**\\n     * Like rollFully, but with a custom expiration date for the new position.\\n     */\\n    function rollFullyWithExpiration(IPosition source, IPosition target, uint40 expiration) public {\\n        require(source.collateral() == target.collateral());\\n        uint256 repay = findRepaymentAmount(source);\\n        uint256 mintAmount = target.getMintAmount(repay);\\n        uint256 collateralToWithdraw = IERC20(source.collateral()).balanceOf(address(source));\\n        uint256 targetPrice = target.price();\\n        uint256 depositAmount = (mintAmount * 10 ** 18 + targetPrice - 1) / targetPrice; // round up\\n        if (depositAmount > collateralToWithdraw) {\\n            // If we need more collateral than available from the old position, we opt for taking\\n            // the missing funds from the caller instead of taking additional collateral from the caller\\n            depositAmount = collateralToWithdraw;\\n            mintAmount = (depositAmount * target.price()) / 10 ** 18; // round down, rest will be taken from caller\\n        }\\n        roll(source, repay, collateralToWithdraw, target, mintAmount, depositAmount, expiration);\\n    }\\n\\n    /**\\n     * Doing a binary search is not very efficient, but guaranteed to return a valid result without rounding errors.\\n     * To save gas costs, the frontend can also call this and other methods to calculate the right parameters and\\n     * then call 'roll' directly.\\n     */\\n    function findRepaymentAmount(IPosition pos) public view returns (uint256) {\\n        uint256 minted = pos.minted();\\n        uint24 reservePPM = pos.reserveContribution();\\n        if (minted == 0) {\\n            return 0;\\n        }\\n        uint256 higherResult = deuro.calculateFreedAmount(minted, reservePPM);\\n        if (higherResult == minted) {\\n            return minted;\\n        }\\n        return binarySearch(minted, reservePPM, 0, 0, minted, higherResult);\\n    }\\n\\n    // max call stack depth is 1024 in solidity. Binary search on 256 bit number takes at most 256 steps, so it should be fine.\\n    function binarySearch(\\n        uint256 target,\\n        uint24 reservePPM,\\n        uint256 lowerBound,\\n        uint256 lowerResult,\\n        uint256 higherBound,\\n        uint256 higherResult\\n    ) internal view returns (uint256) {\\n        uint256 middle = (lowerBound + higherBound) / 2;\\n        if (middle == lowerBound) {\\n            return higherBound; // we have reached max precision without exact match, return next higher result to be on the safe side\\n        } else {\\n            uint256 middleResult = deuro.calculateFreedAmount(middle, reservePPM);\\n            if (middleResult == target) {\\n                return middle;\\n            } else if (middleResult < target) {\\n                return binarySearch(target, reservePPM, middle, middleResult, higherBound, higherResult);\\n            } else {\\n                return binarySearch(target, reservePPM, lowerBound, lowerResult, middle, middleResult);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Rolls the source position into the target position using a flash loan.\\n     * Both the source and the target position must recognize this roller.\\n     * It is the responsibility of the caller to ensure that both positions are valid contracts.\\n     *\\n     * @param source The source position, must be owned by the msg.sender .\\n     * @param repay The amount to flash loan in order to repay the source position and free up some or all collateral.\\n     * @param collWithdraw Collateral to move from the source position to the msg.sender .\\n     * @param target The target position. If not owned by msg.sender or if it does not have the desired expiration,\\n     *               it is cloned to create a position owned by the msg.sender.\\n     * @param mint The amount to be minted from the target position using collateral from msg.sender.\\n     * @param collDeposit The amount of collateral to be send from msg.sender to the target position.\\n     * @param expiration The desired expiration date for the target position.\\n     */\\n    function roll(\\n        IPosition source,\\n        uint256 repay,\\n        uint256 collWithdraw,\\n        IPosition target,\\n        uint256 mint,\\n        uint256 collDeposit,\\n        uint40 expiration\\n    ) public valid(source) valid(target) own(source) {\\n        deuro.mint(address(this), repay); // take a flash loan\\n        source.repay(repay);\\n        source.withdrawCollateral(msg.sender, collWithdraw);\\n        if (mint > 0) {\\n            IERC20 targetCollateral = IERC20(target.collateral());\\n            if (Ownable(address(target)).owner() != msg.sender || expiration != target.expiration()) {\\n                targetCollateral.transferFrom(msg.sender, address(this), collDeposit); // get the new collateral\\n                targetCollateral.approve(target.hub(), collDeposit); // approve the new collateral and clone:\\n                target = IPosition(\\n                    IMintingHub(target.hub()).clone(msg.sender, address(target), collDeposit, mint, expiration)\\n                );\\n            } else {\\n                // We can roll into the provided existing position\\n                // We do not verify whether the target position has been created by the known minting hub in order\\n                // to allow positions to be rolled into future versions of the minting hub\\n                targetCollateral.transferFrom(msg.sender, address(target), collDeposit);\\n                target.mint(msg.sender, mint);\\n            }\\n        }\\n        deuro.burnFrom(msg.sender, repay); // repay the flash loan\\n        emit Roll(address(source), collWithdraw, repay, address(target), collDeposit, mint);\\n    }\\n\\n    modifier own(IPosition pos) {\\n        if (Ownable(address(pos)).owner() != msg.sender) revert NotOwner(address(pos));\\n        _;\\n    }\\n\\n    modifier valid(IPosition pos) {\\n        if (deuro.getPositionParent(address(pos)) == address(0x0)) revert NotPosition(address(pos));\\n        _;\\n    }\\n}\\n\\ninterface IMintingHub {\\n    function clone(\\n        address owner,\\n        address parent,\\n        uint256 _initialCollateral,\\n        uint256 _initialMint,\\n        uint40 expiration\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x8f646acc9e863892c2c2a62b7d0737b18b092adce6d00a0093e06191bb22a1d1\",\"license\":\"MIT\"},\"contracts/MintingHubV2/interface/IPosition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPosition {\\n    function hub() external view returns (address);\\n\\n    function collateral() external view returns (IERC20);\\n\\n    function minimumCollateral() external view returns (uint256);\\n\\n    function price() external view returns (uint256);\\n\\n    function minted() external view returns (uint256);\\n\\n    function challengedAmount() external view returns (uint256);\\n\\n    function original() external view returns (address);\\n\\n    function expiration() external view returns (uint40);\\n\\n    function cooldown() external view returns (uint40);\\n\\n    function limit() external view returns (uint256);\\n\\n    function challengePeriod() external view returns (uint40);\\n\\n    function start() external view returns (uint40);\\n\\n    function riskPremiumPPM() external view returns (uint24);\\n\\n    function reserveContribution() external view returns (uint24);\\n\\n    function initialize(address parent, uint40 _expiration) external;\\n\\n    function assertCloneable() external;\\n\\n    function notifyMint(uint256 mint_) external;\\n\\n    function notifyRepaid(uint256 repaid_) external;\\n\\n    function availableForClones() external view returns (uint256);\\n\\n    function availableForMinting() external view returns (uint256);\\n\\n    function deny(address[] calldata helpers, string calldata message) external;\\n\\n    function getUsableMint(uint256 totalMint, bool afterFees) external view returns (uint256);\\n\\n    function getMintAmount(uint256 usableMint) external view returns (uint256);\\n\\n    function adjust(uint256 newMinted, uint256 newCollateral, uint256 newPrice) external;\\n\\n    function adjustPrice(uint256 newPrice) external;\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function calculateCurrentFee() external view returns (uint24);\\n\\n    function annualInterestPPM() external view returns (uint24);\\n\\n    function calculateFee(uint256 exp) external view returns (uint24);\\n\\n    function repay(uint256 amount) external returns (uint256);\\n\\n    function forceSale(address buyer, uint256 collAmount, uint256 proceeds) external;\\n\\n    function withdraw(address token, address target, uint256 amount) external;\\n\\n    function withdrawCollateral(address target, uint256 amount) external;\\n\\n    function challengeData() external view returns (uint256 liqPrice, uint40 phase);\\n\\n    function notifyChallengeStarted(uint256 size) external;\\n\\n    function notifyChallengeAverted(uint256 size) external;\\n\\n    function notifyChallengeSucceeded(\\n        address _bidder,\\n        uint256 _size\\n    ) external returns (address, uint256, uint256, uint32);\\n}\\n\",\"keccak256\":\"0xa70e20bd25aed2aac8d4c1fcd91819492c57b20947f822f6fe212d8c2acb8ef7\",\"license\":\"MIT\"},\"contracts/interface/IDecentralizedEURO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IReserve} from \\\"./IReserve.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDecentralizedEURO is IERC20 {\\n    function suggestMinter(\\n        address _minter,\\n        uint256 _applicationPeriod,\\n        uint256 _applicationFee,\\n        string calldata _message\\n    ) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function minterReserve() external view returns (uint256);\\n\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\n\\n    function calculateFreedAmount(uint256 amountExcludingReserve, uint32 reservePPM) external view returns (uint256);\\n\\n    function equity() external view returns (uint256);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function getPositionParent(address position) external view returns (address);\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burnFrom(address target, uint256 amount) external;\\n\\n    function burnWithoutReserve(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnFromWithReserve(\\n        address payer,\\n        uint256 targetTotalBurnAmount,\\n        uint32 _reservePPM\\n    ) external returns (uint256);\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n    function coverLoss(address source, uint256 amount) external;\\n\\n    function collectProfits(address source, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x5a794e79a91424814795d9f3edd3db86e4d360f652a0250c04c279592417bb8e\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IReserve is IERC20 {\\n    function invest(uint256 amount, uint256 expected) external returns (uint256);\\n    function checkQualified(address sender, address[] calldata helpers) external view;\\n}\\n\",\"keccak256\":\"0x8d413b94c7860d6f8a9ba0168642db626830209824e4ad2d879d5f252490d2b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063566dfba8146100515780635e871b541461007657806389523c331461008b578063c2a1c5061461009e575b600080fd5b61006461005f366004610f91565b6100b1565b60405190815260200160405180910390f35b610089610084366004610fc8565b610233565b005b610089610099366004611013565b6105a5565b6100896100ac366004611085565b610e22565b600080826001600160a01b0316634f02c4206040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011691906110be565b90506000836001600160a01b0316633a7c29fb6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610158573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017c91906110d7565b905081600003610190575060009392505050565b60008054604051633824f22960e21b81526004810185905262ffffff841660248201526001600160a01b039091169063e093c8a490604401602060405180830381865afa1580156101e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020991906110be565b905082810361021b5750909392505050565b61022a83836000808786610e8d565b95945050505050565b816001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610271573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029591906110fc565b6001600160a01b0316836001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030091906110fc565b6001600160a01b03161461031357600080fd5b600061031e846100b1565b604051634ef17bcb60e11b8152600481018290529091506000906001600160a01b03851690639de2f79690602401602060405180830381865afa158015610369573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038d91906110be565b90506000856001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f391906110fc565b6040516370a0823160e01b81526001600160a01b03888116600483015291909116906370a0823190602401602060405180830381865afa15801561043b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045f91906110be565b90506000856001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c591906110be565b90506000816001816104df87670de0b6b3a764000061112f565b6104e9919061114c565b6104f3919061115f565b6104fd9190611172565b90508281111561058c57829050670de0b6b3a7640000876001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057591906110be565b61057f908361112f565b6105899190611172565b93505b61059b8886858a88868c6105a5565b5050505050505050565b6000805460405163aa5dd7f160e01b81526001600160a01b03808b1660048301528a9392169063aa5dd7f190602401602060405180830381865afa1580156105f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061591906110fc565b6001600160a01b03160361064c57604051631a71b9a760e01b81526001600160a01b03821660048201526024015b60405180910390fd5b6000805460405163aa5dd7f160e01b81526001600160a01b038089166004830152889392169063aa5dd7f190602401602060405180830381865afa158015610698573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bc91906110fc565b6001600160a01b0316036106ee57604051631a71b9a760e01b81526001600160a01b0382166004820152602401610643565b88336001600160a01b0316816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610737573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075b91906110fc565b6001600160a01b03161461078d5760405163245aecd360e01b81526001600160a01b0382166004820152602401610643565b6000546040516340c10f1960e01b8152306004820152602481018b90526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156107d957600080fd5b505af11580156107ed573d6000803e3d6000fd5b5050604051631b8fec7360e11b8152600481018c90526001600160a01b038d16925063371fd8e691506024016020604051808303816000875af1158015610838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085c91906110be565b5060405163350c35e960e01b8152336004820152602481018990526001600160a01b038b169063350c35e990604401600060405180830381600087803b1580156108a557600080fd5b505af11580156108b9573d6000803e3d6000fd5b505050506000861115610d52576000876001600160a01b031663d8dfeb456040518163ffffffff1660e01b8152600401602060405180830381865afa158015610906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092a91906110fc565b9050336001600160a01b0316886001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610974573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099891906110fc565b6001600160a01b0316141580610a1d5750876001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0b9190611194565b64ffffffffff168564ffffffffff1614155b15610c75576040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b038216906323b872dd906064016020604051808303816000875af1158015610a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9991906111b1565b50806001600160a01b031663095ea7b3896001600160a01b031663365a86fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0b91906110fc565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018990526044016020604051808303816000875af1158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c91906111b1565b50876001600160a01b031663365a86fc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bdf91906110fc565b604051634ec7f95360e11b81523360048201526001600160a01b038a8116602483015260448201899052606482018a905264ffffffffff881660848301529190911690639d8ff2a69060a4016020604051808303816000875af1158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e91906110fc565b9750610d50565b6040516323b872dd60e01b81523360048201526001600160a01b038981166024830152604482018890528216906323b872dd906064016020604051808303816000875af1158015610cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cee91906111b1565b506040516340c10f1960e01b8152336004820152602481018890526001600160a01b038916906340c10f1990604401600060405180830381600087803b158015610d3757600080fd5b505af1158015610d4b573d6000803e3d6000fd5b505050505b505b60005460405163079cc67960e41b8152336004820152602481018b90526001600160a01b03909116906379cc679090604401600060405180830381600087803b158015610d9e57600080fd5b505af1158015610db2573d6000803e3d6000fd5b5050604080516001600160a01b038e81168252602082018d90528183018e90528b1660608201526080810189905260a081018a905290517f8ba6e48d27ab46e18ba0971bb468a2e47a7fac577d846de107eb2fe948c2f59593509081900360c0019150a150505050505050505050565b610e898282836001600160a01b0316634665096d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e65573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100849190611194565b5050565b6000806002610e9c858861114c565b610ea69190611172565b9050858103610eb85783915050610f6f565b60008054604051633824f22960e21b81526004810184905262ffffff8a1660248201526001600160a01b039091169063e093c8a490604401602060405180830381865afa158015610f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3191906110be565b9050888103610f4257509050610f6f565b88811015610f6157610f58898984848989610e8d565b92505050610f6f565b610f58898989898686610e8d565b9695505050505050565b6001600160a01b0381168114610f8e57600080fd5b50565b600060208284031215610fa357600080fd5b8135610fae81610f79565b9392505050565b64ffffffffff81168114610f8e57600080fd5b600080600060608486031215610fdd57600080fd5b8335610fe881610f79565b92506020840135610ff881610f79565b9150604084013561100881610fb5565b809150509250925092565b600080600080600080600060e0888a03121561102e57600080fd5b873561103981610f79565b96506020880135955060408801359450606088013561105781610f79565b93506080880135925060a0880135915060c088013561107581610fb5565b8091505092959891949750929550565b6000806040838503121561109857600080fd5b82356110a381610f79565b915060208301356110b381610f79565b809150509250929050565b6000602082840312156110d057600080fd5b5051919050565b6000602082840312156110e957600080fd5b815162ffffff81168114610fae57600080fd5b60006020828403121561110e57600080fd5b8151610fae81610f79565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761114657611146611119565b92915050565b8082018082111561114657611146611119565b8181038181111561114657611146611119565b60008261118f57634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156111a657600080fd5b8151610fae81610fb5565b6000602082840312156111c357600080fd5b81518015158114610fae57600080fdfea26469706673582212209b260b2b5ef151b3e0ae4a358a2b2b25e8a3a87cf63e8107560dbf0538b431fc64736f6c634300081a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "roll(address,uint256,uint256,address,uint256,uint256,uint40)": {
        "params": {
          "collDeposit": "The amount of collateral to be send from msg.sender to the target position.",
          "collWithdraw": "Collateral to move from the source position to the msg.sender .",
          "expiration": "The desired expiration date for the target position.",
          "mint": "The amount to be minted from the target position using collateral from msg.sender.",
          "repay": "The amount to flash loan in order to repay the source position and free up some or all collateral.",
          "source": "The source position, must be owned by the msg.sender .",
          "target": "The target position. If not owned by msg.sender or if it does not have the desired expiration,               it is cloned to create a position owned by the msg.sender."
        }
      }
    },
    "title": "PositionRoller Helper to roll over a debt from an old position to a new one. Both positions should have the same collateral. Otherwise, it does not make much sense.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "findRepaymentAmount(address)": {
        "notice": "Doing a binary search is not very efficient, but guaranteed to return a valid result without rounding errors. To save gas costs, the frontend can also call this and other methods to calculate the right parameters and then call 'roll' directly."
      },
      "roll(address,uint256,uint256,address,uint256,uint256,uint40)": {
        "notice": "Rolls the source position into the target position using a flash loan. Both the source and the target position must recognize this roller. It is the responsibility of the caller to ensure that both positions are valid contracts."
      },
      "rollFully(address,address)": {
        "notice": "Convenience method to roll and old position into a new one. Pre-condition is an allowance for the roller to spend the collateral assset on behalf of the caller, i.e. one should set collateral.approve(roller, collateral.balanceOf(sourcePosition)); The following is assumed: - If the limit of the target position permits, the user wants to roll everything - The user does not want to add additional collateral, but excess collateral is returned - If not enough can be minted in the new position, it is ok for the roller to use deuro from the msg.sender"
      },
      "rollFullyWithExpiration(address,address,uint40)": {
        "notice": "Like rollFully, but with a custom expiration date for the new position."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11477,
        "contract": "contracts/MintingHubV2/PositionRoller.sol:PositionRoller",
        "label": "deuro",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IDecentralizedEURO)13260"
      }
    ],
    "types": {
      "t_contract(IDecentralizedEURO)13260": {
        "encoding": "inplace",
        "label": "contract IDecentralizedEURO",
        "numberOfBytes": "20"
      }
    }
  }
}
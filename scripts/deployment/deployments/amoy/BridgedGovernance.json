{
  "address": "0x7e8366A243f3C60FA1054e71F149e14c7D67fc9b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_mainnetChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_mainnetGovernanceAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "InvalidRouter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSourceChain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotQualified",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Delegation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "sourceChain",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalVotes",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "voter",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "votes",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "delegatee",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct SyncVote[]",
          "name": "syncedVotes",
          "type": "tuple[]"
        }
      ],
      "name": "MessageReceived",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAINNET_CHAIN_SELECTOR",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINNET_GOVERNANCE_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "messageId",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "sourceChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "sender",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Client.EVMTokenAmount[]",
              "name": "destTokenAmounts",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Client.Any2EVMMessage",
          "name": "message",
          "type": "tuple"
        }
      ],
      "name": "ccipReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "helpers",
          "type": "address[]"
        }
      ],
      "name": "checkQualified",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate_",
          "type": "address"
        }
      ],
      "name": "delegateVoteTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "helpers",
          "type": "address[]"
        }
      ],
      "name": "votesDelegated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf99d7d3d44081cdaf75dddac4fa96af82326f8b5cfccfc40df6682b965e64ac4",
  "receipt": {
    "to": null,
    "from": "0xD92fE8B91aB9eC967eC4208eac1d4EA625cDFF03",
    "contractAddress": "0x7e8366A243f3C60FA1054e71F149e14c7D67fc9b",
    "transactionIndex": 0,
    "gasUsed": "807259",
    "logsBloom": "0x
    "blockHash": "0xc93f4b81ed66ebc8702155dad8d3410f833de0298b3fee5df15a7c05cd125ce4",
    "transactionHash": "0xf99d7d3d44081cdaf75dddac4fa96af82326f8b5cfccfc40df6682b965e64ac4",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 20244395,
        "transactionHash": "0xf99d7d3d44081cdaf75dddac4fa96af82326f8b5cfccfc40df6682b965e64ac4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d92fe8b91ab9ec967ec4208eac1d4ea625cdff03",
          "0x000000000000000000000000915a2284d28bd93de7d6f31173b981204bb666e6"
        ],
        "data": "0x000000000000000000000000000000000000000000000000011ecbc740f3b3ab0000000000000000000000000000000000000000000000000a1afa617a18674d0000000000000000000000000000000000000000000007762304514dcc3f21f500000000000000000000000000000000000000000000000008fc2e9a3924b3a200000000000000000000000000000000000000000000077624231d150d32d5a0",
        "logIndex": 0,
        "blockHash": "0xc93f4b81ed66ebc8702155dad8d3410f833de0298b3fee5df15a7c05cd125ce4"
      }
    ],
    "blockNumber": 20244395,
    "cumulativeGasUsed": "807259",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9C32fCB86BF0f4a1A8921a9Fe46de3198bb884B2",
    "16015286601757825753",
    "0x08AdafD51205cEB550BB1b34769E89c8A609e6cA"
  ],
  "numDeployments": 1,
  "solcInputHash": "1ccacc52033d69991e02f71aa50e2b65",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_mainnetChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_mainnetGovernanceAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"InvalidRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSourceChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotQualified\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Delegation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"sourceChain\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalVotes\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct SyncVote[]\",\"name\":\"syncedVotes\",\"type\":\"tuple[]\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAINNET_CHAIN_SELECTOR\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINNET_GOVERNANCE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"sourceChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"sender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"destTokenAmounts\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Client.Any2EVMMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"ccipReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"helpers\",\"type\":\"address[]\"}],\"name\":\"checkQualified\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate_\",\"type\":\"address\"}],\"name\":\"delegateVoteTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"helpers\",\"type\":\"address[]\"}],\"name\":\"votesDelegated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"details\":\"Note ensure you check the msg.sender is the OffRampRouter\",\"params\":{\"message\":\"CCIP Message\"}},\"getRouter()\":{\"returns\":{\"_0\":\"CCIP router address\"}},\"supportsInterface(bytes4)\":{\"details\":\"Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\",\"params\":{\"interfaceId\":\"The interfaceId to check\"},\"returns\":{\"_0\":\"true if the interfaceId is supported\"}},\"votes(address)\":{\"params\":{\"holder\":\"The address to check.\"}},\"votesDelegated(address,address[])\":{\"params\":{\"helpers\":\"An incrementally sorted list of helpers without duplicates and without the sender.                  The call fails if the list contains an address that does not delegate to sender.                  For indirect delegates, i.e. a -> b -> c, both a and b must be included for both to count.\",\"sender\":\"The address whose total voting power is of interest\"},\"returns\":{\"_0\":\"The total number of votes of sender at the current point in time.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))\":{\"notice\":\"Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution.\"},\"checkQualified(address,address[])\":{\"notice\":\"Checks whether the sender address is qualified given a list of helpers that delegated their votes directly or indirectly to the sender. It is the responsiblity of the caller to figure out whether helpes are necessary and to identify them by scanning the blockchain for Delegation events.\"},\"delegateVoteTo(address)\":{\"notice\":\"Increases the voting power of the delegate by your number of votes without taking away any voting power from the sender.\"},\"delegates(address)\":{\"notice\":\"Keeping track on who delegated votes to whom. Note that delegation does not mean you cannot vote / veto any more, it just means that the delegate can benefit from your votes when invoking a veto. Circular delegations are valid, do not help when voting.\"},\"getRouter()\":{\"notice\":\"Return the current router\"},\"supportsInterface(bytes4)\":{\"notice\":\"IERC165 supports an interfaceId\"},\"totalSupply()\":{\"notice\":\"Required for frankencoin contract\"},\"totalVotes()\":{\"notice\":\"Get the total number of votes.\"},\"votes(address)\":{\"notice\":\"Get the number of votes held by a holder.\"},\"votesDelegated(address,address[])\":{\"notice\":\"The number of votes the sender commands when taking the support of the helpers into account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/equity/BridgedGovernance.sol\":\"BridgedGovernance\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_ccipRouter;\\n\\n  constructor(\\n    address router\\n  ) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_ccipRouter = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\\n  /// This allows CCIP to check if ccipReceive is available before calling it.\\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\\n  /// Additionally, if the receiver address does not have code associated with\\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(\\n    Client.Any2EVMMessage calldata message\\n  ) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(\\n    Client.Any2EVMMessage memory message\\n  ) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return CCIP router address\\n  function getRouter() public view virtual returns (address) {\\n    return address(i_ccipRouter);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != getRouter()) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xdfac759d9e7f181e17154daebb2478b76c28c57003b836a3ea06a6a1e6c65e29\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(\\n    Client.Any2EVMMessage calldata message\\n  ) external;\\n}\\n\",\"keccak256\":\"0x97bcf80c56b5ed4b30a351e3c3b6d5f28f053d4d601894a5067c4e697a00b74d\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV2)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(\\n    EVMExtraArgsV1 memory extraArgs\\n  ) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV2\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V2_TAG = 0x181dcf10;\\n\\n  /// @param gasLimit: gas limit for the callback on the destination chain.\\n  /// @param allowOutOfOrderExecution: if true, it indicates that the message can be executed in any order relative to other messages from the same sender.\\n  /// This value's default varies by chain. On some chains, a particular value is enforced, meaning if the expected value\\n  /// is not set, the message request will revert.\\n  struct EVMExtraArgsV2 {\\n    uint256 gasLimit;\\n    bool allowOutOfOrderExecution;\\n  }\\n\\n  function _argsToBytes(\\n    EVMExtraArgsV2 memory extraArgs\\n  ) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V2_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x052174af3c87abcbf5e7754f3d3aa9d0ff5054ecef0d9d01ef087c28a468bb0b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/equity/BridgedGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport {SyncVote, SyncMessage} from \\\"./IGovernance.sol\\\";\\nimport {Governance} from \\\"./Governance.sol\\\";\\n\\ncontract BridgedGovernance is CCIPReceiver, Governance {\\n    uint64 public immutable MAINNET_CHAIN_SELECTOR;\\n    address public immutable MAINNET_GOVERNANCE_ADDRESS;\\n\\n    mapping(address => uint256) private _votes;\\n    uint256 private _totalVotes;\\n\\n    event MessageReceived(bytes32 messageId, uint64 sourceChain, uint256 totalVotes, SyncVote[] syncedVotes);\\n\\n    error InvalidSourceChain();\\n    error InvalidSender();\\n\\n    constructor(address _router, uint64 _mainnetChainSelector, address _mainnetGovernanceAddress) CCIPReceiver(_router) {\\n        MAINNET_CHAIN_SELECTOR = _mainnetChainSelector;\\n        MAINNET_GOVERNANCE_ADDRESS = _mainnetGovernanceAddress;\\n    }\\n\\n    /**\\n     * @notice Get the number of votes held by a holder.\\n     * @param holder The address to check.\\n     */\\n    function votes(address holder) public view override returns (uint256) {\\n        return _votes[holder];\\n    }\\n\\n    /**\\n     * @notice Get the total number of votes.\\n     */\\n    function totalVotes() public view override returns (uint256) {\\n        return _totalVotes;\\n    }\\n\\n    /**\\n     * @notice Required for frankencoin contract\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return totalVotes();\\n    }\\n\\n    /**\\n     * @notice Process a received message.\\n     * @param any2EvmMessage The message to process.\\n     */\\n    function _ccipReceive(Client.Any2EVMMessage memory any2EvmMessage) internal override {\\n        if (any2EvmMessage.sourceChainSelector != MAINNET_CHAIN_SELECTOR) revert InvalidSourceChain();\\n        if (abi.decode(any2EvmMessage.sender, (address)) != MAINNET_GOVERNANCE_ADDRESS) revert InvalidSender();\\n\\n        SyncMessage memory syncMessage = abi.decode(any2EvmMessage.data, (SyncMessage)); // abi-decoding of the sent text\\n\\n        _processSyncMessage(syncMessage);\\n\\n        emit MessageReceived({messageId: any2EvmMessage.messageId, sourceChain: any2EvmMessage.sourceChainSelector, totalVotes: syncMessage.totalVotes, syncedVotes: syncMessage.votes});\\n    }\\n\\n    /**\\n     * @notice Updates internal state with received message\\n     * @param syncMessage The message to process.\\n     */\\n    function _processSyncMessage(SyncMessage memory syncMessage) internal {\\n        _totalVotes = syncMessage.totalVotes;\\n\\n        // omitted unchecked optimization for readability\\n        for (uint64 i = 0; i < syncMessage.votes.length; i++) {\\n            SyncVote memory syncVote = syncMessage.votes[i];\\n            _votes[syncVote.voter] = syncVote.votes;\\n            delegate(syncVote.voter, syncVote.delegatee);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ead25393117573986ad7c3e003c3fa192557c1eb4833313f1bf19f59faec229\",\"license\":\"MIT\"},\"contracts/equity/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IGovernance.sol\\\";\\n\\nabstract contract Governance is IGovernance {\\n\\n    /**\\n     * @notice The quorum in basis points. 100 is 1%.\\n     */\\n    uint32 private constant QUORUM = 200;\\n\\n    /**\\n     * @notice Keeping track on who delegated votes to whom.\\n     * Note that delegation does not mean you cannot vote / veto any more, it just means that the delegate can\\n     * benefit from your votes when invoking a veto. Circular delegations are valid, do not help when voting.\\n     */\\n    mapping(address owner => address delegate) public delegates;\\n\\n    event Delegation(address indexed from, address indexed to); // indicates a delegation\\n\\n    /**\\n     * @notice The votes of the holder, excluding votes from delegates.\\n     */\\n    function votes(address holder) virtual public view returns (uint256);\\n\\n    /**\\n     * @notice Total number of votes in the system.\\n     */\\n    function totalVotes() virtual public view returns (uint256);\\n\\n    /**\\n     * @notice The number of votes the sender commands when taking the support of the helpers into account.\\n     * @param sender    The address whose total voting power is of interest\\n     * @param helpers   An incrementally sorted list of helpers without duplicates and without the sender.\\n     *                  The call fails if the list contains an address that does not delegate to sender.\\n     *                  For indirect delegates, i.e. a -> b -> c, both a and b must be included for both to count.\\n     * @return          The total number of votes of sender at the current point in time.\\n     */\\n    function votesDelegated(address sender, address[] calldata helpers) public view returns (uint256) {\\n        uint256 _votes = votes(sender);\\n        require(_checkDuplicatesAndSorted(helpers));\\n        for (uint i = 0; i < helpers.length; i++) {\\n            address current = helpers[i];\\n            require(current != sender);\\n            require(_canVoteFor(sender, current));\\n            _votes += votes(current);\\n        }\\n        return _votes;\\n    }\\n\\n    function _checkDuplicatesAndSorted(address[] calldata helpers) internal pure returns (bool ok) {\\n        if (helpers.length <= 1) {\\n            return true;\\n        } else {\\n            address prevAddress = helpers[0];\\n            for (uint i = 1; i < helpers.length; i++) {\\n                if (helpers[i] <= prevAddress) {\\n                    return false;\\n                }\\n                prevAddress = helpers[i];\\n            }\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether the sender address is qualified given a list of helpers that delegated their votes\\n     * directly or indirectly to the sender. It is the responsiblity of the caller to figure out whether\\n     * helpes are necessary and to identify them by scanning the blockchain for Delegation events.\\n     */\\n    function checkQualified(address sender, address[] calldata helpers) public view override {\\n        uint256 _votes = votesDelegated(sender, helpers);\\n        if (_votes * 10000 < QUORUM * totalVotes()) revert NotQualified();\\n    }\\n\\n    error NotQualified();\\n\\n    /**\\n     * @notice Increases the voting power of the delegate by your number of votes without taking away any voting power\\n     * from the sender.\\n     */\\n    function delegateVoteTo(address delegate_) external {\\n        delegate(msg.sender, delegate_);\\n    }\\n\\n    function delegate(address owner, address delegate_) internal {\\n        delegates[owner] = delegate_;\\n        emit Delegation(owner, delegate_);\\n    }\\n\\n    function _canVoteFor(address delegate_, address owner) internal view returns (bool) {\\n        if (owner == delegate_) {\\n            return true;\\n        } else if (owner == address(0x0)) {\\n            return false;\\n        } else {\\n            return _canVoteFor(delegate_, delegates[owner]);\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x9f9fc9d18f8a6b6347ccd1990f704c36f6e6d98a40d2ab944e7f8a4639041045\",\"license\":\"MIT\"},\"contracts/equity/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGovernance {\\n   function checkQualified(address sender, address[] calldata helpers) external view;\\n}\\n\\nstruct SyncVote {\\n    address voter;\\n    uint256 votes;\\n    address delegatee;\\n}\\n\\nstruct SyncMessage {\\n    SyncVote[] votes;\\n    uint256 totalVotes;\\n}\\n\",\"keccak256\":\"0xd6329ac67953e19cee718b79f14ff527f49984d8a01141b496ee68c91b0a4274\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051610ec9380380610ec983398101604081905261002f916100a0565b826001600160a01b03811661005e576040516335fdcccd60e21b81526000600482015260240160405180910390fd5b6001600160a01b039081166080526001600160401b0390921660a0521660c052506100f2565b80516001600160a01b038116811461009b57600080fd5b919050565b6000806000606084860312156100b557600080fd5b6100be84610084565b60208501519093506001600160401b03811681146100db57600080fd5b91506100e960408501610084565b90509250925092565b60805160a05160c051610d9361013660003960008181610100015261059e0152600081816101dc01526105480152600081816101b301526103af0152610d936000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80635895b773116100715780635895b7731461017857806385572ffb1461018b5780639823004f1461019e578063b0f479a1146101b1578063c038e298146101d7578063d8bff5a51461021657600080fd5b806301ffc9a7146100b95780630d15fd77146100e157806318160ddd146100f3578063269d34d4146100fb578063352e3a831461013a578063587cde1e1461014f575b600080fd5b6100cc6100c7366004610767565b61023f565b60405190151581526020015b60405180910390f35b6002545b6040519081526020016100d8565b6100e5610276565b6101227f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d8565b61014d6101483660046107ad565b610286565b005b61012261015d366004610834565b6000602081905290815260409020546001600160a01b031681565b6100e56101863660046107ad565b6102da565b61014d610199366004610851565b6103a4565b61014d6101ac366004610834565b610407565b7f0000000000000000000000000000000000000000000000000000000000000000610122565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160401b0390911681526020016100d8565b6100e5610224366004610834565b6001600160a01b031660009081526001602052604090205490565b60006001600160e01b031982166385572ffb60e01b148061027057506001600160e01b031982166301ffc9a760e01b145b92915050565b600061028160025490565b905090565b60006102938484846102da565b905061029e60025490565b6102a99060c86108a1565b6102b5826127106108a1565b10156102d45760405163bcfcdc1160e01b815260040160405180910390fd5b50505050565b6001600160a01b0383166000908152600160205260408120546102fd8484610411565b61030657600080fd5b60005b8381101561039b576000858583818110610325576103256108b8565b905060200201602081019061033a9190610834565b9050866001600160a01b0316816001600160a01b03160361035a57600080fd5b61036487826104e0565b61036d57600080fd5b6001600160a01b03811660009081526001602052604090205461039090846108ce565b925050600101610309565b50949350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103f3576040516335fdcccd60e21b815233600482015260240160405180910390fd5b6104046103ff82610ad9565b610546565b50565b610404338261067b565b60006001821161042357506001610270565b600083836000818110610438576104386108b8565b905060200201602081019061044d9190610834565b905060015b838110156104d557816001600160a01b0316858583818110610476576104766108b8565b905060200201602081019061048b9190610834565b6001600160a01b0316116104a457600092505050610270565b8484828181106104b6576104b66108b8565b90506020020160208101906104cb9190610834565b9150600101610452565b506001949350505050565b6000826001600160a01b0316826001600160a01b03160361050357506001610270565b6001600160a01b03821661051957506000610270565b6001600160a01b0380831660009081526020819052604090205461053f918591166104e0565b9050610270565b7f00000000000000000000000000000000000000000000000000000000000000006001600160401b031681602001516001600160401b03161461059c57604051639284b19760e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681604001518060200190518101906105de9190610b85565b6001600160a01b03161461060557604051636edaef2f60e11b815260040160405180910390fd5b6000816060015180602001905181019061061f9190610ba2565b905061062a816106d2565b7f7010cc6740340d7ccc25dd76569674c2b8945d3f87633d1cee16cd6176d13120826000015183602001518360200151846000015160405161066f9493929190610cac565b60405180910390a15050565b6001600160a01b0382811660008181526020819052604080822080546001600160a01b0319169486169485179055517fd000f39f92c3ed77f890f16b6ced1555e0ab2cdf470522d2210de67d8c83d45b9190a35050565b602081015160025560005b8151516001600160401b03821610156107635760008260000151826001600160401b031681518110610711576107116108b8565b6020908102919091018101518082015181516001600160a01b03166000908152600190935260409283902055805191810151909250610750919061067b565b508061075b81610d37565b9150506106dd565b5050565b60006020828403121561077957600080fd5b81356001600160e01b03198116811461079157600080fd5b9392505050565b6001600160a01b038116811461040457600080fd5b6000806000604084860312156107c257600080fd5b83356107cd81610798565b925060208401356001600160401b03808211156107e957600080fd5b818601915086601f8301126107fd57600080fd5b81358181111561080c57600080fd5b8760208260051b850101111561082157600080fd5b6020830194508093505050509250925092565b60006020828403121561084657600080fd5b813561079181610798565b60006020828403121561086357600080fd5b81356001600160401b0381111561087957600080fd5b820160a0818503121561079157600080fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176102705761027061088b565b634e487b7160e01b600052603260045260246000fd5b808201808211156102705761027061088b565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715610919576109196108e1565b60405290565b60405160a081016001600160401b0381118282101715610919576109196108e1565b604051606081016001600160401b0381118282101715610919576109196108e1565b604051601f8201601f191681016001600160401b038111828210171561098b5761098b6108e1565b604052919050565b80356001600160401b03811681146109aa57600080fd5b919050565b600082601f8301126109c057600080fd5b81356001600160401b038111156109d9576109d96108e1565b6109ec601f8201601f1916602001610963565b818152846020838601011115610a0157600080fd5b816020850160208301376000918101602001919091529392505050565b60006001600160401b03821115610a3757610a376108e1565b5060051b60200190565b600082601f830112610a5257600080fd5b81356020610a67610a6283610a1e565b610963565b82815260069290921b84018101918181019086841115610a8657600080fd5b8286015b84811015610ace5760408189031215610aa35760008081fd5b610aab6108f7565b8135610ab681610798565b81528185013585820152835291830191604001610a8a565b509695505050505050565b600060a08236031215610aeb57600080fd5b610af361091f565b82358152610b0360208401610993565b602082015260408301356001600160401b0380821115610b2257600080fd5b610b2e368387016109af565b60408401526060850135915080821115610b4757600080fd5b610b53368387016109af565b60608401526080850135915080821115610b6c57600080fd5b50610b7936828601610a41565b60808301525092915050565b600060208284031215610b9757600080fd5b815161079181610798565b60006020808385031215610bb557600080fd5b82516001600160401b0380821115610bcc57600080fd5b81850191506040808388031215610be257600080fd5b610bea6108f7565b835183811115610bf957600080fd5b84019250601f83018813610c0c57600080fd5b8251610c1a610a6282610a1e565b8181526060918202850187019187820191908b841115610c3957600080fd5b958801955b83871015610c935780878d031215610c565760008081fd5b610c5e610941565b8751610c6981610798565b8152878a01518a82015286880151610c8081610798565b8188015283529586019591880191610c3e565b5083525050928401519383019390935250949350505050565b60006080820186835260206001600160401b0387166020850152604086604086015260606080606087015283875180865260a08801915060208901955060005b81811015610d2657865180516001600160a01b03908116855287820151888601529086015116858401529585019591830191600101610cec565b50909b9a5050505050505050505050565b60006001600160401b03808316818103610d5357610d5361088b565b600101939250505056fea26469706673582212201f46daca94de57cb40e750903403ea8e98253c6927a7195f1b17658a70abec8364736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80635895b773116100715780635895b7731461017857806385572ffb1461018b5780639823004f1461019e578063b0f479a1146101b1578063c038e298146101d7578063d8bff5a51461021657600080fd5b806301ffc9a7146100b95780630d15fd77146100e157806318160ddd146100f3578063269d34d4146100fb578063352e3a831461013a578063587cde1e1461014f575b600080fd5b6100cc6100c7366004610767565b61023f565b60405190151581526020015b60405180910390f35b6002545b6040519081526020016100d8565b6100e5610276565b6101227f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100d8565b61014d6101483660046107ad565b610286565b005b61012261015d366004610834565b6000602081905290815260409020546001600160a01b031681565b6100e56101863660046107ad565b6102da565b61014d610199366004610851565b6103a4565b61014d6101ac366004610834565b610407565b7f0000000000000000000000000000000000000000000000000000000000000000610122565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160401b0390911681526020016100d8565b6100e5610224366004610834565b6001600160a01b031660009081526001602052604090205490565b60006001600160e01b031982166385572ffb60e01b148061027057506001600160e01b031982166301ffc9a760e01b145b92915050565b600061028160025490565b905090565b60006102938484846102da565b905061029e60025490565b6102a99060c86108a1565b6102b5826127106108a1565b10156102d45760405163bcfcdc1160e01b815260040160405180910390fd5b50505050565b6001600160a01b0383166000908152600160205260408120546102fd8484610411565b61030657600080fd5b60005b8381101561039b576000858583818110610325576103256108b8565b905060200201602081019061033a9190610834565b9050866001600160a01b0316816001600160a01b03160361035a57600080fd5b61036487826104e0565b61036d57600080fd5b6001600160a01b03811660009081526001602052604090205461039090846108ce565b925050600101610309565b50949350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103f3576040516335fdcccd60e21b815233600482015260240160405180910390fd5b6104046103ff82610ad9565b610546565b50565b610404338261067b565b60006001821161042357506001610270565b600083836000818110610438576104386108b8565b905060200201602081019061044d9190610834565b905060015b838110156104d557816001600160a01b0316858583818110610476576104766108b8565b905060200201602081019061048b9190610834565b6001600160a01b0316116104a457600092505050610270565b8484828181106104b6576104b66108b8565b90506020020160208101906104cb9190610834565b9150600101610452565b506001949350505050565b6000826001600160a01b0316826001600160a01b03160361050357506001610270565b6001600160a01b03821661051957506000610270565b6001600160a01b0380831660009081526020819052604090205461053f918591166104e0565b9050610270565b7f00000000000000000000000000000000000000000000000000000000000000006001600160401b031681602001516001600160401b03161461059c57604051639284b19760e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681604001518060200190518101906105de9190610b85565b6001600160a01b03161461060557604051636edaef2f60e11b815260040160405180910390fd5b6000816060015180602001905181019061061f9190610ba2565b905061062a816106d2565b7f7010cc6740340d7ccc25dd76569674c2b8945d3f87633d1cee16cd6176d13120826000015183602001518360200151846000015160405161066f9493929190610cac565b60405180910390a15050565b6001600160a01b0382811660008181526020819052604080822080546001600160a01b0319169486169485179055517fd000f39f92c3ed77f890f16b6ced1555e0ab2cdf470522d2210de67d8c83d45b9190a35050565b602081015160025560005b8151516001600160401b03821610156107635760008260000151826001600160401b031681518110610711576107116108b8565b6020908102919091018101518082015181516001600160a01b03166000908152600190935260409283902055805191810151909250610750919061067b565b508061075b81610d37565b9150506106dd565b5050565b60006020828403121561077957600080fd5b81356001600160e01b03198116811461079157600080fd5b9392505050565b6001600160a01b038116811461040457600080fd5b6000806000604084860312156107c257600080fd5b83356107cd81610798565b925060208401356001600160401b03808211156107e957600080fd5b818601915086601f8301126107fd57600080fd5b81358181111561080c57600080fd5b8760208260051b850101111561082157600080fd5b6020830194508093505050509250925092565b60006020828403121561084657600080fd5b813561079181610798565b60006020828403121561086357600080fd5b81356001600160401b0381111561087957600080fd5b820160a0818503121561079157600080fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176102705761027061088b565b634e487b7160e01b600052603260045260246000fd5b808201808211156102705761027061088b565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715610919576109196108e1565b60405290565b60405160a081016001600160401b0381118282101715610919576109196108e1565b604051606081016001600160401b0381118282101715610919576109196108e1565b604051601f8201601f191681016001600160401b038111828210171561098b5761098b6108e1565b604052919050565b80356001600160401b03811681146109aa57600080fd5b919050565b600082601f8301126109c057600080fd5b81356001600160401b038111156109d9576109d96108e1565b6109ec601f8201601f1916602001610963565b818152846020838601011115610a0157600080fd5b816020850160208301376000918101602001919091529392505050565b60006001600160401b03821115610a3757610a376108e1565b5060051b60200190565b600082601f830112610a5257600080fd5b81356020610a67610a6283610a1e565b610963565b82815260069290921b84018101918181019086841115610a8657600080fd5b8286015b84811015610ace5760408189031215610aa35760008081fd5b610aab6108f7565b8135610ab681610798565b81528185013585820152835291830191604001610a8a565b509695505050505050565b600060a08236031215610aeb57600080fd5b610af361091f565b82358152610b0360208401610993565b602082015260408301356001600160401b0380821115610b2257600080fd5b610b2e368387016109af565b60408401526060850135915080821115610b4757600080fd5b610b53368387016109af565b60608401526080850135915080821115610b6c57600080fd5b50610b7936828601610a41565b60808301525092915050565b600060208284031215610b9757600080fd5b815161079181610798565b60006020808385031215610bb557600080fd5b82516001600160401b0380821115610bcc57600080fd5b81850191506040808388031215610be257600080fd5b610bea6108f7565b835183811115610bf957600080fd5b84019250601f83018813610c0c57600080fd5b8251610c1a610a6282610a1e565b8181526060918202850187019187820191908b841115610c3957600080fd5b958801955b83871015610c935780878d031215610c565760008081fd5b610c5e610941565b8751610c6981610798565b8152878a01518a82015286880151610c8081610798565b8188015283529586019591880191610c3e565b5083525050928401519383019390935250949350505050565b60006080820186835260206001600160401b0387166020850152604086604086015260606080606087015283875180865260a08801915060208901955060005b81811015610d2657865180516001600160a01b03908116855287820151888601529086015116858401529585019591830191600101610cec565b50909b9a5050505050505050505050565b60006001600160401b03808316818103610d5357610d5361088b565b600101939250505056fea26469706673582212201f46daca94de57cb40e750903403ea8e98253c6927a7195f1b17658a70abec8364736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "details": "Note ensure you check the msg.sender is the OffRampRouter",
        "params": {
          "message": "CCIP Message"
        }
      },
      "getRouter()": {
        "returns": {
          "_0": "CCIP router address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Should indicate whether the contract implements IAny2EVMMessageReceiver e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId This allows CCIP to check if ccipReceive is available before calling it. If this returns false or reverts, only tokens are transferred to the receiver. If this returns true, tokens are transferred and ccipReceive is called atomically. Additionally, if the receiver address does not have code associated with it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.",
        "params": {
          "interfaceId": "The interfaceId to check"
        },
        "returns": {
          "_0": "true if the interfaceId is supported"
        }
      },
      "votes(address)": {
        "params": {
          "holder": "The address to check."
        }
      },
      "votesDelegated(address,address[])": {
        "params": {
          "helpers": "An incrementally sorted list of helpers without duplicates and without the sender.                  The call fails if the list contains an address that does not delegate to sender.                  For indirect delegates, i.e. a -> b -> c, both a and b must be included for both to count.",
          "sender": "The address whose total voting power is of interest"
        },
        "returns": {
          "_0": "The total number of votes of sender at the current point in time."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ccipReceive((bytes32,uint64,bytes,bytes,(address,uint256)[]))": {
        "notice": "Called by the Router to deliver a message. If this reverts, any token transfers also revert. The message will move to a FAILED state and become available for manual execution."
      },
      "checkQualified(address,address[])": {
        "notice": "Checks whether the sender address is qualified given a list of helpers that delegated their votes directly or indirectly to the sender. It is the responsiblity of the caller to figure out whether helpes are necessary and to identify them by scanning the blockchain for Delegation events."
      },
      "delegateVoteTo(address)": {
        "notice": "Increases the voting power of the delegate by your number of votes without taking away any voting power from the sender."
      },
      "delegates(address)": {
        "notice": "Keeping track on who delegated votes to whom. Note that delegation does not mean you cannot vote / veto any more, it just means that the delegate can benefit from your votes when invoking a veto. Circular delegations are valid, do not help when voting."
      },
      "getRouter()": {
        "notice": "Return the current router"
      },
      "supportsInterface(bytes4)": {
        "notice": "IERC165 supports an interfaceId"
      },
      "totalSupply()": {
        "notice": "Required for frankencoin contract"
      },
      "totalVotes()": {
        "notice": "Get the total number of votes."
      },
      "votes(address)": {
        "notice": "Get the number of votes held by a holder."
      },
      "votesDelegated(address,address[])": {
        "notice": "The number of votes the sender commands when taking the support of the helpers into account."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12693,
        "contract": "contracts/equity/BridgedGovernance.sol:BridgedGovernance",
        "label": "delegates",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11400,
        "contract": "contracts/equity/BridgedGovernance.sol:BridgedGovernance",
        "label": "_votes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11402,
        "contract": "contracts/equity/BridgedGovernance.sol:BridgedGovernance",
        "label": "_totalVotes",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
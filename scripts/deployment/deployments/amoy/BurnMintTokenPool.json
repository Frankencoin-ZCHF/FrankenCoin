{
  "address": "0x59dB29840a092F43Df2D74514e5419Af2D4F4C8d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBurnMintERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "localTokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "allowlist",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "rmnProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        }
      ],
      "name": "AggregateValueMaxCapacityExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minWaitInSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "name": "AggregateValueRateLimitReached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AllowListNotEnabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BucketOverfilled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerIsNotARampOnRouter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotTransferToSelf",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainSelector",
          "type": "uint64"
        }
      ],
      "name": "ChainAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        }
      ],
      "name": "ChainNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CursedByRMN",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "capacity",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            }
          ],
          "internalType": "struct RateLimiter.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "DisabledNonZeroRateLimit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "expected",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "actual",
          "type": "uint8"
        }
      ],
      "name": "InvalidDecimalArgs",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "capacity",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            }
          ],
          "internalType": "struct RateLimiter.Config",
          "name": "rateLimiterConfig",
          "type": "tuple"
        }
      ],
      "name": "InvalidRateLimitRate",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sourcePoolData",
          "type": "bytes"
        }
      ],
      "name": "InvalidRemoteChainDecimals",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "remotePoolAddress",
          "type": "bytes"
        }
      ],
      "name": "InvalidRemotePoolForChain",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "sourcePoolAddress",
          "type": "bytes"
        }
      ],
      "name": "InvalidSourcePoolAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedArrayLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MustBeProposedOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        }
      ],
      "name": "NonExistentChain",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyCallableByOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "remoteDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "localDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "remoteAmount",
          "type": "uint256"
        }
      ],
      "name": "OverflowDetected",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnerCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "remotePoolAddress",
          "type": "bytes"
        }
      ],
      "name": "PoolAlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RateLimitMustBeDisabled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SenderNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenMaxCapacityExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minWaitInSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "TokenRateLimitReached",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "AllowListAdd",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "AllowListRemove",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Burned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "remoteToken",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "capacity",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct RateLimiter.Config",
          "name": "outboundRateLimiterConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "capacity",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct RateLimiter.Config",
          "name": "inboundRateLimiterConfig",
          "type": "tuple"
        }
      ],
      "name": "ChainAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "capacity",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct RateLimiter.Config",
          "name": "outboundRateLimiterConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "capacity",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct RateLimiter.Config",
          "name": "inboundRateLimiterConfig",
          "type": "tuple"
        }
      ],
      "name": "ChainConfigured",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        }
      ],
      "name": "ChainRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "capacity",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            }
          ],
          "indexed": false,
          "internalType": "struct RateLimiter.Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "ConfigChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rateLimitAdmin",
          "type": "address"
        }
      ],
      "name": "RateLimitAdminSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "remotePoolAddress",
          "type": "bytes"
        }
      ],
      "name": "RemotePoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "remotePoolAddress",
          "type": "bytes"
        }
      ],
      "name": "RemotePoolRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "RouterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "TokensConsumed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "remotePoolAddress",
          "type": "bytes"
        }
      ],
      "name": "addRemotePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "removes",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "adds",
          "type": "address[]"
        }
      ],
      "name": "applyAllowListUpdates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "remoteChainSelectorsToRemove",
          "type": "uint64[]"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "remoteChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "bytes[]",
              "name": "remotePoolAddresses",
              "type": "bytes[]"
            },
            {
              "internalType": "bytes",
              "name": "remoteTokenAddress",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isEnabled",
                  "type": "bool"
                },
                {
                  "internalType": "uint128",
                  "name": "capacity",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "rate",
                  "type": "uint128"
                }
              ],
              "internalType": "struct RateLimiter.Config",
              "name": "outboundRateLimiterConfig",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isEnabled",
                  "type": "bool"
                },
                {
                  "internalType": "uint128",
                  "name": "capacity",
                  "type": "uint128"
                },
                {
                  "internalType": "uint128",
                  "name": "rate",
                  "type": "uint128"
                }
              ],
              "internalType": "struct RateLimiter.Config",
              "name": "inboundRateLimiterConfig",
              "type": "tuple"
            }
          ],
          "internalType": "struct TokenPool.ChainUpdate[]",
          "name": "chainsToAdd",
          "type": "tuple[]"
        }
      ],
      "name": "applyChainUpdates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllowListEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        }
      ],
      "name": "getCurrentInboundRateLimiterState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "tokens",
              "type": "uint128"
            },
            {
              "internalType": "uint32",
              "name": "lastUpdated",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "capacity",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            }
          ],
          "internalType": "struct RateLimiter.TokenBucket",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        }
      ],
      "name": "getCurrentOutboundRateLimiterState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "tokens",
              "type": "uint128"
            },
            {
              "internalType": "uint32",
              "name": "lastUpdated",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "capacity",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            }
          ],
          "internalType": "struct RateLimiter.TokenBucket",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRateLimitAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        }
      ],
      "name": "getRemotePools",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        }
      ],
      "name": "getRemoteToken",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRmnProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "rmnProxy",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedChains",
      "outputs": [
        {
          "internalType": "uint64[]",
          "name": "",
          "type": "uint64[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "remotePoolAddress",
          "type": "bytes"
        }
      ],
      "name": "isRemotePool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        }
      ],
      "name": "isSupportedChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isSupportedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "receiver",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "remoteChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "originalSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "localToken",
              "type": "address"
            }
          ],
          "internalType": "struct Pool.LockOrBurnInV1",
          "name": "lockOrBurnIn",
          "type": "tuple"
        }
      ],
      "name": "lockOrBurn",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "destTokenAddress",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "destPoolData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Pool.LockOrBurnOutV1",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "originalSender",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "remoteChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "localToken",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "sourcePoolAddress",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "sourcePoolData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "offchainTokenData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Pool.ReleaseOrMintInV1",
          "name": "releaseOrMintIn",
          "type": "tuple"
        }
      ],
      "name": "releaseOrMint",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "destinationAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct Pool.ReleaseOrMintOutV1",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "remotePoolAddress",
          "type": "bytes"
        }
      ],
      "name": "removeRemotePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "remoteChainSelector",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "capacity",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            }
          ],
          "internalType": "struct RateLimiter.Config",
          "name": "outboundConfig",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "capacity",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            }
          ],
          "internalType": "struct RateLimiter.Config",
          "name": "inboundConfig",
          "type": "tuple"
        }
      ],
      "name": "setChainRateLimiterConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64[]",
          "name": "remoteChainSelectors",
          "type": "uint64[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "capacity",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            }
          ],
          "internalType": "struct RateLimiter.Config[]",
          "name": "outboundConfigs",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isEnabled",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "capacity",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "rate",
              "type": "uint128"
            }
          ],
          "internalType": "struct RateLimiter.Config[]",
          "name": "inboundConfigs",
          "type": "tuple[]"
        }
      ],
      "name": "setChainRateLimiterConfigs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rateLimitAdmin",
          "type": "address"
        }
      ],
      "name": "setRateLimitAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRouter",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "typeAndVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf476babb36bcad378985cd1f14f808a2fc5b5dd9c8c87e076b2df7b2800add0c",
  "receipt": {
    "to": null,
    "from": "0xD92fE8B91aB9eC967eC4208eac1d4EA625cDFF03",
    "contractAddress": "0x59dB29840a092F43Df2D74514e5419Af2D4F4C8d",
    "transactionIndex": 1,
    "gasUsed": "3099464",
    "logsBloom": "0x00000000000000000010000000000000000000000000040000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000004000000000000000000200000000000000000000000000000100000000000000000000000000000004000000000000000000001000000000000000002000000000000100000000000000000000000000000000000000000000000000000400000000000000000100000",
    "blockHash": "0x0f1ebd967c59103a1a3233437461378af4c2b89a32cd287edd21883c99894094",
    "transactionHash": "0xf476babb36bcad378985cd1f14f808a2fc5b5dd9c8c87e076b2df7b2800add0c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 20599080,
        "transactionHash": "0xf476babb36bcad378985cd1f14f808a2fc5b5dd9c8c87e076b2df7b2800add0c",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000d92fe8b91ab9ec967ec4208eac1d4ea625cdff03",
          "0x000000000000000000000000915a2284d28bd93de7d6f31173b981204bb666e6"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003010b31d2eaeb800000000000000000000000000000000000000000000000000d09c164e38eb52700000000000000000000000000000000000000000000079aef11460e594b6f970000000000000000000000000000000000000000000000000a08b63310a3c9a700000000000000000000000000000000000000000000079af21251402c365b17",
        "logIndex": 1,
        "blockHash": "0x0f1ebd967c59103a1a3233437461378af4c2b89a32cd287edd21883c99894094"
      }
    ],
    "blockNumber": 20599080,
    "cumulativeGasUsed": "3121924",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB6D2E9998C194e627Db2FcBa176313c35BFE52E8",
    "18",
    [],
    "0x7c1e545A40750Ee8761282382D51E017BAC68CBB",
    "0x9C32fCB86BF0f4a1A8921a9Fe46de3198bb884B2"
  ],
  "numDeployments": 2,
  "solcInputHash": "42e174c0410ea9da9a1f6a4b0a817b0f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBurnMintERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"localTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"allowlist\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"rmnProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"}],\"name\":\"AggregateValueMaxCapacityExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minWaitInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"AggregateValueRateLimitReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AllowListNotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BucketOverfilled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerIsNotARampOnRouter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotTransferToSelf\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CursedByRMN\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct RateLimiter.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"DisabledNonZeroRateLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"expected\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"actual\",\"type\":\"uint8\"}],\"name\":\"InvalidDecimalArgs\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct RateLimiter.Config\",\"name\":\"rateLimiterConfig\",\"type\":\"tuple\"}],\"name\":\"InvalidRateLimitRate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sourcePoolData\",\"type\":\"bytes\"}],\"name\":\"InvalidRemoteChainDecimals\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"remotePoolAddress\",\"type\":\"bytes\"}],\"name\":\"InvalidRemotePoolForChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"sourcePoolAddress\",\"type\":\"bytes\"}],\"name\":\"InvalidSourcePoolAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeProposedOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"}],\"name\":\"NonExistentChain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyCallableByOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"remoteDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"localDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"remoteAmount\",\"type\":\"uint256\"}],\"name\":\"OverflowDetected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnerCannotBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"remotePoolAddress\",\"type\":\"bytes\"}],\"name\":\"PoolAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RateLimitMustBeDisabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenMaxCapacityExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minWaitInSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenRateLimitReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AllowListAdd\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AllowListRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"remoteToken\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct RateLimiter.Config\",\"name\":\"outboundRateLimiterConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct RateLimiter.Config\",\"name\":\"inboundRateLimiterConfig\",\"type\":\"tuple\"}],\"name\":\"ChainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct RateLimiter.Config\",\"name\":\"outboundRateLimiterConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct RateLimiter.Config\",\"name\":\"inboundRateLimiterConfig\",\"type\":\"tuple\"}],\"name\":\"ChainConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"}],\"name\":\"ChainRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct RateLimiter.Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"ConfigChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rateLimitAdmin\",\"type\":\"address\"}],\"name\":\"RateLimitAdminSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"remotePoolAddress\",\"type\":\"bytes\"}],\"name\":\"RemotePoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"remotePoolAddress\",\"type\":\"bytes\"}],\"name\":\"RemotePoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"TokensConsumed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"remotePoolAddress\",\"type\":\"bytes\"}],\"name\":\"addRemotePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"removes\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adds\",\"type\":\"address[]\"}],\"name\":\"applyAllowListUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"remoteChainSelectorsToRemove\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"remotePoolAddresses\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"remoteTokenAddress\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct RateLimiter.Config\",\"name\":\"outboundRateLimiterConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct RateLimiter.Config\",\"name\":\"inboundRateLimiterConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct TokenPool.ChainUpdate[]\",\"name\":\"chainsToAdd\",\"type\":\"tuple[]\"}],\"name\":\"applyChainUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllowListEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"}],\"name\":\"getCurrentInboundRateLimiterState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"tokens\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdated\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct RateLimiter.TokenBucket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"}],\"name\":\"getCurrentOutboundRateLimiterState\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"tokens\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"lastUpdated\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct RateLimiter.TokenBucket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRateLimitAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"}],\"name\":\"getRemotePools\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"}],\"name\":\"getRemoteToken\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRmnProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"rmnProxy\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedChains\",\"outputs\":[{\"internalType\":\"uint64[]\",\"name\":\"\",\"type\":\"uint64[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"remotePoolAddress\",\"type\":\"bytes\"}],\"name\":\"isRemotePool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"}],\"name\":\"isSupportedChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isSupportedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"originalSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"}],\"internalType\":\"struct Pool.LockOrBurnInV1\",\"name\":\"lockOrBurnIn\",\"type\":\"tuple\"}],\"name\":\"lockOrBurn\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"destTokenAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"destPoolData\",\"type\":\"bytes\"}],\"internalType\":\"struct Pool.LockOrBurnOutV1\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"originalSender\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"localToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"sourcePoolAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"sourcePoolData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"offchainTokenData\",\"type\":\"bytes\"}],\"internalType\":\"struct Pool.ReleaseOrMintInV1\",\"name\":\"releaseOrMintIn\",\"type\":\"tuple\"}],\"name\":\"releaseOrMint\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"destinationAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Pool.ReleaseOrMintOutV1\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"remotePoolAddress\",\"type\":\"bytes\"}],\"name\":\"removeRemotePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"remoteChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct RateLimiter.Config\",\"name\":\"outboundConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct RateLimiter.Config\",\"name\":\"inboundConfig\",\"type\":\"tuple\"}],\"name\":\"setChainRateLimiterConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"remoteChainSelectors\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct RateLimiter.Config[]\",\"name\":\"outboundConfigs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"capacity\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rate\",\"type\":\"uint128\"}],\"internalType\":\"struct RateLimiter.Config[]\",\"name\":\"inboundConfigs\",\"type\":\"tuple[]\"}],\"name\":\"setChainRateLimiterConfigs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rateLimitAdmin\",\"type\":\"address\"}],\"name\":\"setRateLimitAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"typeAndVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Pool whitelisting mode is set in the constructor and cannot be modified later. It either accepts any address as originalSender, or only accepts whitelisted originalSender. The only way to change whitelisting mode is to deploy a new pool. If that is expected, please make sure the token's burner/minter roles are adjustable.This contract is a variant of BurnMintTokenPool that uses `burn(amount)`.\",\"kind\":\"dev\",\"methods\":{\"addRemotePool(uint64,bytes)\":{\"params\":{\"remoteChainSelector\":\"The remote chain selector for which the remote pool address is being added.\",\"remotePoolAddress\":\"The address of the new remote pool.\"}},\"applyAllowListUpdates(address[],address[])\":{\"params\":{\"adds\":\"The addresses to be added.\",\"removes\":\"The addresses to be removed.\"}},\"applyChainUpdates(uint64[],(uint64,bytes[],bytes,(bool,uint128,uint128),(bool,uint128,uint128))[])\":{\"details\":\"Only callable by the owner\",\"params\":{\"chainsToAdd\":\"A list of chains and their new permission status & rate limits. Rate limits are only used when the chain is being added through `allowed` being true.\",\"remoteChainSelectorsToRemove\":\"A list of chain selectors to remove.\"}},\"getAllowList()\":{\"returns\":{\"_0\":\"The allowed addresses.\"}},\"getAllowListEnabled()\":{\"returns\":{\"_0\":\"true is enabled, false if not.\"}},\"getCurrentInboundRateLimiterState(uint64)\":{\"returns\":{\"_0\":\"The token bucket.\"}},\"getCurrentOutboundRateLimiterState(uint64)\":{\"returns\":{\"_0\":\"The token bucket.\"}},\"getRemotePools(uint64)\":{\"details\":\"To support non-evm chains, this value is encoded into bytes\",\"params\":{\"remoteChainSelector\":\"Remote chain selector.\"}},\"getRemoteToken(uint64)\":{\"details\":\"To support non-evm chains, this value is encoded into bytes\",\"params\":{\"remoteChainSelector\":\"Remote chain selector.\"}},\"getRmnProxy()\":{\"returns\":{\"rmnProxy\":\"Address of RMN proxy\"}},\"getRouter()\":{\"returns\":{\"router\":\"The pool's Router\"}},\"getSupportedChains()\":{\"returns\":{\"_0\":\"list of chains.\"}},\"getToken()\":{\"returns\":{\"token\":\"The IERC20 token representation.\"}},\"isRemotePool(uint64,bytes)\":{\"params\":{\"remoteChainSelector\":\"Remote chain selector.\",\"remotePoolAddress\":\"The address of the remote pool.\"}},\"isSupportedChain(uint64)\":{\"params\":{\"remoteChainSelector\":\"The selector of the remote chain.\"},\"returns\":{\"_0\":\"true if the given chain is a permissioned remote chain.\"}},\"isSupportedToken(address)\":{\"params\":{\"token\":\"The address of the token.\"},\"returns\":{\"_0\":\"true if the token is supported by the pool.\"}},\"lockOrBurn((bytes,uint64,address,uint256,address))\":{\"details\":\"The _validateLockOrBurn check is an essential security check\"},\"releaseOrMint((bytes,uint64,address,uint256,address,bytes,bytes,bytes))\":{\"details\":\"The _validateReleaseOrMint check is an essential security check\"},\"removeRemotePool(uint64,bytes)\":{\"details\":\"All inflight txs from the remote pool will be rejected after it is removed. To ensure no loss of funds, there should be no inflight txs from the given pool.\"},\"setChainRateLimiterConfig(uint64,(bool,uint128,uint128),(bool,uint128,uint128))\":{\"params\":{\"inboundConfig\":\"The new inbound rate limiter config, meaning the offRamp rate limits for the given chain.\",\"outboundConfig\":\"The new outbound rate limiter config, meaning the onRamp rate limits for the given chain.\",\"remoteChainSelector\":\"The remote chain selector for which the rate limits apply.\"}},\"setChainRateLimiterConfigs(uint64[],(bool,uint128,uint128)[],(bool,uint128,uint128)[])\":{\"params\":{\"inboundConfigs\":\"The new inbound rate limiter config, meaning the offRamp rate limits for the given chain.\",\"outboundConfigs\":\"The new outbound rate limiter config, meaning the onRamp rate limits for the given chain.\",\"remoteChainSelectors\":\"The remote chain selector for which the rate limits apply.\"}},\"setRateLimitAdmin(address)\":{\"details\":\"Only callable by the owner.\",\"params\":{\"rateLimitAdmin\":\"The new rate limiter admin address.\"}},\"setRouter(address)\":{\"params\":{\"newRouter\":\"The new Router\"}},\"transferOwnership(address)\":{\"params\":{\"to\":\"The address to which ownership will be transferred.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"addRemotePool(uint64,bytes)\":{\"notice\":\"Adds a remote pool for a given chain selector. This could be due to a pool being upgraded on the remote chain. We don't simply want to replace the old pool as there could still be valid inflight messages from the old pool. This function allows for multiple pools to be added for a single chain selector.\"},\"applyAllowListUpdates(address[],address[])\":{\"notice\":\"Apply updates to the allow list.\"},\"applyChainUpdates(uint64[],(uint64,bytes[],bytes,(bool,uint128,uint128),(bool,uint128,uint128))[])\":{\"notice\":\"Sets the permissions for a list of chains selectors. Actual senders for these chains need to be allowed on the Router to interact with this pool.\"},\"getAllowList()\":{\"notice\":\"Gets the allowed addresses.\"},\"getAllowListEnabled()\":{\"notice\":\"Gets whether the allowlist functionality is enabled.\"},\"getCurrentInboundRateLimiterState(uint64)\":{\"notice\":\"Gets the token bucket with its values for the block it was requested at.\"},\"getCurrentOutboundRateLimiterState(uint64)\":{\"notice\":\"Gets the token bucket with its values for the block it was requested at.\"},\"getRateLimitAdmin()\":{\"notice\":\"Gets the rate limiter admin address.\"},\"getRemotePools(uint64)\":{\"notice\":\"Gets the pool address on the remote chain.\"},\"getRemoteToken(uint64)\":{\"notice\":\"Gets the token address on the remote chain.\"},\"getRmnProxy()\":{\"notice\":\"Get RMN proxy address\"},\"getRouter()\":{\"notice\":\"Gets the pool's Router\"},\"getSupportedChains()\":{\"notice\":\"Get list of allowed chains\"},\"getToken()\":{\"notice\":\"Gets the IERC20 token that this pool can lock or burn.\"},\"getTokenDecimals()\":{\"notice\":\"Gets the IERC20 token decimals on the local chain.\"},\"isRemotePool(uint64,bytes)\":{\"notice\":\"Checks if the pool address is configured on the remote chain.\"},\"isSupportedChain(uint64)\":{\"notice\":\"Checks whether a remote chain is supported in the token pool.\"},\"isSupportedToken(address)\":{\"notice\":\"Returns if the token pool supports the given token.\"},\"lockOrBurn((bytes,uint64,address,uint256,address))\":{\"notice\":\"Burn the token in the pool\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"releaseOrMint((bytes,uint64,address,uint256,address,bytes,bytes,bytes))\":{\"notice\":\"Mint tokens from the pool to the recipient\"},\"removeRemotePool(uint64,bytes)\":{\"notice\":\"Removes the remote pool address for a given chain selector.\"},\"setChainRateLimiterConfig(uint64,(bool,uint128,uint128),(bool,uint128,uint128))\":{\"notice\":\"Sets the chain rate limiter config.\"},\"setChainRateLimiterConfigs(uint64[],(bool,uint128,uint128)[],(bool,uint128,uint128)[])\":{\"notice\":\"Sets multiple chain rate limiter configs.\"},\"setRateLimitAdmin(address)\":{\"notice\":\"Sets the rate limiter admin address.\"},\"setRouter(address)\":{\"notice\":\"Sets the pool's Router\"},\"supportsInterface(bytes4)\":{\"notice\":\"Signals which version of the pool interface is supported\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address. The new owner needs to call `acceptOwnership` to accept the transfer before any permissions are changed.\"}},\"notice\":\"This pool mints and burns a 3rd-party token.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol\":\"BurnMintTokenPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Pool} from \\\"../libraries/Pool.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @notice Shared public interface for multiple V1 pool types.\\n/// Each pool type handles a different child token model (lock/unlock, mint/burn.)\\ninterface IPoolV1 is IERC165 {\\n  /// @notice Lock tokens into the pool or burn the tokens.\\n  /// @param lockOrBurnIn Encoded data fields for the processing of tokens on the source chain.\\n  /// @return lockOrBurnOut Encoded data fields for the processing of tokens on the destination chain.\\n  function lockOrBurn(\\n    Pool.LockOrBurnInV1 calldata lockOrBurnIn\\n  ) external returns (Pool.LockOrBurnOutV1 memory lockOrBurnOut);\\n\\n  /// @notice Releases or mints tokens to the receiver address.\\n  /// @param releaseOrMintIn All data required to release or mint tokens.\\n  /// @return releaseOrMintOut The amount of tokens released or minted on the local chain, denominated\\n  /// in the local token's decimals.\\n  /// @dev The offramp asserts that the balanceOf of the receiver has been incremented by exactly the number\\n  /// of tokens that is returned in ReleaseOrMintOutV1.destinationAmount. If the amounts do not match, the tx reverts.\\n  function releaseOrMint(\\n    Pool.ReleaseOrMintInV1 calldata releaseOrMintIn\\n  ) external returns (Pool.ReleaseOrMintOutV1 memory);\\n\\n  /// @notice Checks whether a remote chain is supported in the token pool.\\n  /// @param remoteChainSelector The selector of the remote chain.\\n  /// @return true if the given chain is a permissioned remote chain.\\n  function isSupportedChain(\\n    uint64 remoteChainSelector\\n  ) external view returns (bool);\\n\\n  /// @notice Returns if the token pool supports the given token.\\n  /// @param token The address of the token.\\n  /// @return true if the token is supported by the pool.\\n  function isSupportedToken(\\n    address token\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9c7a2905deceb86bd729af5adb650306523db604f83f9cb4e7dbff7652d4e5b5\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRMN.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice This interface contains the only RMN-related functions that might be used on-chain by other CCIP contracts.\\ninterface IRMN {\\n  /// @notice A Merkle root tagged with the address of the commit store contract it is destined for.\\n  struct TaggedRoot {\\n    address commitStore;\\n    bytes32 root;\\n  }\\n\\n  /// @notice Callers MUST NOT cache the return value as a blessed tagged root could become unblessed.\\n  function isBlessed(\\n    TaggedRoot calldata taggedRoot\\n  ) external view returns (bool);\\n\\n  /// @notice Iff there is an active global or legacy curse, this function returns true.\\n  function isCursed() external view returns (bool);\\n\\n  /// @notice Iff there is an active global curse, or an active curse for `subject`, this function returns true.\\n  /// @param subject To check whether a particular chain is cursed, set to bytes16(uint128(chainSelector)).\\n  function isCursed(\\n    bytes16 subject\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x266447efd07fc416160fe15a2a90e859e1e9d710212663fe35d266c67e2b9532\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouter {\\n  error OnlyOffRamp();\\n\\n  /// @notice Route the message to its intended receiver contract.\\n  /// @param message Client.Any2EVMMessage struct.\\n  /// @param gasForCallExactCheck of params for exec\\n  /// @param gasLimit set of params for exec\\n  /// @param receiver set of params for exec\\n  /// @dev if the receiver is a contracts that signals support for CCIP execution through EIP-165.\\n  /// the contract is called. If not, only tokens are transferred.\\n  /// @return success A boolean value indicating whether the ccip message was received without errors.\\n  /// @return retBytes A bytes array containing return data form CCIP receiver.\\n  /// @return gasUsed the gas used by the external customer call. Does not include any overhead.\\n  function routeMessage(\\n    Client.Any2EVMMessage calldata message,\\n    uint16 gasForCallExactCheck,\\n    uint256 gasLimit,\\n    address receiver\\n  ) external returns (bool success, bytes memory retBytes, uint256 gasUsed);\\n\\n  /// @notice Returns the configured onramp for a specific destination chain.\\n  /// @param destChainSelector The destination chain Id to get the onRamp for.\\n  /// @return onRampAddress The address of the onRamp.\\n  function getOnRamp(\\n    uint64 destChainSelector\\n  ) external view returns (address onRampAddress);\\n\\n  /// @notice Return true if the given offRamp is a configured offRamp for the given source chain.\\n  /// @param sourceChainSelector The source chain selector to check.\\n  /// @param offRamp The address of the offRamp to check.\\n  function isOffRamp(uint64 sourceChainSelector, address offRamp) external view returns (bool isOffRamp);\\n}\\n\",\"keccak256\":\"0x07128ab8bc01fd81fa770047048385cfc9f260d4b932370c3a59acbc26bfdc07\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV2)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(\\n    EVMExtraArgsV1 memory extraArgs\\n  ) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV2\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V2_TAG = 0x181dcf10;\\n\\n  /// @param gasLimit: gas limit for the callback on the destination chain.\\n  /// @param allowOutOfOrderExecution: if true, it indicates that the message can be executed in any order relative to other messages from the same sender.\\n  /// This value's default varies by chain. On some chains, a particular value is enforced, meaning if the expected value\\n  /// is not set, the message request will revert.\\n  struct EVMExtraArgsV2 {\\n    uint256 gasLimit;\\n    bool allowOutOfOrderExecution;\\n  }\\n\\n  function _argsToBytes(\\n    EVMExtraArgsV2 memory extraArgs\\n  ) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V2_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x052174af3c87abcbf5e7754f3d3aa9d0ff5054ecef0d9d01ef087c28a468bb0b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice This library contains various token pool functions to aid constructing the return data.\\nlibrary Pool {\\n  // The tag used to signal support for the pool v1 standard\\n  // bytes4(keccak256(\\\"CCIP_POOL_V1\\\"))\\n  bytes4 public constant CCIP_POOL_V1 = 0xaff2afbf;\\n\\n  // The number of bytes in the return data for a pool v1 releaseOrMint call.\\n  // This should match the size of the ReleaseOrMintOutV1 struct.\\n  uint16 public constant CCIP_POOL_V1_RET_BYTES = 32;\\n\\n  // The default max number of bytes in the return data for a pool v1 lockOrBurn call.\\n  // This data can be used to send information to the destination chain token pool. Can be overwritten\\n  // in the TokenTransferFeeConfig.destBytesOverhead if more data is required.\\n  uint32 public constant CCIP_LOCK_OR_BURN_V1_RET_BYTES = 32;\\n\\n  struct LockOrBurnInV1 {\\n    bytes receiver; //  The recipient of the tokens on the destination chain, abi encoded\\n    uint64 remoteChainSelector; // \\u2500\\u256e The chain ID of the destination chain\\n    address originalSender; // \\u2500\\u2500\\u2500\\u2500\\u2500\\u256f The original sender of the tx on the source chain\\n    uint256 amount; //  The amount of tokens to lock or burn, denominated in the source token's decimals\\n    address localToken; //  The address on this chain of the token to lock or burn\\n  }\\n\\n  struct LockOrBurnOutV1 {\\n    // The address of the destination token, abi encoded in the case of EVM chains\\n    // This value is UNTRUSTED as any pool owner can return whatever value they want.\\n    bytes destTokenAddress;\\n    // Optional pool data to be transferred to the destination chain. Be default this is capped at\\n    // CCIP_LOCK_OR_BURN_V1_RET_BYTES bytes. If more data is required, the TokenTransferFeeConfig.destBytesOverhead\\n    // has to be set for the specific token.\\n    bytes destPoolData;\\n  }\\n\\n  struct ReleaseOrMintInV1 {\\n    bytes originalSender; //          The original sender of the tx on the source chain\\n    uint64 remoteChainSelector; // \\u2500\\u256e The chain ID of the source chain\\n    address receiver; // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256f The recipient of the tokens on the destination chain.\\n    uint256 amount; //                The amount of tokens to release or mint, denominated in the source token's decimals\\n    address localToken; //            The address on this chain of the token to release or mint\\n    /// @dev WARNING: sourcePoolAddress should be checked prior to any processing of funds. Make sure it matches the\\n    /// expected pool address for the given remoteChainSelector.\\n    bytes sourcePoolAddress; //       The address of the source pool, abi encoded in the case of EVM chains\\n    bytes sourcePoolData; //          The data received from the source pool to process the release or mint\\n    /// @dev WARNING: offchainTokenData is untrusted data.\\n    bytes offchainTokenData; //       The offchain data to process the release or mint\\n  }\\n\\n  struct ReleaseOrMintOutV1 {\\n    // The number of tokens released or minted on the destination chain, denominated in the local token's decimals.\\n    // This value is expected to be equal to the ReleaseOrMintInV1.amount in the case where the source and destination\\n    // chain have the same number of decimals.\\n    uint256 destinationAmount;\\n  }\\n}\\n\",\"keccak256\":\"0x0bab34da83a9a9f207471db3aeb0866a376aada7e287b0d8a7ac74a8d77fc2a5\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/RateLimiter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\n/// @notice Implements Token Bucket rate limiting.\\n/// @dev uint128 is safe for rate limiter state.\\n/// For USD value rate limiting, it can adequately store USD value in 18 decimals.\\n/// For ERC20 token amount rate limiting, all tokens that will be listed will have at most\\n/// a supply of uint128.max tokens, and it will therefore not overflow the bucket.\\n/// In exceptional scenarios where tokens consumed may be larger than uint128,\\n/// e.g. compromised issuer, an enabled RateLimiter will check and revert.\\nlibrary RateLimiter {\\n  error BucketOverfilled();\\n  error OnlyCallableByAdminOrOwner();\\n  error TokenMaxCapacityExceeded(uint256 capacity, uint256 requested, address tokenAddress);\\n  error TokenRateLimitReached(uint256 minWaitInSeconds, uint256 available, address tokenAddress);\\n  error AggregateValueMaxCapacityExceeded(uint256 capacity, uint256 requested);\\n  error AggregateValueRateLimitReached(uint256 minWaitInSeconds, uint256 available);\\n  error InvalidRateLimitRate(Config rateLimiterConfig);\\n  error DisabledNonZeroRateLimit(Config config);\\n  error RateLimitMustBeDisabled();\\n\\n  event TokensConsumed(uint256 tokens);\\n  event ConfigChanged(Config config);\\n\\n  struct TokenBucket {\\n    uint128 tokens; // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256e Current number of tokens that are in the bucket.\\n    uint32 lastUpdated; //   \\u2502 Timestamp in seconds of the last token refill, good for 100+ years.\\n    bool isEnabled; // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256f Indication whether the rate limiting is enabled or not\\n    uint128 capacity; // \\u2500\\u2500\\u2500\\u2500\\u256e Maximum number of tokens that can be in the bucket.\\n    uint128 rate; // \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256f Number of tokens per second that the bucket is refilled.\\n  }\\n\\n  struct Config {\\n    bool isEnabled; // Indication whether the rate limiting should be enabled\\n    uint128 capacity; // \\u2500\\u2500\\u2500\\u2500\\u256e Specifies the capacity of the rate limiter\\n    uint128 rate; //  \\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u2500\\u256f Specifies the rate of the rate limiter\\n  }\\n\\n  /// @notice _consume removes the given tokens from the pool, lowering the\\n  /// rate tokens allowed to be consumed for subsequent calls.\\n  /// @param requestTokens The total tokens to be consumed from the bucket.\\n  /// @param tokenAddress The token to consume capacity for, use 0x0 to indicate aggregate value capacity.\\n  /// @dev Reverts when requestTokens exceeds bucket capacity or available tokens in the bucket\\n  /// @dev emits removal of requestTokens if requestTokens is > 0\\n  function _consume(TokenBucket storage s_bucket, uint256 requestTokens, address tokenAddress) internal {\\n    // If there is no value to remove or rate limiting is turned off, skip this step to reduce gas usage\\n    if (!s_bucket.isEnabled || requestTokens == 0) {\\n      return;\\n    }\\n\\n    uint256 tokens = s_bucket.tokens;\\n    uint256 capacity = s_bucket.capacity;\\n    uint256 timeDiff = block.timestamp - s_bucket.lastUpdated;\\n\\n    if (timeDiff != 0) {\\n      if (tokens > capacity) revert BucketOverfilled();\\n\\n      // Refill tokens when arriving at a new block time\\n      tokens = _calculateRefill(capacity, tokens, timeDiff, s_bucket.rate);\\n\\n      s_bucket.lastUpdated = uint32(block.timestamp);\\n    }\\n\\n    if (capacity < requestTokens) {\\n      // Token address 0 indicates consuming aggregate value rate limit capacity.\\n      if (tokenAddress == address(0)) revert AggregateValueMaxCapacityExceeded(capacity, requestTokens);\\n      revert TokenMaxCapacityExceeded(capacity, requestTokens, tokenAddress);\\n    }\\n    if (tokens < requestTokens) {\\n      uint256 rate = s_bucket.rate;\\n      // Wait required until the bucket is refilled enough to accept this value, round up to next higher second\\n      // Consume is not guaranteed to succeed after wait time passes if there is competing traffic.\\n      // This acts as a lower bound of wait time.\\n      uint256 minWaitInSeconds = ((requestTokens - tokens) + (rate - 1)) / rate;\\n\\n      if (tokenAddress == address(0)) revert AggregateValueRateLimitReached(minWaitInSeconds, tokens);\\n      revert TokenRateLimitReached(minWaitInSeconds, tokens, tokenAddress);\\n    }\\n    tokens -= requestTokens;\\n\\n    // Downcast is safe here, as tokens is not larger than capacity\\n    s_bucket.tokens = uint128(tokens);\\n    emit TokensConsumed(requestTokens);\\n  }\\n\\n  /// @notice Gets the token bucket with its values for the block it was requested at.\\n  /// @return The token bucket.\\n  function _currentTokenBucketState(\\n    TokenBucket memory bucket\\n  ) internal view returns (TokenBucket memory) {\\n    // We update the bucket to reflect the status at the exact time of the\\n    // call. This means we might need to refill a part of the bucket based\\n    // on the time that has passed since the last update.\\n    bucket.tokens =\\n      uint128(_calculateRefill(bucket.capacity, bucket.tokens, block.timestamp - bucket.lastUpdated, bucket.rate));\\n    bucket.lastUpdated = uint32(block.timestamp);\\n    return bucket;\\n  }\\n\\n  /// @notice Sets the rate limited config.\\n  /// @param s_bucket The token bucket\\n  /// @param config The new config\\n  function _setTokenBucketConfig(TokenBucket storage s_bucket, Config memory config) internal {\\n    // First update the bucket to make sure the proper rate is used for all the time\\n    // up until the config change.\\n    uint256 timeDiff = block.timestamp - s_bucket.lastUpdated;\\n    if (timeDiff != 0) {\\n      s_bucket.tokens = uint128(_calculateRefill(s_bucket.capacity, s_bucket.tokens, timeDiff, s_bucket.rate));\\n\\n      s_bucket.lastUpdated = uint32(block.timestamp);\\n    }\\n\\n    s_bucket.tokens = uint128(_min(config.capacity, s_bucket.tokens));\\n    s_bucket.isEnabled = config.isEnabled;\\n    s_bucket.capacity = config.capacity;\\n    s_bucket.rate = config.rate;\\n\\n    emit ConfigChanged(config);\\n  }\\n\\n  /// @notice Validates the token bucket config\\n  function _validateTokenBucketConfig(Config memory config, bool mustBeDisabled) internal pure {\\n    if (config.isEnabled) {\\n      if (config.rate >= config.capacity || config.rate == 0) {\\n        revert InvalidRateLimitRate(config);\\n      }\\n      if (mustBeDisabled) {\\n        revert RateLimitMustBeDisabled();\\n      }\\n    } else {\\n      if (config.rate != 0 || config.capacity != 0) {\\n        revert DisabledNonZeroRateLimit(config);\\n      }\\n    }\\n  }\\n\\n  /// @notice Calculate refilled tokens\\n  /// @param capacity bucket capacity\\n  /// @param tokens current bucket tokens\\n  /// @param timeDiff block time difference since last refill\\n  /// @param rate bucket refill rate\\n  /// @return the value of tokens after refill\\n  function _calculateRefill(\\n    uint256 capacity,\\n    uint256 tokens,\\n    uint256 timeDiff,\\n    uint256 rate\\n  ) private pure returns (uint256) {\\n    return _min(capacity, tokens + timeDiff * rate);\\n  }\\n\\n  /// @notice Return the smallest of two integers\\n  /// @param a first int\\n  /// @param b second int\\n  /// @return smallest\\n  function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n}\\n\",\"keccak256\":\"0xd279954d3429598e5b8513c90e42805195bc29780abb8350007285626333809d\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.24;\\n\\nimport {ITypeAndVersion} from \\\"../../shared/interfaces/ITypeAndVersion.sol\\\";\\nimport {IBurnMintERC20} from \\\"../../shared/token/ERC20/IBurnMintERC20.sol\\\";\\n\\nimport {BurnMintTokenPoolAbstract} from \\\"./BurnMintTokenPoolAbstract.sol\\\";\\nimport {TokenPool} from \\\"./TokenPool.sol\\\";\\n\\n/// @notice This pool mints and burns a 3rd-party token.\\n/// @dev Pool whitelisting mode is set in the constructor and cannot be modified later.\\n/// It either accepts any address as originalSender, or only accepts whitelisted originalSender.\\n/// The only way to change whitelisting mode is to deploy a new pool.\\n/// If that is expected, please make sure the token's burner/minter roles are adjustable.\\n/// @dev This contract is a variant of BurnMintTokenPool that uses `burn(amount)`.\\ncontract BurnMintTokenPool is BurnMintTokenPoolAbstract, ITypeAndVersion {\\n  string public constant override typeAndVersion = \\\"BurnMintTokenPool 1.5.1\\\";\\n\\n  constructor(\\n    IBurnMintERC20 token,\\n    uint8 localTokenDecimals,\\n    address[] memory allowlist,\\n    address rmnProxy,\\n    address router\\n  ) TokenPool(token, localTokenDecimals, allowlist, rmnProxy, router) {}\\n\\n  /// @inheritdoc BurnMintTokenPoolAbstract\\n  function _burn(\\n    uint256 amount\\n  ) internal virtual override {\\n    IBurnMintERC20(address(i_token)).burn(amount);\\n  }\\n}\\n\",\"keccak256\":\"0x6a2ab062333ac4043a5779d2ba782637577c01489cb3bbad831bf44c74602406\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPoolAbstract.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.24;\\n\\nimport {IBurnMintERC20} from \\\"../../shared/token/ERC20/IBurnMintERC20.sol\\\";\\n\\nimport {Pool} from \\\"../libraries/Pool.sol\\\";\\nimport {TokenPool} from \\\"./TokenPool.sol\\\";\\n\\nabstract contract BurnMintTokenPoolAbstract is TokenPool {\\n  /// @notice Contains the specific burn call for a pool.\\n  /// @dev overriding this method allows us to create pools with different burn signatures\\n  /// without duplicating the underlying logic.\\n  function _burn(\\n    uint256 amount\\n  ) internal virtual;\\n\\n  /// @notice Burn the token in the pool\\n  /// @dev The _validateLockOrBurn check is an essential security check\\n  function lockOrBurn(\\n    Pool.LockOrBurnInV1 calldata lockOrBurnIn\\n  ) external virtual override returns (Pool.LockOrBurnOutV1 memory) {\\n    _validateLockOrBurn(lockOrBurnIn);\\n\\n    _burn(lockOrBurnIn.amount);\\n\\n    emit Burned(msg.sender, lockOrBurnIn.amount);\\n\\n    return Pool.LockOrBurnOutV1({\\n      destTokenAddress: getRemoteToken(lockOrBurnIn.remoteChainSelector),\\n      destPoolData: _encodeLocalDecimals()\\n    });\\n  }\\n\\n  /// @notice Mint tokens from the pool to the recipient\\n  /// @dev The _validateReleaseOrMint check is an essential security check\\n  function releaseOrMint(\\n    Pool.ReleaseOrMintInV1 calldata releaseOrMintIn\\n  ) external virtual override returns (Pool.ReleaseOrMintOutV1 memory) {\\n    _validateReleaseOrMint(releaseOrMintIn);\\n\\n    // Calculate the local amount\\n    uint256 localAmount =\\n      _calculateLocalAmount(releaseOrMintIn.amount, _parseRemoteDecimals(releaseOrMintIn.sourcePoolData));\\n\\n    // Mint to the receiver\\n    IBurnMintERC20(address(i_token)).mint(releaseOrMintIn.receiver, localAmount);\\n\\n    emit Minted(msg.sender, releaseOrMintIn.receiver, localAmount);\\n\\n    return Pool.ReleaseOrMintOutV1({destinationAmount: localAmount});\\n  }\\n}\\n\",\"keccak256\":\"0x4cb9b780e28ad623884538d1c5eb07bda3d65a7bf9249cfa9cc95e0064d7b631\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/pools/TokenPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.24;\\n\\nimport {IPoolV1} from \\\"../interfaces/IPool.sol\\\";\\nimport {IRMN} from \\\"../interfaces/IRMN.sol\\\";\\nimport {IRouter} from \\\"../interfaces/IRouter.sol\\\";\\n\\nimport {Ownable2StepMsgSender} from \\\"../../shared/access/Ownable2StepMsgSender.sol\\\";\\nimport {Pool} from \\\"../libraries/Pool.sol\\\";\\nimport {RateLimiter} from \\\"../libraries/RateLimiter.sol\\\";\\n\\nimport {IERC20} from \\\"../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from\\n  \\\"../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\\\";\\nimport {EnumerableSet} from \\\"../../vendor/openzeppelin-solidity/v5.0.2/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/// @dev This pool supports different decimals on different chains but using this feature could impact the total number\\n/// of tokens in circulation. Since all of the tokens are locked/burned on the source, and a rounded amount is minted/released on the\\n/// destination, the number of tokens minted/released could be less than the number of tokens burned/locked. This is because the source\\n/// chain does not know about the destination token decimals. This is not a problem if the decimals are the same on both\\n/// chains.\\n///\\n/// Example:\\n/// Assume there is a token with 6 decimals on chain A and 3 decimals on chain B.\\n/// - 1.234567 tokens are burned on chain A.\\n/// - 1.234    tokens are minted on chain B.\\n/// When sending the 1.234 tokens back to chain A, you will receive 1.234000 tokens on chain A, effectively losing\\n/// 0.000567 tokens.\\n/// In the case of a burnMint pool on chain A, these funds are burned in the pool on chain A.\\n/// In the case of a lockRelease pool on chain A, these funds accumulate in the pool on chain A.\\nabstract contract TokenPool is IPoolV1, Ownable2StepMsgSender {\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using EnumerableSet for EnumerableSet.UintSet;\\n  using RateLimiter for RateLimiter.TokenBucket;\\n\\n  error CallerIsNotARampOnRouter(address caller);\\n  error ZeroAddressNotAllowed();\\n  error SenderNotAllowed(address sender);\\n  error AllowListNotEnabled();\\n  error NonExistentChain(uint64 remoteChainSelector);\\n  error ChainNotAllowed(uint64 remoteChainSelector);\\n  error CursedByRMN();\\n  error ChainAlreadyExists(uint64 chainSelector);\\n  error InvalidSourcePoolAddress(bytes sourcePoolAddress);\\n  error InvalidToken(address token);\\n  error Unauthorized(address caller);\\n  error PoolAlreadyAdded(uint64 remoteChainSelector, bytes remotePoolAddress);\\n  error InvalidRemotePoolForChain(uint64 remoteChainSelector, bytes remotePoolAddress);\\n  error InvalidRemoteChainDecimals(bytes sourcePoolData);\\n  error MismatchedArrayLengths();\\n  error OverflowDetected(uint8 remoteDecimals, uint8 localDecimals, uint256 remoteAmount);\\n  error InvalidDecimalArgs(uint8 expected, uint8 actual);\\n\\n  event Locked(address indexed sender, uint256 amount);\\n  event Burned(address indexed sender, uint256 amount);\\n  event Released(address indexed sender, address indexed recipient, uint256 amount);\\n  event Minted(address indexed sender, address indexed recipient, uint256 amount);\\n  event ChainAdded(\\n    uint64 remoteChainSelector,\\n    bytes remoteToken,\\n    RateLimiter.Config outboundRateLimiterConfig,\\n    RateLimiter.Config inboundRateLimiterConfig\\n  );\\n  event ChainConfigured(\\n    uint64 remoteChainSelector,\\n    RateLimiter.Config outboundRateLimiterConfig,\\n    RateLimiter.Config inboundRateLimiterConfig\\n  );\\n  event ChainRemoved(uint64 remoteChainSelector);\\n  event RemotePoolAdded(uint64 indexed remoteChainSelector, bytes remotePoolAddress);\\n  event RemotePoolRemoved(uint64 indexed remoteChainSelector, bytes remotePoolAddress);\\n  event AllowListAdd(address sender);\\n  event AllowListRemove(address sender);\\n  event RouterUpdated(address oldRouter, address newRouter);\\n  event RateLimitAdminSet(address rateLimitAdmin);\\n\\n  struct ChainUpdate {\\n    uint64 remoteChainSelector; // Remote chain selector\\n    bytes[] remotePoolAddresses; // Address of the remote pool, ABI encoded in the case of a remote EVM chain.\\n    bytes remoteTokenAddress; // Address of the remote token, ABI encoded in the case of a remote EVM chain.\\n    RateLimiter.Config outboundRateLimiterConfig; // Outbound rate limited config, meaning the rate limits for all of the onRamps for the given chain\\n    RateLimiter.Config inboundRateLimiterConfig; // Inbound rate limited config, meaning the rate limits for all of the offRamps for the given chain\\n  }\\n\\n  struct RemoteChainConfig {\\n    RateLimiter.TokenBucket outboundRateLimiterConfig; // Outbound rate limited config, meaning the rate limits for all of the onRamps for the given chain\\n    RateLimiter.TokenBucket inboundRateLimiterConfig; // Inbound rate limited config, meaning the rate limits for all of the offRamps for the given chain\\n    bytes remoteTokenAddress; // Address of the remote token, ABI encoded in the case of a remote EVM chain.\\n    EnumerableSet.Bytes32Set remotePools; // Set of remote pool hashes, ABI encoded in the case of a remote EVM chain.\\n  }\\n\\n  /// @dev The bridgeable token that is managed by this pool. Pools could support multiple tokens at the same time if\\n  /// required, but this implementation only supports one token.\\n  IERC20 internal immutable i_token;\\n  /// @dev The number of decimals of the token managed by this pool.\\n  uint8 internal immutable i_tokenDecimals;\\n  /// @dev The address of the RMN proxy\\n  address internal immutable i_rmnProxy;\\n  /// @dev The immutable flag that indicates if the pool is access-controlled.\\n  bool internal immutable i_allowlistEnabled;\\n  /// @dev A set of addresses allowed to trigger lockOrBurn as original senders.\\n  /// Only takes effect if i_allowlistEnabled is true.\\n  /// This can be used to ensure only token-issuer specified addresses can move tokens.\\n  EnumerableSet.AddressSet internal s_allowlist;\\n  /// @dev The address of the router\\n  IRouter internal s_router;\\n  /// @dev A set of allowed chain selectors. We want the allowlist to be enumerable to\\n  /// be able to quickly determine (without parsing logs) who can access the pool.\\n  /// @dev The chain selectors are in uint256 format because of the EnumerableSet implementation.\\n  EnumerableSet.UintSet internal s_remoteChainSelectors;\\n  mapping(uint64 remoteChainSelector => RemoteChainConfig) internal s_remoteChainConfigs;\\n  /// @notice A mapping of hashed pool addresses to their unhashed form. This is used to be able to find the actually\\n  /// configured pools and not just their hashed versions.\\n  mapping(bytes32 poolAddressHash => bytes poolAddress) internal s_remotePoolAddresses;\\n  /// @notice The address of the rate limiter admin.\\n  /// @dev Can be address(0) if none is configured.\\n  address internal s_rateLimitAdmin;\\n\\n  constructor(IERC20 token, uint8 localTokenDecimals, address[] memory allowlist, address rmnProxy, address router) {\\n    if (address(token) == address(0) || router == address(0) || rmnProxy == address(0)) revert ZeroAddressNotAllowed();\\n    i_token = token;\\n    i_rmnProxy = rmnProxy;\\n\\n    try IERC20Metadata(address(token)).decimals() returns (uint8 actualTokenDecimals) {\\n      if (localTokenDecimals != actualTokenDecimals) {\\n        revert InvalidDecimalArgs(localTokenDecimals, actualTokenDecimals);\\n      }\\n    } catch {\\n      // The decimals function doesn't exist, which is possible since it's optional in the ERC20 spec. We skip the check and\\n      // assume the supplied token decimals are correct.\\n    }\\n    i_tokenDecimals = localTokenDecimals;\\n\\n    s_router = IRouter(router);\\n\\n    // Pool can be set as permissioned or permissionless at deployment time only to save hot-path gas.\\n    i_allowlistEnabled = allowlist.length > 0;\\n    if (i_allowlistEnabled) {\\n      _applyAllowListUpdates(new address[](0), allowlist);\\n    }\\n  }\\n\\n  /// @inheritdoc IPoolV1\\n  function isSupportedToken(\\n    address token\\n  ) public view virtual returns (bool) {\\n    return token == address(i_token);\\n  }\\n\\n  /// @notice Gets the IERC20 token that this pool can lock or burn.\\n  /// @return token The IERC20 token representation.\\n  function getToken() public view returns (IERC20 token) {\\n    return i_token;\\n  }\\n\\n  /// @notice Get RMN proxy address\\n  /// @return rmnProxy Address of RMN proxy\\n  function getRmnProxy() public view returns (address rmnProxy) {\\n    return i_rmnProxy;\\n  }\\n\\n  /// @notice Gets the pool's Router\\n  /// @return router The pool's Router\\n  function getRouter() public view returns (address router) {\\n    return address(s_router);\\n  }\\n\\n  /// @notice Sets the pool's Router\\n  /// @param newRouter The new Router\\n  function setRouter(\\n    address newRouter\\n  ) public onlyOwner {\\n    if (newRouter == address(0)) revert ZeroAddressNotAllowed();\\n    address oldRouter = address(s_router);\\n    s_router = IRouter(newRouter);\\n\\n    emit RouterUpdated(oldRouter, newRouter);\\n  }\\n\\n  /// @notice Signals which version of the pool interface is supported\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public pure virtual override returns (bool) {\\n    return interfaceId == Pool.CCIP_POOL_V1 || interfaceId == type(IPoolV1).interfaceId\\n      || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  // ================================================================\\n  // \\u2502                         Validation                           \\u2502\\n  // ================================================================\\n\\n  /// @notice Validates the lock or burn input for correctness on\\n  /// - token to be locked or burned\\n  /// - RMN curse status\\n  /// - allowlist status\\n  /// - if the sender is a valid onRamp\\n  /// - rate limit status\\n  /// @param lockOrBurnIn The input to validate.\\n  /// @dev This function should always be called before executing a lock or burn. Not doing so would allow\\n  /// for various exploits.\\n  function _validateLockOrBurn(\\n    Pool.LockOrBurnInV1 calldata lockOrBurnIn\\n  ) internal {\\n    if (!isSupportedToken(lockOrBurnIn.localToken)) revert InvalidToken(lockOrBurnIn.localToken);\\n    if (IRMN(i_rmnProxy).isCursed(bytes16(uint128(lockOrBurnIn.remoteChainSelector)))) revert CursedByRMN();\\n    _checkAllowList(lockOrBurnIn.originalSender);\\n\\n    _onlyOnRamp(lockOrBurnIn.remoteChainSelector);\\n    _consumeOutboundRateLimit(lockOrBurnIn.remoteChainSelector, lockOrBurnIn.amount);\\n  }\\n\\n  /// @notice Validates the release or mint input for correctness on\\n  /// - token to be released or minted\\n  /// - RMN curse status\\n  /// - if the sender is a valid offRamp\\n  /// - if the source pool is valid\\n  /// - rate limit status\\n  /// @param releaseOrMintIn The input to validate.\\n  /// @dev This function should always be called before executing a release or mint. Not doing so would allow\\n  /// for various exploits.\\n  function _validateReleaseOrMint(\\n    Pool.ReleaseOrMintInV1 calldata releaseOrMintIn\\n  ) internal {\\n    if (!isSupportedToken(releaseOrMintIn.localToken)) revert InvalidToken(releaseOrMintIn.localToken);\\n    if (IRMN(i_rmnProxy).isCursed(bytes16(uint128(releaseOrMintIn.remoteChainSelector)))) revert CursedByRMN();\\n    _onlyOffRamp(releaseOrMintIn.remoteChainSelector);\\n\\n    // Validates that the source pool address is configured on this pool.\\n    if (!isRemotePool(releaseOrMintIn.remoteChainSelector, releaseOrMintIn.sourcePoolAddress)) {\\n      revert InvalidSourcePoolAddress(releaseOrMintIn.sourcePoolAddress);\\n    }\\n\\n    _consumeInboundRateLimit(releaseOrMintIn.remoteChainSelector, releaseOrMintIn.amount);\\n  }\\n\\n  // ================================================================\\n  // \\u2502                      Token decimals                          \\u2502\\n  // ================================================================\\n\\n  /// @notice Gets the IERC20 token decimals on the local chain.\\n  function getTokenDecimals() public view virtual returns (uint8 decimals) {\\n    return i_tokenDecimals;\\n  }\\n\\n  function _encodeLocalDecimals() internal view virtual returns (bytes memory) {\\n    return abi.encode(i_tokenDecimals);\\n  }\\n\\n  function _parseRemoteDecimals(\\n    bytes memory sourcePoolData\\n  ) internal view virtual returns (uint8) {\\n    // Fallback to the local token decimals if the source pool data is empty. This allows for backwards compatibility.\\n    if (sourcePoolData.length == 0) {\\n      return i_tokenDecimals;\\n    }\\n    if (sourcePoolData.length != 32) {\\n      revert InvalidRemoteChainDecimals(sourcePoolData);\\n    }\\n    uint256 remoteDecimals = abi.decode(sourcePoolData, (uint256));\\n    if (remoteDecimals > type(uint8).max) {\\n      revert InvalidRemoteChainDecimals(sourcePoolData);\\n    }\\n    return uint8(remoteDecimals);\\n  }\\n\\n  /// @notice Calculates the local amount based on the remote amount and decimals.\\n  /// @param remoteAmount The amount on the remote chain.\\n  /// @param remoteDecimals The decimals of the token on the remote chain.\\n  /// @return The local amount.\\n  /// @dev This function protects against overflows. If there is a transaction that hits the overflow check, it is\\n  /// probably incorrect as that means the amount cannot be represented on this chain. If the local decimals have been\\n  /// wrongly configured, the token issuer could redeploy the pool with the correct decimals and manually re-execute the\\n  /// CCIP tx to fix the issue.\\n  function _calculateLocalAmount(uint256 remoteAmount, uint8 remoteDecimals) internal view virtual returns (uint256) {\\n    if (remoteDecimals == i_tokenDecimals) {\\n      return remoteAmount;\\n    }\\n    if (remoteDecimals > i_tokenDecimals) {\\n      uint8 decimalsDiff = remoteDecimals - i_tokenDecimals;\\n      if (decimalsDiff > 77) {\\n        // This is a safety check to prevent overflow in the next calculation.\\n        revert OverflowDetected(remoteDecimals, i_tokenDecimals, remoteAmount);\\n      }\\n      // Solidity rounds down so there is no risk of minting more tokens than the remote chain sent.\\n      return remoteAmount / (10 ** decimalsDiff);\\n    }\\n\\n    // This is a safety check to prevent overflow in the next calculation.\\n    // More than 77 would never fit in a uint256 and would cause an overflow. We also check if the resulting amount\\n    // would overflow.\\n    uint8 diffDecimals = i_tokenDecimals - remoteDecimals;\\n    if (diffDecimals > 77 || remoteAmount > type(uint256).max / (10 ** diffDecimals)) {\\n      revert OverflowDetected(remoteDecimals, i_tokenDecimals, remoteAmount);\\n    }\\n\\n    return remoteAmount * (10 ** diffDecimals);\\n  }\\n\\n  // ================================================================\\n  // \\u2502                     Chain permissions                        \\u2502\\n  // ================================================================\\n\\n  /// @notice Gets the pool address on the remote chain.\\n  /// @param remoteChainSelector Remote chain selector.\\n  /// @dev To support non-evm chains, this value is encoded into bytes\\n  function getRemotePools(\\n    uint64 remoteChainSelector\\n  ) public view returns (bytes[] memory) {\\n    bytes32[] memory remotePoolHashes = s_remoteChainConfigs[remoteChainSelector].remotePools.values();\\n\\n    bytes[] memory remotePools = new bytes[](remotePoolHashes.length);\\n    for (uint256 i = 0; i < remotePoolHashes.length; ++i) {\\n      remotePools[i] = s_remotePoolAddresses[remotePoolHashes[i]];\\n    }\\n\\n    return remotePools;\\n  }\\n\\n  /// @notice Checks if the pool address is configured on the remote chain.\\n  /// @param remoteChainSelector Remote chain selector.\\n  /// @param remotePoolAddress The address of the remote pool.\\n  function isRemotePool(uint64 remoteChainSelector, bytes calldata remotePoolAddress) public view returns (bool) {\\n    return s_remoteChainConfigs[remoteChainSelector].remotePools.contains(keccak256(remotePoolAddress));\\n  }\\n\\n  /// @notice Gets the token address on the remote chain.\\n  /// @param remoteChainSelector Remote chain selector.\\n  /// @dev To support non-evm chains, this value is encoded into bytes\\n  function getRemoteToken(\\n    uint64 remoteChainSelector\\n  ) public view returns (bytes memory) {\\n    return s_remoteChainConfigs[remoteChainSelector].remoteTokenAddress;\\n  }\\n\\n  /// @notice Adds a remote pool for a given chain selector. This could be due to a pool being upgraded on the remote\\n  /// chain. We don't simply want to replace the old pool as there could still be valid inflight messages from the old\\n  /// pool. This function allows for multiple pools to be added for a single chain selector.\\n  /// @param remoteChainSelector The remote chain selector for which the remote pool address is being added.\\n  /// @param remotePoolAddress The address of the new remote pool.\\n  function addRemotePool(uint64 remoteChainSelector, bytes calldata remotePoolAddress) external onlyOwner {\\n    if (!isSupportedChain(remoteChainSelector)) revert NonExistentChain(remoteChainSelector);\\n\\n    _setRemotePool(remoteChainSelector, remotePoolAddress);\\n  }\\n\\n  /// @notice Removes the remote pool address for a given chain selector.\\n  /// @dev All inflight txs from the remote pool will be rejected after it is removed. To ensure no loss of funds, there\\n  /// should be no inflight txs from the given pool.\\n  function removeRemotePool(uint64 remoteChainSelector, bytes calldata remotePoolAddress) external onlyOwner {\\n    if (!isSupportedChain(remoteChainSelector)) revert NonExistentChain(remoteChainSelector);\\n\\n    if (!s_remoteChainConfigs[remoteChainSelector].remotePools.remove(keccak256(remotePoolAddress))) {\\n      revert InvalidRemotePoolForChain(remoteChainSelector, remotePoolAddress);\\n    }\\n\\n    emit RemotePoolRemoved(remoteChainSelector, remotePoolAddress);\\n  }\\n\\n  /// @inheritdoc IPoolV1\\n  function isSupportedChain(\\n    uint64 remoteChainSelector\\n  ) public view returns (bool) {\\n    return s_remoteChainSelectors.contains(remoteChainSelector);\\n  }\\n\\n  /// @notice Get list of allowed chains\\n  /// @return list of chains.\\n  function getSupportedChains() public view returns (uint64[] memory) {\\n    uint256[] memory uint256ChainSelectors = s_remoteChainSelectors.values();\\n    uint64[] memory chainSelectors = new uint64[](uint256ChainSelectors.length);\\n    for (uint256 i = 0; i < uint256ChainSelectors.length; ++i) {\\n      chainSelectors[i] = uint64(uint256ChainSelectors[i]);\\n    }\\n\\n    return chainSelectors;\\n  }\\n\\n  /// @notice Sets the permissions for a list of chains selectors. Actual senders for these chains\\n  /// need to be allowed on the Router to interact with this pool.\\n  /// @param remoteChainSelectorsToRemove A list of chain selectors to remove.\\n  /// @param chainsToAdd A list of chains and their new permission status & rate limits. Rate limits\\n  /// are only used when the chain is being added through `allowed` being true.\\n  /// @dev Only callable by the owner\\n  function applyChainUpdates(\\n    uint64[] calldata remoteChainSelectorsToRemove,\\n    ChainUpdate[] calldata chainsToAdd\\n  ) external virtual onlyOwner {\\n    for (uint256 i = 0; i < remoteChainSelectorsToRemove.length; ++i) {\\n      uint64 remoteChainSelectorToRemove = remoteChainSelectorsToRemove[i];\\n      // If the chain doesn't exist, revert\\n      if (!s_remoteChainSelectors.remove(remoteChainSelectorToRemove)) {\\n        revert NonExistentChain(remoteChainSelectorToRemove);\\n      }\\n\\n      // Remove all remote pool hashes for the chain\\n      bytes32[] memory remotePools = s_remoteChainConfigs[remoteChainSelectorToRemove].remotePools.values();\\n      for (uint256 j = 0; j < remotePools.length; ++j) {\\n        s_remoteChainConfigs[remoteChainSelectorToRemove].remotePools.remove(remotePools[j]);\\n      }\\n\\n      delete s_remoteChainConfigs[remoteChainSelectorToRemove];\\n\\n      emit ChainRemoved(remoteChainSelectorToRemove);\\n    }\\n\\n    for (uint256 i = 0; i < chainsToAdd.length; ++i) {\\n      ChainUpdate memory newChain = chainsToAdd[i];\\n      RateLimiter._validateTokenBucketConfig(newChain.outboundRateLimiterConfig, false);\\n      RateLimiter._validateTokenBucketConfig(newChain.inboundRateLimiterConfig, false);\\n\\n      if (newChain.remoteTokenAddress.length == 0) {\\n        revert ZeroAddressNotAllowed();\\n      }\\n\\n      // If the chain already exists, revert\\n      if (!s_remoteChainSelectors.add(newChain.remoteChainSelector)) {\\n        revert ChainAlreadyExists(newChain.remoteChainSelector);\\n      }\\n\\n      RemoteChainConfig storage remoteChainConfig = s_remoteChainConfigs[newChain.remoteChainSelector];\\n\\n      remoteChainConfig.outboundRateLimiterConfig = RateLimiter.TokenBucket({\\n        rate: newChain.outboundRateLimiterConfig.rate,\\n        capacity: newChain.outboundRateLimiterConfig.capacity,\\n        tokens: newChain.outboundRateLimiterConfig.capacity,\\n        lastUpdated: uint32(block.timestamp),\\n        isEnabled: newChain.outboundRateLimiterConfig.isEnabled\\n      });\\n      remoteChainConfig.inboundRateLimiterConfig = RateLimiter.TokenBucket({\\n        rate: newChain.inboundRateLimiterConfig.rate,\\n        capacity: newChain.inboundRateLimiterConfig.capacity,\\n        tokens: newChain.inboundRateLimiterConfig.capacity,\\n        lastUpdated: uint32(block.timestamp),\\n        isEnabled: newChain.inboundRateLimiterConfig.isEnabled\\n      });\\n      remoteChainConfig.remoteTokenAddress = newChain.remoteTokenAddress;\\n\\n      for (uint256 j = 0; j < newChain.remotePoolAddresses.length; ++j) {\\n        _setRemotePool(newChain.remoteChainSelector, newChain.remotePoolAddresses[j]);\\n      }\\n\\n      emit ChainAdded(\\n        newChain.remoteChainSelector,\\n        newChain.remoteTokenAddress,\\n        newChain.outboundRateLimiterConfig,\\n        newChain.inboundRateLimiterConfig\\n      );\\n    }\\n  }\\n\\n  /// @notice Adds a pool address to the allowed remote token pools for a particular chain.\\n  /// @param remoteChainSelector The remote chain selector for which the remote pool address is being added.\\n  /// @param remotePoolAddress The address of the new remote pool.\\n  function _setRemotePool(uint64 remoteChainSelector, bytes memory remotePoolAddress) internal {\\n    if (remotePoolAddress.length == 0) {\\n      revert ZeroAddressNotAllowed();\\n    }\\n\\n    bytes32 poolHash = keccak256(remotePoolAddress);\\n\\n    // Check if the pool already exists.\\n    if (!s_remoteChainConfigs[remoteChainSelector].remotePools.add(poolHash)) {\\n      revert PoolAlreadyAdded(remoteChainSelector, remotePoolAddress);\\n    }\\n\\n    // Add the pool to the mapping to be able to un-hash it later.\\n    s_remotePoolAddresses[poolHash] = remotePoolAddress;\\n\\n    emit RemotePoolAdded(remoteChainSelector, remotePoolAddress);\\n  }\\n\\n  // ================================================================\\n  // \\u2502                        Rate limiting                         \\u2502\\n  // ================================================================\\n\\n  /// @dev The inbound rate limits should be slightly higher than the outbound rate limits. This is because many chains\\n  /// finalize blocks in batches. CCIP also commits messages in batches: the commit plugin bundles multiple messages in\\n  /// a single merkle root.\\n  /// Imagine the following scenario.\\n  /// - Chain A has an inbound and outbound rate limit of 100 tokens capacity and 1 token per second refill rate.\\n  /// - Chain B has an inbound and outbound rate limit of 100 tokens capacity and 1 token per second refill rate.\\n  ///\\n  /// At time 0:\\n  /// - Chain A sends 100 tokens to Chain B.\\n  /// At time 5:\\n  /// - Chain A sends 5 tokens to Chain B.\\n  /// At time 6:\\n  /// The epoch that contains blocks [0-5] is finalized.\\n  /// Both transactions will be included in the same merkle root and become executable at the same time. This means\\n  /// the token pool on chain B requires a capacity of 105 to successfully execute both messages at the same time.\\n  /// The exact additional capacity required depends on the refill rate and the size of the source chain epochs and the\\n  /// CCIP round time. For simplicity, a 5-10% buffer should be sufficient in most cases.\\n\\n  /// @notice Sets the rate limiter admin address.\\n  /// @dev Only callable by the owner.\\n  /// @param rateLimitAdmin The new rate limiter admin address.\\n  function setRateLimitAdmin(\\n    address rateLimitAdmin\\n  ) external onlyOwner {\\n    s_rateLimitAdmin = rateLimitAdmin;\\n    emit RateLimitAdminSet(rateLimitAdmin);\\n  }\\n\\n  /// @notice Gets the rate limiter admin address.\\n  function getRateLimitAdmin() external view returns (address) {\\n    return s_rateLimitAdmin;\\n  }\\n\\n  /// @notice Consumes outbound rate limiting capacity in this pool\\n  function _consumeOutboundRateLimit(uint64 remoteChainSelector, uint256 amount) internal {\\n    s_remoteChainConfigs[remoteChainSelector].outboundRateLimiterConfig._consume(amount, address(i_token));\\n  }\\n\\n  /// @notice Consumes inbound rate limiting capacity in this pool\\n  function _consumeInboundRateLimit(uint64 remoteChainSelector, uint256 amount) internal {\\n    s_remoteChainConfigs[remoteChainSelector].inboundRateLimiterConfig._consume(amount, address(i_token));\\n  }\\n\\n  /// @notice Gets the token bucket with its values for the block it was requested at.\\n  /// @return The token bucket.\\n  function getCurrentOutboundRateLimiterState(\\n    uint64 remoteChainSelector\\n  ) external view returns (RateLimiter.TokenBucket memory) {\\n    return s_remoteChainConfigs[remoteChainSelector].outboundRateLimiterConfig._currentTokenBucketState();\\n  }\\n\\n  /// @notice Gets the token bucket with its values for the block it was requested at.\\n  /// @return The token bucket.\\n  function getCurrentInboundRateLimiterState(\\n    uint64 remoteChainSelector\\n  ) external view returns (RateLimiter.TokenBucket memory) {\\n    return s_remoteChainConfigs[remoteChainSelector].inboundRateLimiterConfig._currentTokenBucketState();\\n  }\\n\\n  /// @notice Sets multiple chain rate limiter configs.\\n  /// @param remoteChainSelectors The remote chain selector for which the rate limits apply.\\n  /// @param outboundConfigs The new outbound rate limiter config, meaning the onRamp rate limits for the given chain.\\n  /// @param inboundConfigs The new inbound rate limiter config, meaning the offRamp rate limits for the given chain.\\n  function setChainRateLimiterConfigs(\\n    uint64[] calldata remoteChainSelectors,\\n    RateLimiter.Config[] calldata outboundConfigs,\\n    RateLimiter.Config[] calldata inboundConfigs\\n  ) external {\\n    if (msg.sender != s_rateLimitAdmin && msg.sender != owner()) revert Unauthorized(msg.sender);\\n    if (remoteChainSelectors.length != outboundConfigs.length || remoteChainSelectors.length != inboundConfigs.length) {\\n      revert MismatchedArrayLengths();\\n    }\\n\\n    for (uint256 i = 0; i < remoteChainSelectors.length; ++i) {\\n      _setRateLimitConfig(remoteChainSelectors[i], outboundConfigs[i], inboundConfigs[i]);\\n    }\\n  }\\n\\n  /// @notice Sets the chain rate limiter config.\\n  /// @param remoteChainSelector The remote chain selector for which the rate limits apply.\\n  /// @param outboundConfig The new outbound rate limiter config, meaning the onRamp rate limits for the given chain.\\n  /// @param inboundConfig The new inbound rate limiter config, meaning the offRamp rate limits for the given chain.\\n  function setChainRateLimiterConfig(\\n    uint64 remoteChainSelector,\\n    RateLimiter.Config memory outboundConfig,\\n    RateLimiter.Config memory inboundConfig\\n  ) external {\\n    if (msg.sender != s_rateLimitAdmin && msg.sender != owner()) revert Unauthorized(msg.sender);\\n\\n    _setRateLimitConfig(remoteChainSelector, outboundConfig, inboundConfig);\\n  }\\n\\n  function _setRateLimitConfig(\\n    uint64 remoteChainSelector,\\n    RateLimiter.Config memory outboundConfig,\\n    RateLimiter.Config memory inboundConfig\\n  ) internal {\\n    if (!isSupportedChain(remoteChainSelector)) revert NonExistentChain(remoteChainSelector);\\n    RateLimiter._validateTokenBucketConfig(outboundConfig, false);\\n    s_remoteChainConfigs[remoteChainSelector].outboundRateLimiterConfig._setTokenBucketConfig(outboundConfig);\\n    RateLimiter._validateTokenBucketConfig(inboundConfig, false);\\n    s_remoteChainConfigs[remoteChainSelector].inboundRateLimiterConfig._setTokenBucketConfig(inboundConfig);\\n    emit ChainConfigured(remoteChainSelector, outboundConfig, inboundConfig);\\n  }\\n\\n  // ================================================================\\n  // \\u2502                           Access                             \\u2502\\n  // ================================================================\\n\\n  /// @notice Checks whether remote chain selector is configured on this contract, and if the msg.sender\\n  /// is a permissioned onRamp for the given chain on the Router.\\n  function _onlyOnRamp(\\n    uint64 remoteChainSelector\\n  ) internal view {\\n    if (!isSupportedChain(remoteChainSelector)) revert ChainNotAllowed(remoteChainSelector);\\n    if (!(msg.sender == s_router.getOnRamp(remoteChainSelector))) revert CallerIsNotARampOnRouter(msg.sender);\\n  }\\n\\n  /// @notice Checks whether remote chain selector is configured on this contract, and if the msg.sender\\n  /// is a permissioned offRamp for the given chain on the Router.\\n  function _onlyOffRamp(\\n    uint64 remoteChainSelector\\n  ) internal view {\\n    if (!isSupportedChain(remoteChainSelector)) revert ChainNotAllowed(remoteChainSelector);\\n    if (!s_router.isOffRamp(remoteChainSelector, msg.sender)) revert CallerIsNotARampOnRouter(msg.sender);\\n  }\\n\\n  // ================================================================\\n  // \\u2502                          Allowlist                           \\u2502\\n  // ================================================================\\n\\n  function _checkAllowList(\\n    address sender\\n  ) internal view {\\n    if (i_allowlistEnabled) {\\n      if (!s_allowlist.contains(sender)) {\\n        revert SenderNotAllowed(sender);\\n      }\\n    }\\n  }\\n\\n  /// @notice Gets whether the allowlist functionality is enabled.\\n  /// @return true is enabled, false if not.\\n  function getAllowListEnabled() external view returns (bool) {\\n    return i_allowlistEnabled;\\n  }\\n\\n  /// @notice Gets the allowed addresses.\\n  /// @return The allowed addresses.\\n  function getAllowList() external view returns (address[] memory) {\\n    return s_allowlist.values();\\n  }\\n\\n  /// @notice Apply updates to the allow list.\\n  /// @param removes The addresses to be removed.\\n  /// @param adds The addresses to be added.\\n  function applyAllowListUpdates(address[] calldata removes, address[] calldata adds) external onlyOwner {\\n    _applyAllowListUpdates(removes, adds);\\n  }\\n\\n  /// @notice Internal version of applyAllowListUpdates to allow for reuse in the constructor.\\n  function _applyAllowListUpdates(address[] memory removes, address[] memory adds) internal {\\n    if (!i_allowlistEnabled) revert AllowListNotEnabled();\\n\\n    for (uint256 i = 0; i < removes.length; ++i) {\\n      address toRemove = removes[i];\\n      if (s_allowlist.remove(toRemove)) {\\n        emit AllowListRemove(toRemove);\\n      }\\n    }\\n    for (uint256 i = 0; i < adds.length; ++i) {\\n      address toAdd = adds[i];\\n      if (toAdd == address(0)) {\\n        continue;\\n      }\\n      if (s_allowlist.add(toAdd)) {\\n        emit AllowListAdd(toAdd);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40d1bd015250743b42d6460c2ce2200f3a45a6e2baaa11e94d4c84923152d6e1\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @notice A minimal contract that implements 2-step ownership transfer and nothing more. It's made to be minimal\\n/// to reduce the impact of the bytecode size on any contract that inherits from it.\\ncontract Ownable2Step is IOwnable {\\n  /// @notice The pending owner is the address to which ownership may be transferred.\\n  address private s_pendingOwner;\\n  /// @notice The owner is the current owner of the contract.\\n  /// @dev The owner is the second storage variable so any implementing contract could pack other state with it\\n  /// instead of the much less used s_pendingOwner.\\n  address private s_owner;\\n\\n  error OwnerCannotBeZero();\\n  error MustBeProposedOwner();\\n  error CannotTransferToSelf();\\n  error OnlyCallableByOwner();\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    if (newOwner == address(0)) {\\n      revert OwnerCannotBeZero();\\n    }\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address. The new owner needs to call\\n  /// `acceptOwnership` to accept the transfer before any permissions are changed.\\n  /// @param to The address to which ownership will be transferred.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  /// @param to The address to which ownership will be transferred.\\n  function _transferOwnership(address to) private {\\n    if (to == msg.sender) {\\n      revert CannotTransferToSelf();\\n    }\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    if (msg.sender != s_pendingOwner) {\\n      revert MustBeProposedOwner();\\n    }\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    if (msg.sender != s_owner) {\\n      revert OnlyCallableByOwner();\\n    }\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xb1fdd309eb568ed0f36e854a4a360ecf7826b9ea8f2876797fd518b59dc66c67\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/access/Ownable2StepMsgSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {Ownable2Step} from \\\"./Ownable2Step.sol\\\";\\n\\n/// @notice Sets the msg.sender to be the owner of the contract and does not set a pending owner.\\ncontract Ownable2StepMsgSender is Ownable2Step {\\n  constructor() Ownable2Step(msg.sender, address(0)) {}\\n}\\n\",\"keccak256\":\"0x1aeb8111eab08d37341b874d4f1210e81bdb07761d0bf14699a3084c6677fe1b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/interfaces/ITypeAndVersion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITypeAndVersion {\\n  function typeAndVersion() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0xf5827cb463c01d055021684d04f9186391c2d9ac850e0d0819f76140e4fc84ed\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/shared/token/ERC20/IBurnMintERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBurnMintERC20 is IERC20 {\\n  /// @notice Mints new tokens for a given address.\\n  /// @param account The address to mint the new tokens to.\\n  /// @param amount The number of tokens to be minted.\\n  /// @dev this function increases the total supply.\\n  function mint(address account, uint256 amount) external;\\n\\n  /// @notice Burns tokens from the sender.\\n  /// @param amount The number of tokens to be burned.\\n  /// @dev this function decreases the total supply.\\n  function burn(uint256 amount) external;\\n\\n  /// @notice Burns tokens from a given address..\\n  /// @param account The address to burn tokens from.\\n  /// @param amount The number of tokens to be burned.\\n  /// @dev this function decreases the total supply.\\n  function burn(address account, uint256 amount) external;\\n\\n  /// @notice Burns tokens from a given address..\\n  /// @param account The address to burn tokens from.\\n  /// @param amount The number of tokens to be burned.\\n  /// @dev this function decreases the total supply.\\n  function burnFrom(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xbb8f9a00d41bbc516c691a4685c07c291b978fff98d133a50bb4773a6fc2b19f\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x057a2ba732c7946ef55d676e5a7aa0119443cf67c75f404838065a31ddd4877c\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162003da538038062003da58339810160408190526200003591620005a2565b8484848484336000816200005c57604051639b15e16f60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b03848116919091179091558116156200008f576200008f81620001eb565b50506001600160a01b0385161580620000af57506001600160a01b038116155b80620000c257506001600160a01b038216155b15620000e1576040516342bcdf7f60e11b815260040160405180910390fd5b6001600160a01b03808616608081905290831660c0526040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa92505050801562000151575060408051601f3d908101601f191682019092526200014e91810190620006c4565b60015b1562000191578060ff168560ff16146200018f576040516332ad3e0760e11b815260ff80871660048301528216602482015260440160405180910390fd5b505b60ff841660a052600480546001600160a01b0319166001600160a01b038316179055825115801560e052620001db57604080516000815260208101909152620001db908462000265565b5050505050505050505062000730565b336001600160a01b038216036200021557604051636d6c4ee560e11b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b03838116918217835560015460405192939116917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60e05162000286576040516335f4a7b360e01b815260040160405180910390fd5b60005b825181101562000311576000838281518110620002aa57620002aa620006e2565b60209081029190910101519050620002c4600282620003c2565b1562000307576040516001600160a01b03821681527f800671136ab6cfee9fbe5ed1fb7ca417811aca3cf864800d127b927adedf75669060200160405180910390a15b5060010162000289565b5060005b8151811015620003bd576000828281518110620003365762000336620006e2565b6020026020010151905060006001600160a01b0316816001600160a01b031603620003625750620003b4565b6200036f600282620003e2565b15620003b2576040516001600160a01b03821681527f2640d4d76caf8bf478aabfa982fa4e1c4eb71a37f93cd15e80dbc657911546d89060200160405180910390a15b505b60010162000315565b505050565b6000620003d9836001600160a01b038416620003f9565b90505b92915050565b6000620003d9836001600160a01b038416620004fd565b60008181526001830160205260408120548015620004f257600062000420600183620006f8565b85549091506000906200043690600190620006f8565b9050808214620004a25760008660000182815481106200045a576200045a620006e2565b9060005260206000200154905080876000018481548110620004805762000480620006e2565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080620004b657620004b66200071a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050620003dc565b6000915050620003dc565b60008181526001830160205260408120546200054657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620003dc565b506000620003dc565b6001600160a01b03811681146200056557600080fd5b50565b805160ff811681146200057a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b80516200057a816200054f565b600080600080600060a08688031215620005bb57600080fd5b8551620005c8816200054f565b94506020620005d987820162000568565b60408801519095506001600160401b0380821115620005f757600080fd5b818901915089601f8301126200060c57600080fd5b8151818111156200062157620006216200057f565b8060051b604051601f19603f830116810181811085821117156200064957620006496200057f565b60405291825284820192508381018501918c8311156200066857600080fd5b938501935b828510156200069157620006818562000595565b845293850193928501926200066d565b809850505050505050620006a86060870162000595565b9150620006b86080870162000595565b90509295509295909350565b600060208284031215620006d757600080fd5b620003d98262000568565b634e487b7160e01b600052603260045260246000fd5b81810381811115620003dc57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60805160a05160c05160e0516135c4620007e160003960008181610523015281816119f801526122f00152600081816104fd015281816116140152611d240152600081816102d101528181610b2001528181611766015281816117ee0152818161182201528181611855015281816118a1015281816118fa01526119650152600081816102520152818161029a0152818161063c01528181611e4a01528181612189015261244001526135c46000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80639a4575b911610104578063c0d78655116100a2578063dc0bd97111610071578063dc0bd971146104fb578063e0351e1314610521578063e8a1da1714610547578063f2fde38b1461055a57600080fd5b8063c0d78655146104ad578063c4bffe2b146104c0578063c75eea9c146104d5578063cf7401f3146104e857600080fd5b8063acfecf91116100de578063acfecf9114610410578063af58d59f14610423578063b0f479a114610489578063b79465801461049a57600080fd5b80639a4575b9146103bb578063a42a7b8b146103db578063a7cd63b7146103fb57600080fd5b806354c8a4f31161017c5780637d54534e1161014b5780637d54534e146103715780638926f54f146103845780638da5cb5b14610397578063962d4020146103a857600080fd5b806354c8a4f31461033057806362ddd3c4146103455780636d3d1a581461035857806379ba50971461036957600080fd5b8063240028e8116101b8578063240028e81461028a57806324f65ee7146102ca57806339077537146102fb5780634c5ef0ed1461031d57600080fd5b806301ffc9a7146101df578063181f5a771461020757806321df0da714610250575b600080fd5b6101f26101ed366004612910565b61056d565b60405190151581526020015b60405180910390f35b6102436040518060400160405280601781526020017f4275726e4d696e74546f6b656e506f6f6c20312e352e3100000000000000000081525081565b6040516101fe9190612980565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020016101fe565b6101f26102983660046129a8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101fe565b61030e6103093660046129c5565b6105bf565b604051905181526020016101fe565b6101f261032b366004612a1c565b610742565b61034361033e366004612ae9565b61078b565b005b610343610353366004612a1c565b610806565b6009546001600160a01b0316610272565b610343610889565b61034361037f3660046129a8565b61090c565b6101f2610392366004612b54565b610968565b6001546001600160a01b0316610272565b6103436103b6366004612bb3565b61097e565b6103ce6103c9366004612c4c565b610a8c565b6040516101fe9190612c86565b6103ee6103e9366004612b54565b610b65565b6040516101fe9190612cbf565b610403610cce565b6040516101fe9190612d23565b61034361041e366004612a1c565b610cdf565b610436610431366004612b54565b610dc2565b6040516101fe919081516001600160801b03908116825260208084015163ffffffff1690830152604080840151151590830152606080840151821690830152608092830151169181019190915260a00190565b6004546001600160a01b0316610272565b6102436104a8366004612b54565b610e6f565b6103436104bb3660046129a8565b610f1e565b6104c8610fae565b6040516101fe9190612d70565b6104366104e3366004612b54565b611064565b6103436104f6366004612eb4565b61110e565b7f0000000000000000000000000000000000000000000000000000000000000000610272565b7f00000000000000000000000000000000000000000000000000000000000000006101f2565b610343610555366004612ae9565b61115f565b6103436105683660046129a8565b6115aa565b60006001600160e01b0319821663aff2afbf60e01b148061059e57506001600160e01b03198216630e64dd2960e01b145b806105b957506001600160e01b031982166301ffc9a760e01b145b92915050565b6040805160208101909152600081526105d7826115be565b6000610630606084013561062b6105f160c0870187612ef9565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061175892505050565b6117ea565b90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166340c10f1961067160608601604087016129a8565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b1580156106b957600080fd5b505af11580156106cd573d6000803e3d6000fd5b506106e29250505060608401604085016129a8565b6001600160a01b0316336001600160a01b03167f9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f08360405161072691815260200190565b60405180910390a3604080516020810190915290815292915050565b60006107838383604051610757929190612f3f565b60408051918290039091206001600160401b0387166000908152600760205291909120600501906119ae565b949350505050565b6107936119c9565b610800848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284376000920191909152506119f692505050565b50505050565b61080e6119c9565b61081783610968565b61084457604051631e670e4b60e01b81526001600160401b03841660048201526024015b60405180910390fd5b6108848383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b5f92505050565b505050565b6000546001600160a01b031633146108b45760405163015aa1e360e11b815260040160405180910390fd5b600180546001600160a01b0319808216339081179093556000805490911681556040516001600160a01b03909216929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6109146119c9565b600980546001600160a01b0319166001600160a01b0383169081179091556040519081527f44676b5284b809a22248eba0da87391d79098be38bb03154be88a58bf4d091749060200160405180910390a150565b60006105b960056001600160401b0384166119ae565b6009546001600160a01b031633148015906109a457506001546001600160a01b03163314155b156109c45760405163472511eb60e11b815233600482015260240161083b565b84831415806109d35750848114155b156109f157604051632b477e7160e11b815260040160405180910390fd5b60005b85811015610a8357610a7b878783818110610a1157610a11612f4f565b9050602002016020810190610a269190612b54565b868684818110610a3857610a38612f4f565b905060600201803603810190610a4e9190612f65565b858585818110610a6057610a60612f4f565b905060600201803603810190610a769190612f65565b611c25565b6001016109f4565b50505050505050565b6040805180820190915260608082526020820152610aa982611cf3565b610ab68260600135611e34565b6040516060830135815233907f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df79060200160405180910390a26040518060400160405280610b108460200160208101906104a89190612b54565b8152602001610b5d6040805160ff7f000000000000000000000000000000000000000000000000000000000000000016602082015260609101604051602081830303815290604052905090565b905292915050565b6001600160401b038116600090815260076020526040812060609190610b8d90600501611eaa565b9050600081516001600160401b03811115610baa57610baa612db1565b604051908082528060200260200182016040528015610bdd57816020015b6060815260200190600190039081610bc85790505b50905060005b8251811015610cc65760086000848381518110610c0257610c02612f4f565b602002602001015181526020019081526020016000208054610c2390612f81565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4f90612f81565b8015610c9c5780601f10610c7157610100808354040283529160200191610c9c565b820191906000526020600020905b815481529060010190602001808311610c7f57829003601f168201915b5050505050828281518110610cb357610cb3612f4f565b6020908102919091010152600101610be3565b509392505050565b6060610cda6002611eaa565b905090565b610ce76119c9565b610cf083610968565b610d1857604051631e670e4b60e01b81526001600160401b038416600482015260240161083b565b610d578282604051610d2b929190612f3f565b60408051918290039091206001600160401b038616600090815260076020529190912060050190611eb7565b610d7a57828282604051631d3c8f1f60e21b815260040161083b93929190612fe4565b826001600160401b03167f52d00ee4d9bd51b40168f2afc5848837288ce258784ad914278791464b3f4d768383604051610db5929190613007565b60405180910390a2505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526001600160401b038216600090815260076020908152604091829020825160a08101845260028201546001600160801b038082168352600160801b80830463ffffffff1695840195909552600160a01b90910460ff1615159482019490945260039091015480841660608301529190910490911660808201526105b990611ec3565b6001600160401b0381166000908152600760205260409020600401805460609190610e9990612f81565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec590612f81565b8015610f125780601f10610ee757610100808354040283529160200191610f12565b820191906000526020600020905b815481529060010190602001808311610ef557829003601f168201915b50505050509050919050565b610f266119c9565b6001600160a01b038116610f4d576040516342bcdf7f60e11b815260040160405180910390fd5b600480546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f02dc5c233404867c793b749c6d644beb2277536d18a7e7974d3f238e4c6f1684910160405180910390a15050565b60606000610fbc6005611eaa565b9050600081516001600160401b03811115610fd957610fd9612db1565b604051908082528060200260200182016040528015611002578160200160208202803683370190505b50905060005b825181101561105d5782818151811061102357611023612f4f565b602002602001015182828151811061103d5761103d612f4f565b6001600160401b0390921660209283029190910190910152600101611008565b5092915050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526001600160401b038216600090815260076020908152604091829020825160a08101845281546001600160801b038082168352600160801b80830463ffffffff1695840195909552600160a01b90910460ff1615159482019490945260019091015480841660608301529190910490911660808201526105b990611ec3565b6009546001600160a01b0316331480159061113457506001546001600160a01b03163314155b156111545760405163472511eb60e11b815233600482015260240161083b565b610884838383611c25565b6111676119c9565b60005b8381101561131c57600085858381811061118657611186612f4f565b905060200201602081019061119b9190612b54565b90506111b160056001600160401b038316611eb7565b6111d957604051631e670e4b60e01b81526001600160401b038216600482015260240161083b565b6001600160401b03811660009081526007602052604081206111fd90600501611eaa565b905060005b81518110156112675761125e82828151811061122057611220612f4f565b602002602001015160076000866001600160401b03166001600160401b03168152602001908152602001600020600501611eb790919063ffffffff16565b50600101611202565b506001600160401b038216600090815260076020526040812080546001600160a81b0319908116825560018201839055600282018054909116905560038101829055906112b760048301826128a3565b60058201600081816112c982826128dd565b50506040516001600160401b03871681527f5204aec90a3c794d8e90fded8b46ae9c7c552803e7e832e0c1d358396d8599169450602001925061130a915050565b60405180910390a1505060010161116a565b5060005b818110156115a357600083838381811061133c5761133c612f4f565b905060200281019061134e919061301b565b611357906130ab565b905061136881606001516000611f51565b61137781608001516000611f51565b80604001515160000361139d576040516342bcdf7f60e11b815260040160405180910390fd5b80516113b4906005906001600160401b0316612016565b6113df578051604051631d5ad3c560e01b81526001600160401b03909116600482015260240161083b565b80516001600160401b0316600090815260076020908152604091829020825160a08082018552606080870180518601516001600160801b0390811680865263ffffffff42168689018190528351511515878b0181905284518a0151841686890181905294518b0151841660809889018190528954600160a01b92830260ff60a01b19600160801b8087026001600160a01b031994851690981788178216929092178d5592810290971760018c01558c519889018d52898e0180518d01518716808b528a8e019590955280515115158a8f018190528151909d01518716988a01899052518d0151909516979098018790526002890180549a9091029990931617179094169590951790925590920290911760038201559082015160048201906115079082613221565b5060005b82602001515181101561154b5761154383600001518460200151838151811061153657611536612f4f565b6020026020010151611b5f565b60010161150b565b507f8d340f17e19058004c20453540862a9c62778504476f6756755cb33bcd6c38c28260000151836040015184606001518560800151604051611591949392919061330a565b60405180910390a15050600101611320565b5050505050565b6115b26119c9565b6115bb81612022565b50565b6115d161029860a08301608084016129a8565b61160a576115e560a08201608083016129a8565b60405163961c9a4f60e01b81526001600160a01b03909116600482015260240161083b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016632cbc26bb6116496040840160208501612b54565b60405160e083901b6001600160e01b031916815260809190911b67ffffffffffffffff60801b166004820152602401602060405180830381865afa158015611695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b9919061334a565b156116d757604051630a75a23b60e31b815260040160405180910390fd5b6116ef6116ea6040830160208401612b54565b61209b565b61170f6117026040830160208401612b54565b61032b60a0840184612ef9565b61173b5761172060a0820182612ef9565b6040516324eb47e560e01b815260040161083b929190613007565b6115bb61174e6040830160208401612b54565b8260600135612167565b6000815160000361178a57507f0000000000000000000000000000000000000000000000000000000000000000919050565b81516020146117ae578160405163953576f760e01b815260040161083b9190612980565b6000828060200190518101906117c49190613367565b905060ff8111156105b9578260405163953576f760e01b815260040161083b9190612980565b60007f000000000000000000000000000000000000000000000000000000000000000060ff168260ff16036118205750816105b9565b7f000000000000000000000000000000000000000000000000000000000000000060ff168260ff1611156118f257600061187a7f000000000000000000000000000000000000000000000000000000000000000084613396565b9050604d8160ff1611156118d55760405163a9cb113d60e01b815260ff80851660048301527f00000000000000000000000000000000000000000000000000000000000000001660248201526044810185905260640161083b565b6118e081600a613493565b6118ea90856134a2565b9150506105b9565b600061191e837f0000000000000000000000000000000000000000000000000000000000000000613396565b9050604d8160ff161180611947575061193881600a613493565b611944906000196134a2565b84115b156119995760405163a9cb113d60e01b815260ff80851660048301527f00000000000000000000000000000000000000000000000000000000000000001660248201526044810185905260640161083b565b6119a481600a613493565b61078390856134c4565b600081815260018301602052604081205415155b9392505050565b6001546001600160a01b031633146119f4576040516315ae3a6f60e11b815260040160405180910390fd5b565b7f0000000000000000000000000000000000000000000000000000000000000000611a34576040516335f4a7b360e01b815260040160405180910390fd5b60005b8251811015611abd576000838281518110611a5457611a54612f4f565b60200260200101519050611a728160026121ad90919063ffffffff16565b15611ab4576040516001600160a01b03821681527f800671136ab6cfee9fbe5ed1fb7ca417811aca3cf864800d127b927adedf75669060200160405180910390a15b50600101611a37565b5060005b8151811015610884576000828281518110611ade57611ade612f4f565b6020026020010151905060006001600160a01b0316816001600160a01b031603611b085750611b57565b611b136002826121c2565b15611b55576040516001600160a01b03821681527f2640d4d76caf8bf478aabfa982fa4e1c4eb71a37f93cd15e80dbc657911546d89060200160405180910390a15b505b600101611ac1565b8051600003611b81576040516342bcdf7f60e11b815260040160405180910390fd5b80516020808301919091206001600160401b038416600090815260079092526040909120611bb29060050182612016565b611bd3578282604051631c9dc56960e11b815260040161083b9291906134db565b6000818152600860205260409020611beb8382613221565b50826001600160401b03167f7d628c9a1796743d365ab521a8b2a4686e419b3269919dc9145ea2ce853b54ea83604051610db59190612980565b611c2e83610968565b611c5657604051631e670e4b60e01b81526001600160401b038416600482015260240161083b565b611c61826000611f51565b6001600160401b0383166000908152600760205260409020611c8390836121d7565b611c8e816000611f51565b6001600160401b0383166000908152600760205260409020611cb390600201826121d7565b7f0350d63aa5f270e01729d00d627eeb8f3429772b1818c016c66a588a864f912b838383604051611ce6939291906134fd565b60405180910390a1505050565b611d0661029860a08301608084016129a8565b611d1a576115e560a08201608083016129a8565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016632cbc26bb611d596040840160208501612b54565b60405160e083901b6001600160e01b031916815260809190911b67ffffffffffffffff60801b166004820152602401602060405180830381865afa158015611da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc9919061334a565b15611de757604051630a75a23b60e31b815260040160405180910390fd5b611dff611dfa60608301604084016129a8565b6122ee565b611e17611e126040830160208401612b54565b612347565b6115bb611e2a6040830160208401612b54565b8260600135612421565b604051630852cd8d60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b158015611e9657600080fd5b505af11580156115a3573d6000803e3d6000fd5b606060006119c283612464565b60006119c283836124bf565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152611f3682606001516001600160801b031683600001516001600160801b0316846020015163ffffffff1642611f239190613527565b85608001516001600160801b03166125b2565b6001600160801b031682525063ffffffff4216602082015290565b815115611fcf5781602001516001600160801b031682604001516001600160801b0316101580611f8c575060408201516001600160801b0316155b15611fac5781604051632008344960e21b815260040161083b919061353a565b8015611fcb5760405163433fc33d60e01b815260040160405180910390fd5b5050565b60408201516001600160801b0316151580611ff6575060208201516001600160801b031615155b15611fcb57816040516335a2be7360e21b815260040161083b919061353a565b60006119c283836125da565b336001600160a01b0382160361204b57604051636d6c4ee560e11b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b03838116918217835560015460405192939116917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6120a481610968565b6120cc576040516354c8163f60e11b81526001600160401b038216600482015260240161083b565b600480546040516383826b2b60e01b81526001600160401b038416928101929092523360248301526001600160a01b0316906383826b2b90604401602060405180830381865afa158015612124573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612148919061334a565b6115bb5760405163728fe07b60e01b815233600482015260240161083b565b6001600160401b0382166000908152600760205260409020611fcb90600201827f0000000000000000000000000000000000000000000000000000000000000000612629565b60006119c2836001600160a01b0384166124bf565b60006119c2836001600160a01b0384166125da565b81546000906121f390600160801b900463ffffffff1642613527565b905080156122515760018301548354612225916001600160801b03808216928116918591600160801b909104166125b2565b83546001600160801b03919091166001600160a01b031990911617600160801b4263ffffffff16021783555b6020820151835461226e916001600160801b03908116911661286b565b835483511515600160a01b0274ff00000000ffffffffffffffffffffffffffffffff199091166001600160801b039283161717845560208301516040808501518316600160801b0291909216176001850155517f9ea3374b67bf275e6bb9c8ae68f9cae023e1c528b4b27e092f0bb209d3531c1990611ce690849061353a565b7f0000000000000000000000000000000000000000000000000000000000000000156115bb5761231f600282612881565b6115bb576040516368692cbb60e11b81526001600160a01b038216600482015260240161083b565b61235081610968565b612378576040516354c8163f60e11b81526001600160401b038216600482015260240161083b565b6004805460405163a8d87a3b60e01b81526001600160401b038416928101929092526001600160a01b03169063a8d87a3b90602401602060405180830381865afa1580156123ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ee9190613548565b6001600160a01b0316336001600160a01b0316146115bb5760405163728fe07b60e01b815233600482015260240161083b565b6001600160401b0382166000908152600760205260409020611fcb90827f0000000000000000000000000000000000000000000000000000000000000000612629565b606081600001805480602002602001604051908101604052809291908181526020018280548015610f1257602002820191906000526020600020905b8154815260200190600101908083116124a05750505050509050919050565b600081815260018301602052604081205480156125a85760006124e3600183613527565b85549091506000906124f790600190613527565b905080821461255c57600086600001828154811061251757612517612f4f565b906000526020600020015490508087600001848154811061253a5761253a612f4f565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061256d5761256d613565565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105b9565b60009150506105b9565b60006125d1856125c284866134c4565b6125cc908761357b565b61286b565b95945050505050565b6000818152600183016020526040812054612621575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105b9565b5060006105b9565b8254600160a01b900460ff16158061263f575081155b1561264957505050565b825460018401546001600160801b038083169291169060009061267990600160801b900463ffffffff1642613527565b905080156126e557818311156126a257604051634b92ca1560e11b815260040160405180910390fd5b60018601546126c690839085908490600160801b90046001600160801b03166125b2565b865463ffffffff60801b1916600160801b4263ffffffff160217875592505b84821015612750576001600160a01b03841661271e5760405163f94ebcd160e01b8152600481018390526024810186905260440161083b565b604051630d3b2b9560e11b815260048101839052602481018690526001600160a01b038516604482015260640161083b565b8483101561280157600186810154600160801b90046001600160801b031690600090829061277e9082613527565b612788878a613527565b612792919061357b565b61279c91906134a2565b90506001600160a01b0386166127cf576040516302a4f38160e31b8152600481018290526024810186905260440161083b565b604051636864691d60e11b815260048101829052602481018690526001600160a01b038716604482015260640161083b565b61280b8584613527565b86546fffffffffffffffffffffffffffffffff19166001600160801b0382161787556040518681529093507f1871cdf8010e63f2eb8384381a68dfa7416dc571a5517e66e88b2d2d0c0a690a9060200160405180910390a1505050505050565b600081831061287a57816119c2565b5090919050565b6001600160a01b038116600090815260018301602052604081205415156119c2565b5080546128af90612f81565b6000825580601f106128bf575050565b601f0160209004906000526020600020908101906115bb91906128f7565b50805460008255906000526020600020908101906115bb91905b5b8082111561290c57600081556001016128f8565b5090565b60006020828403121561292257600080fd5b81356001600160e01b0319811681146119c257600080fd5b6000815180845260005b8181101561296057602081850181015186830182015201612944565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006119c2602083018461293a565b6001600160a01b03811681146115bb57600080fd5b6000602082840312156129ba57600080fd5b81356119c281612993565b6000602082840312156129d757600080fd5b81356001600160401b038111156129ed57600080fd5b820161010081850312156119c257600080fd5b80356001600160401b0381168114612a1757600080fd5b919050565b600080600060408486031215612a3157600080fd5b612a3a84612a00565b925060208401356001600160401b0380821115612a5657600080fd5b818601915086601f830112612a6a57600080fd5b813581811115612a7957600080fd5b876020828501011115612a8b57600080fd5b6020830194508093505050509250925092565b60008083601f840112612ab057600080fd5b5081356001600160401b03811115612ac757600080fd5b6020830191508360208260051b8501011115612ae257600080fd5b9250929050565b60008060008060408587031215612aff57600080fd5b84356001600160401b0380821115612b1657600080fd5b612b2288838901612a9e565b90965094506020870135915080821115612b3b57600080fd5b50612b4887828801612a9e565b95989497509550505050565b600060208284031215612b6657600080fd5b6119c282612a00565b60008083601f840112612b8157600080fd5b5081356001600160401b03811115612b9857600080fd5b602083019150836020606083028501011115612ae257600080fd5b60008060008060008060608789031215612bcc57600080fd5b86356001600160401b0380821115612be357600080fd5b612bef8a838b01612a9e565b90985096506020890135915080821115612c0857600080fd5b612c148a838b01612b6f565b90965094506040890135915080821115612c2d57600080fd5b50612c3a89828a01612b6f565b979a9699509497509295939492505050565b600060208284031215612c5e57600080fd5b81356001600160401b03811115612c7457600080fd5b820160a081850312156119c257600080fd5b602081526000825160406020840152612ca2606084018261293a565b90506020840151601f198483030160408501526125d1828261293a565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015612d1657603f19888603018452612d0485835161293a565b94509285019290850190600101612ce8565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612d645783516001600160a01b031683529284019291840191600101612d3f565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612d645783516001600160401b031683529284019291840191600101612d8c565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715612de957612de9612db1565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612e1757612e17612db1565b604052919050565b80151581146115bb57600080fd5b80356001600160801b0381168114612a1757600080fd5b600060608284031215612e5657600080fd5b604051606081018181106001600160401b0382111715612e7857612e78612db1565b6040529050808235612e8981612e1f565b8152612e9760208401612e2d565b6020820152612ea860408401612e2d565b60408201525092915050565b600080600060e08486031215612ec957600080fd5b612ed284612a00565b9250612ee18560208601612e44565b9150612ef08560808601612e44565b90509250925092565b6000808335601e19843603018112612f1057600080fd5b8301803591506001600160401b03821115612f2a57600080fd5b602001915036819003821315612ae257600080fd5b8183823760009101908152919050565b634e487b7160e01b600052603260045260246000fd5b600060608284031215612f7757600080fd5b6119c28383612e44565b600181811c90821680612f9557607f821691505b602082108103612fb557634e487b7160e01b600052602260045260246000fd5b50919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160401b03841681526040602082015260006125d1604083018486612fbb565b602081526000610783602083018486612fbb565b6000823561011e1983360301811261303257600080fd5b9190910192915050565b600082601f83011261304d57600080fd5b81356001600160401b0381111561306657613066612db1565b613079601f8201601f1916602001612def565b81815284602083860101111561308e57600080fd5b816020850160208301376000918101602001919091529392505050565b600061012082360312156130be57600080fd5b6130c6612dc7565b6130cf83612a00565b81526020808401356001600160401b03808211156130ec57600080fd5b9085019036601f8301126130ff57600080fd5b81358181111561311157613111612db1565b8060051b613120858201612def565b918252838101850191858101903684111561313a57600080fd5b86860192505b83831015613176578235858111156131585760008081fd5b6131663689838a010161303c565b8352509186019190860190613140565b808789015250505050604086013592508083111561319357600080fd5b50506131a13682860161303c565b6040830152506131b43660608501612e44565b60608201526131c63660c08501612e44565b608082015292915050565b601f821115610884576000816000526020600020601f850160051c810160208610156131fa5750805b601f850160051c820191505b8181101561321957828155600101613206565b505050505050565b81516001600160401b0381111561323a5761323a612db1565b61324e816132488454612f81565b846131d1565b602080601f831160018114613283576000841561326b5750858301515b600019600386901b1c1916600185901b178555613219565b600085815260208120601f198616915b828110156132b257888601518255948401946001909101908401613293565b50858210156132d05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8051151582526020808201516001600160801b039081169184019190915260409182015116910152565b60006101006001600160401b038716835280602084015261332d8184018761293a565b91505061333d60408301856132e0565b6125d160a08301846132e0565b60006020828403121561335c57600080fd5b81516119c281612e1f565b60006020828403121561337957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156105b9576105b9613380565b600181815b808511156133ea5781600019048211156133d0576133d0613380565b808516156133dd57918102915b93841c93908002906133b4565b509250929050565b600082613401575060016105b9565b8161340e575060006105b9565b8160018114613424576002811461342e5761344a565b60019150506105b9565b60ff84111561343f5761343f613380565b50506001821b6105b9565b5060208310610133831016604e8410600b841016171561346d575081810a6105b9565b61347783836133af565b806000190482111561348b5761348b613380565b029392505050565b60006119c260ff8416836133f2565b6000826134bf57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176105b9576105b9613380565b6001600160401b0383168152604060208201526000610783604083018461293a565b6001600160401b038416815260e0810161351a60208301856132e0565b61078360808301846132e0565b818103818111156105b9576105b9613380565b606081016105b982846132e0565b60006020828403121561355a57600080fd5b81516119c281612993565b634e487b7160e01b600052603160045260246000fd5b808201808211156105b9576105b961338056fea2646970667358221220d78ff95b8ff7c2f8ee3267c68cb3ea4058181820a6aa44dfa090e5ff6c6de89864736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80639a4575b911610104578063c0d78655116100a2578063dc0bd97111610071578063dc0bd971146104fb578063e0351e1314610521578063e8a1da1714610547578063f2fde38b1461055a57600080fd5b8063c0d78655146104ad578063c4bffe2b146104c0578063c75eea9c146104d5578063cf7401f3146104e857600080fd5b8063acfecf91116100de578063acfecf9114610410578063af58d59f14610423578063b0f479a114610489578063b79465801461049a57600080fd5b80639a4575b9146103bb578063a42a7b8b146103db578063a7cd63b7146103fb57600080fd5b806354c8a4f31161017c5780637d54534e1161014b5780637d54534e146103715780638926f54f146103845780638da5cb5b14610397578063962d4020146103a857600080fd5b806354c8a4f31461033057806362ddd3c4146103455780636d3d1a581461035857806379ba50971461036957600080fd5b8063240028e8116101b8578063240028e81461028a57806324f65ee7146102ca57806339077537146102fb5780634c5ef0ed1461031d57600080fd5b806301ffc9a7146101df578063181f5a771461020757806321df0da714610250575b600080fd5b6101f26101ed366004612910565b61056d565b60405190151581526020015b60405180910390f35b6102436040518060400160405280601781526020017f4275726e4d696e74546f6b656e506f6f6c20312e352e3100000000000000000081525081565b6040516101fe9190612980565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020016101fe565b6101f26102983660046129a8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016101fe565b61030e6103093660046129c5565b6105bf565b604051905181526020016101fe565b6101f261032b366004612a1c565b610742565b61034361033e366004612ae9565b61078b565b005b610343610353366004612a1c565b610806565b6009546001600160a01b0316610272565b610343610889565b61034361037f3660046129a8565b61090c565b6101f2610392366004612b54565b610968565b6001546001600160a01b0316610272565b6103436103b6366004612bb3565b61097e565b6103ce6103c9366004612c4c565b610a8c565b6040516101fe9190612c86565b6103ee6103e9366004612b54565b610b65565b6040516101fe9190612cbf565b610403610cce565b6040516101fe9190612d23565b61034361041e366004612a1c565b610cdf565b610436610431366004612b54565b610dc2565b6040516101fe919081516001600160801b03908116825260208084015163ffffffff1690830152604080840151151590830152606080840151821690830152608092830151169181019190915260a00190565b6004546001600160a01b0316610272565b6102436104a8366004612b54565b610e6f565b6103436104bb3660046129a8565b610f1e565b6104c8610fae565b6040516101fe9190612d70565b6104366104e3366004612b54565b611064565b6103436104f6366004612eb4565b61110e565b7f0000000000000000000000000000000000000000000000000000000000000000610272565b7f00000000000000000000000000000000000000000000000000000000000000006101f2565b610343610555366004612ae9565b61115f565b6103436105683660046129a8565b6115aa565b60006001600160e01b0319821663aff2afbf60e01b148061059e57506001600160e01b03198216630e64dd2960e01b145b806105b957506001600160e01b031982166301ffc9a760e01b145b92915050565b6040805160208101909152600081526105d7826115be565b6000610630606084013561062b6105f160c0870187612ef9565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061175892505050565b6117ea565b90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166340c10f1961067160608601604087016129a8565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b1580156106b957600080fd5b505af11580156106cd573d6000803e3d6000fd5b506106e29250505060608401604085016129a8565b6001600160a01b0316336001600160a01b03167f9d228d69b5fdb8d273a2336f8fb8612d039631024ea9bf09c424a9503aa078f08360405161072691815260200190565b60405180910390a3604080516020810190915290815292915050565b60006107838383604051610757929190612f3f565b60408051918290039091206001600160401b0387166000908152600760205291909120600501906119ae565b949350505050565b6107936119c9565b610800848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284376000920191909152506119f692505050565b50505050565b61080e6119c9565b61081783610968565b61084457604051631e670e4b60e01b81526001600160401b03841660048201526024015b60405180910390fd5b6108848383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611b5f92505050565b505050565b6000546001600160a01b031633146108b45760405163015aa1e360e11b815260040160405180910390fd5b600180546001600160a01b0319808216339081179093556000805490911681556040516001600160a01b03909216929183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6109146119c9565b600980546001600160a01b0319166001600160a01b0383169081179091556040519081527f44676b5284b809a22248eba0da87391d79098be38bb03154be88a58bf4d091749060200160405180910390a150565b60006105b960056001600160401b0384166119ae565b6009546001600160a01b031633148015906109a457506001546001600160a01b03163314155b156109c45760405163472511eb60e11b815233600482015260240161083b565b84831415806109d35750848114155b156109f157604051632b477e7160e11b815260040160405180910390fd5b60005b85811015610a8357610a7b878783818110610a1157610a11612f4f565b9050602002016020810190610a269190612b54565b868684818110610a3857610a38612f4f565b905060600201803603810190610a4e9190612f65565b858585818110610a6057610a60612f4f565b905060600201803603810190610a769190612f65565b611c25565b6001016109f4565b50505050505050565b6040805180820190915260608082526020820152610aa982611cf3565b610ab68260600135611e34565b6040516060830135815233907f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df79060200160405180910390a26040518060400160405280610b108460200160208101906104a89190612b54565b8152602001610b5d6040805160ff7f000000000000000000000000000000000000000000000000000000000000000016602082015260609101604051602081830303815290604052905090565b905292915050565b6001600160401b038116600090815260076020526040812060609190610b8d90600501611eaa565b9050600081516001600160401b03811115610baa57610baa612db1565b604051908082528060200260200182016040528015610bdd57816020015b6060815260200190600190039081610bc85790505b50905060005b8251811015610cc65760086000848381518110610c0257610c02612f4f565b602002602001015181526020019081526020016000208054610c2390612f81565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4f90612f81565b8015610c9c5780601f10610c7157610100808354040283529160200191610c9c565b820191906000526020600020905b815481529060010190602001808311610c7f57829003601f168201915b5050505050828281518110610cb357610cb3612f4f565b6020908102919091010152600101610be3565b509392505050565b6060610cda6002611eaa565b905090565b610ce76119c9565b610cf083610968565b610d1857604051631e670e4b60e01b81526001600160401b038416600482015260240161083b565b610d578282604051610d2b929190612f3f565b60408051918290039091206001600160401b038616600090815260076020529190912060050190611eb7565b610d7a57828282604051631d3c8f1f60e21b815260040161083b93929190612fe4565b826001600160401b03167f52d00ee4d9bd51b40168f2afc5848837288ce258784ad914278791464b3f4d768383604051610db5929190613007565b60405180910390a2505050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526001600160401b038216600090815260076020908152604091829020825160a08101845260028201546001600160801b038082168352600160801b80830463ffffffff1695840195909552600160a01b90910460ff1615159482019490945260039091015480841660608301529190910490911660808201526105b990611ec3565b6001600160401b0381166000908152600760205260409020600401805460609190610e9990612f81565b80601f0160208091040260200160405190810160405280929190818152602001828054610ec590612f81565b8015610f125780601f10610ee757610100808354040283529160200191610f12565b820191906000526020600020905b815481529060010190602001808311610ef557829003601f168201915b50505050509050919050565b610f266119c9565b6001600160a01b038116610f4d576040516342bcdf7f60e11b815260040160405180910390fd5b600480546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f02dc5c233404867c793b749c6d644beb2277536d18a7e7974d3f238e4c6f1684910160405180910390a15050565b60606000610fbc6005611eaa565b9050600081516001600160401b03811115610fd957610fd9612db1565b604051908082528060200260200182016040528015611002578160200160208202803683370190505b50905060005b825181101561105d5782818151811061102357611023612f4f565b602002602001015182828151811061103d5761103d612f4f565b6001600160401b0390921660209283029190910190910152600101611008565b5092915050565b6040805160a0810182526000808252602082018190529181018290526060810182905260808101919091526001600160401b038216600090815260076020908152604091829020825160a08101845281546001600160801b038082168352600160801b80830463ffffffff1695840195909552600160a01b90910460ff1615159482019490945260019091015480841660608301529190910490911660808201526105b990611ec3565b6009546001600160a01b0316331480159061113457506001546001600160a01b03163314155b156111545760405163472511eb60e11b815233600482015260240161083b565b610884838383611c25565b6111676119c9565b60005b8381101561131c57600085858381811061118657611186612f4f565b905060200201602081019061119b9190612b54565b90506111b160056001600160401b038316611eb7565b6111d957604051631e670e4b60e01b81526001600160401b038216600482015260240161083b565b6001600160401b03811660009081526007602052604081206111fd90600501611eaa565b905060005b81518110156112675761125e82828151811061122057611220612f4f565b602002602001015160076000866001600160401b03166001600160401b03168152602001908152602001600020600501611eb790919063ffffffff16565b50600101611202565b506001600160401b038216600090815260076020526040812080546001600160a81b0319908116825560018201839055600282018054909116905560038101829055906112b760048301826128a3565b60058201600081816112c982826128dd565b50506040516001600160401b03871681527f5204aec90a3c794d8e90fded8b46ae9c7c552803e7e832e0c1d358396d8599169450602001925061130a915050565b60405180910390a1505060010161116a565b5060005b818110156115a357600083838381811061133c5761133c612f4f565b905060200281019061134e919061301b565b611357906130ab565b905061136881606001516000611f51565b61137781608001516000611f51565b80604001515160000361139d576040516342bcdf7f60e11b815260040160405180910390fd5b80516113b4906005906001600160401b0316612016565b6113df578051604051631d5ad3c560e01b81526001600160401b03909116600482015260240161083b565b80516001600160401b0316600090815260076020908152604091829020825160a08082018552606080870180518601516001600160801b0390811680865263ffffffff42168689018190528351511515878b0181905284518a0151841686890181905294518b0151841660809889018190528954600160a01b92830260ff60a01b19600160801b8087026001600160a01b031994851690981788178216929092178d5592810290971760018c01558c519889018d52898e0180518d01518716808b528a8e019590955280515115158a8f018190528151909d01518716988a01899052518d0151909516979098018790526002890180549a9091029990931617179094169590951790925590920290911760038201559082015160048201906115079082613221565b5060005b82602001515181101561154b5761154383600001518460200151838151811061153657611536612f4f565b6020026020010151611b5f565b60010161150b565b507f8d340f17e19058004c20453540862a9c62778504476f6756755cb33bcd6c38c28260000151836040015184606001518560800151604051611591949392919061330a565b60405180910390a15050600101611320565b5050505050565b6115b26119c9565b6115bb81612022565b50565b6115d161029860a08301608084016129a8565b61160a576115e560a08201608083016129a8565b60405163961c9a4f60e01b81526001600160a01b03909116600482015260240161083b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016632cbc26bb6116496040840160208501612b54565b60405160e083901b6001600160e01b031916815260809190911b67ffffffffffffffff60801b166004820152602401602060405180830381865afa158015611695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116b9919061334a565b156116d757604051630a75a23b60e31b815260040160405180910390fd5b6116ef6116ea6040830160208401612b54565b61209b565b61170f6117026040830160208401612b54565b61032b60a0840184612ef9565b61173b5761172060a0820182612ef9565b6040516324eb47e560e01b815260040161083b929190613007565b6115bb61174e6040830160208401612b54565b8260600135612167565b6000815160000361178a57507f0000000000000000000000000000000000000000000000000000000000000000919050565b81516020146117ae578160405163953576f760e01b815260040161083b9190612980565b6000828060200190518101906117c49190613367565b905060ff8111156105b9578260405163953576f760e01b815260040161083b9190612980565b60007f000000000000000000000000000000000000000000000000000000000000000060ff168260ff16036118205750816105b9565b7f000000000000000000000000000000000000000000000000000000000000000060ff168260ff1611156118f257600061187a7f000000000000000000000000000000000000000000000000000000000000000084613396565b9050604d8160ff1611156118d55760405163a9cb113d60e01b815260ff80851660048301527f00000000000000000000000000000000000000000000000000000000000000001660248201526044810185905260640161083b565b6118e081600a613493565b6118ea90856134a2565b9150506105b9565b600061191e837f0000000000000000000000000000000000000000000000000000000000000000613396565b9050604d8160ff161180611947575061193881600a613493565b611944906000196134a2565b84115b156119995760405163a9cb113d60e01b815260ff80851660048301527f00000000000000000000000000000000000000000000000000000000000000001660248201526044810185905260640161083b565b6119a481600a613493565b61078390856134c4565b600081815260018301602052604081205415155b9392505050565b6001546001600160a01b031633146119f4576040516315ae3a6f60e11b815260040160405180910390fd5b565b7f0000000000000000000000000000000000000000000000000000000000000000611a34576040516335f4a7b360e01b815260040160405180910390fd5b60005b8251811015611abd576000838281518110611a5457611a54612f4f565b60200260200101519050611a728160026121ad90919063ffffffff16565b15611ab4576040516001600160a01b03821681527f800671136ab6cfee9fbe5ed1fb7ca417811aca3cf864800d127b927adedf75669060200160405180910390a15b50600101611a37565b5060005b8151811015610884576000828281518110611ade57611ade612f4f565b6020026020010151905060006001600160a01b0316816001600160a01b031603611b085750611b57565b611b136002826121c2565b15611b55576040516001600160a01b03821681527f2640d4d76caf8bf478aabfa982fa4e1c4eb71a37f93cd15e80dbc657911546d89060200160405180910390a15b505b600101611ac1565b8051600003611b81576040516342bcdf7f60e11b815260040160405180910390fd5b80516020808301919091206001600160401b038416600090815260079092526040909120611bb29060050182612016565b611bd3578282604051631c9dc56960e11b815260040161083b9291906134db565b6000818152600860205260409020611beb8382613221565b50826001600160401b03167f7d628c9a1796743d365ab521a8b2a4686e419b3269919dc9145ea2ce853b54ea83604051610db59190612980565b611c2e83610968565b611c5657604051631e670e4b60e01b81526001600160401b038416600482015260240161083b565b611c61826000611f51565b6001600160401b0383166000908152600760205260409020611c8390836121d7565b611c8e816000611f51565b6001600160401b0383166000908152600760205260409020611cb390600201826121d7565b7f0350d63aa5f270e01729d00d627eeb8f3429772b1818c016c66a588a864f912b838383604051611ce6939291906134fd565b60405180910390a1505050565b611d0661029860a08301608084016129a8565b611d1a576115e560a08201608083016129a8565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016632cbc26bb611d596040840160208501612b54565b60405160e083901b6001600160e01b031916815260809190911b67ffffffffffffffff60801b166004820152602401602060405180830381865afa158015611da5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc9919061334a565b15611de757604051630a75a23b60e31b815260040160405180910390fd5b611dff611dfa60608301604084016129a8565b6122ee565b611e17611e126040830160208401612b54565b612347565b6115bb611e2a6040830160208401612b54565b8260600135612421565b604051630852cd8d60e31b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b158015611e9657600080fd5b505af11580156115a3573d6000803e3d6000fd5b606060006119c283612464565b60006119c283836124bf565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152611f3682606001516001600160801b031683600001516001600160801b0316846020015163ffffffff1642611f239190613527565b85608001516001600160801b03166125b2565b6001600160801b031682525063ffffffff4216602082015290565b815115611fcf5781602001516001600160801b031682604001516001600160801b0316101580611f8c575060408201516001600160801b0316155b15611fac5781604051632008344960e21b815260040161083b919061353a565b8015611fcb5760405163433fc33d60e01b815260040160405180910390fd5b5050565b60408201516001600160801b0316151580611ff6575060208201516001600160801b031615155b15611fcb57816040516335a2be7360e21b815260040161083b919061353a565b60006119c283836125da565b336001600160a01b0382160361204b57604051636d6c4ee560e11b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b03838116918217835560015460405192939116917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b6120a481610968565b6120cc576040516354c8163f60e11b81526001600160401b038216600482015260240161083b565b600480546040516383826b2b60e01b81526001600160401b038416928101929092523360248301526001600160a01b0316906383826b2b90604401602060405180830381865afa158015612124573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612148919061334a565b6115bb5760405163728fe07b60e01b815233600482015260240161083b565b6001600160401b0382166000908152600760205260409020611fcb90600201827f0000000000000000000000000000000000000000000000000000000000000000612629565b60006119c2836001600160a01b0384166124bf565b60006119c2836001600160a01b0384166125da565b81546000906121f390600160801b900463ffffffff1642613527565b905080156122515760018301548354612225916001600160801b03808216928116918591600160801b909104166125b2565b83546001600160801b03919091166001600160a01b031990911617600160801b4263ffffffff16021783555b6020820151835461226e916001600160801b03908116911661286b565b835483511515600160a01b0274ff00000000ffffffffffffffffffffffffffffffff199091166001600160801b039283161717845560208301516040808501518316600160801b0291909216176001850155517f9ea3374b67bf275e6bb9c8ae68f9cae023e1c528b4b27e092f0bb209d3531c1990611ce690849061353a565b7f0000000000000000000000000000000000000000000000000000000000000000156115bb5761231f600282612881565b6115bb576040516368692cbb60e11b81526001600160a01b038216600482015260240161083b565b61235081610968565b612378576040516354c8163f60e11b81526001600160401b038216600482015260240161083b565b6004805460405163a8d87a3b60e01b81526001600160401b038416928101929092526001600160a01b03169063a8d87a3b90602401602060405180830381865afa1580156123ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ee9190613548565b6001600160a01b0316336001600160a01b0316146115bb5760405163728fe07b60e01b815233600482015260240161083b565b6001600160401b0382166000908152600760205260409020611fcb90827f0000000000000000000000000000000000000000000000000000000000000000612629565b606081600001805480602002602001604051908101604052809291908181526020018280548015610f1257602002820191906000526020600020905b8154815260200190600101908083116124a05750505050509050919050565b600081815260018301602052604081205480156125a85760006124e3600183613527565b85549091506000906124f790600190613527565b905080821461255c57600086600001828154811061251757612517612f4f565b906000526020600020015490508087600001848154811061253a5761253a612f4f565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061256d5761256d613565565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105b9565b60009150506105b9565b60006125d1856125c284866134c4565b6125cc908761357b565b61286b565b95945050505050565b6000818152600183016020526040812054612621575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105b9565b5060006105b9565b8254600160a01b900460ff16158061263f575081155b1561264957505050565b825460018401546001600160801b038083169291169060009061267990600160801b900463ffffffff1642613527565b905080156126e557818311156126a257604051634b92ca1560e11b815260040160405180910390fd5b60018601546126c690839085908490600160801b90046001600160801b03166125b2565b865463ffffffff60801b1916600160801b4263ffffffff160217875592505b84821015612750576001600160a01b03841661271e5760405163f94ebcd160e01b8152600481018390526024810186905260440161083b565b604051630d3b2b9560e11b815260048101839052602481018690526001600160a01b038516604482015260640161083b565b8483101561280157600186810154600160801b90046001600160801b031690600090829061277e9082613527565b612788878a613527565b612792919061357b565b61279c91906134a2565b90506001600160a01b0386166127cf576040516302a4f38160e31b8152600481018290526024810186905260440161083b565b604051636864691d60e11b815260048101829052602481018690526001600160a01b038716604482015260640161083b565b61280b8584613527565b86546fffffffffffffffffffffffffffffffff19166001600160801b0382161787556040518681529093507f1871cdf8010e63f2eb8384381a68dfa7416dc571a5517e66e88b2d2d0c0a690a9060200160405180910390a1505050505050565b600081831061287a57816119c2565b5090919050565b6001600160a01b038116600090815260018301602052604081205415156119c2565b5080546128af90612f81565b6000825580601f106128bf575050565b601f0160209004906000526020600020908101906115bb91906128f7565b50805460008255906000526020600020908101906115bb91905b5b8082111561290c57600081556001016128f8565b5090565b60006020828403121561292257600080fd5b81356001600160e01b0319811681146119c257600080fd5b6000815180845260005b8181101561296057602081850181015186830182015201612944565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006119c2602083018461293a565b6001600160a01b03811681146115bb57600080fd5b6000602082840312156129ba57600080fd5b81356119c281612993565b6000602082840312156129d757600080fd5b81356001600160401b038111156129ed57600080fd5b820161010081850312156119c257600080fd5b80356001600160401b0381168114612a1757600080fd5b919050565b600080600060408486031215612a3157600080fd5b612a3a84612a00565b925060208401356001600160401b0380821115612a5657600080fd5b818601915086601f830112612a6a57600080fd5b813581811115612a7957600080fd5b876020828501011115612a8b57600080fd5b6020830194508093505050509250925092565b60008083601f840112612ab057600080fd5b5081356001600160401b03811115612ac757600080fd5b6020830191508360208260051b8501011115612ae257600080fd5b9250929050565b60008060008060408587031215612aff57600080fd5b84356001600160401b0380821115612b1657600080fd5b612b2288838901612a9e565b90965094506020870135915080821115612b3b57600080fd5b50612b4887828801612a9e565b95989497509550505050565b600060208284031215612b6657600080fd5b6119c282612a00565b60008083601f840112612b8157600080fd5b5081356001600160401b03811115612b9857600080fd5b602083019150836020606083028501011115612ae257600080fd5b60008060008060008060608789031215612bcc57600080fd5b86356001600160401b0380821115612be357600080fd5b612bef8a838b01612a9e565b90985096506020890135915080821115612c0857600080fd5b612c148a838b01612b6f565b90965094506040890135915080821115612c2d57600080fd5b50612c3a89828a01612b6f565b979a9699509497509295939492505050565b600060208284031215612c5e57600080fd5b81356001600160401b03811115612c7457600080fd5b820160a081850312156119c257600080fd5b602081526000825160406020840152612ca2606084018261293a565b90506020840151601f198483030160408501526125d1828261293a565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015612d1657603f19888603018452612d0485835161293a565b94509285019290850190600101612ce8565b5092979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612d645783516001600160a01b031683529284019291840191600101612d3f565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612d645783516001600160401b031683529284019291840191600101612d8c565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715612de957612de9612db1565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612e1757612e17612db1565b604052919050565b80151581146115bb57600080fd5b80356001600160801b0381168114612a1757600080fd5b600060608284031215612e5657600080fd5b604051606081018181106001600160401b0382111715612e7857612e78612db1565b6040529050808235612e8981612e1f565b8152612e9760208401612e2d565b6020820152612ea860408401612e2d565b60408201525092915050565b600080600060e08486031215612ec957600080fd5b612ed284612a00565b9250612ee18560208601612e44565b9150612ef08560808601612e44565b90509250925092565b6000808335601e19843603018112612f1057600080fd5b8301803591506001600160401b03821115612f2a57600080fd5b602001915036819003821315612ae257600080fd5b8183823760009101908152919050565b634e487b7160e01b600052603260045260246000fd5b600060608284031215612f7757600080fd5b6119c28383612e44565b600181811c90821680612f9557607f821691505b602082108103612fb557634e487b7160e01b600052602260045260246000fd5b50919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160401b03841681526040602082015260006125d1604083018486612fbb565b602081526000610783602083018486612fbb565b6000823561011e1983360301811261303257600080fd5b9190910192915050565b600082601f83011261304d57600080fd5b81356001600160401b0381111561306657613066612db1565b613079601f8201601f1916602001612def565b81815284602083860101111561308e57600080fd5b816020850160208301376000918101602001919091529392505050565b600061012082360312156130be57600080fd5b6130c6612dc7565b6130cf83612a00565b81526020808401356001600160401b03808211156130ec57600080fd5b9085019036601f8301126130ff57600080fd5b81358181111561311157613111612db1565b8060051b613120858201612def565b918252838101850191858101903684111561313a57600080fd5b86860192505b83831015613176578235858111156131585760008081fd5b6131663689838a010161303c565b8352509186019190860190613140565b808789015250505050604086013592508083111561319357600080fd5b50506131a13682860161303c565b6040830152506131b43660608501612e44565b60608201526131c63660c08501612e44565b608082015292915050565b601f821115610884576000816000526020600020601f850160051c810160208610156131fa5750805b601f850160051c820191505b8181101561321957828155600101613206565b505050505050565b81516001600160401b0381111561323a5761323a612db1565b61324e816132488454612f81565b846131d1565b602080601f831160018114613283576000841561326b5750858301515b600019600386901b1c1916600185901b178555613219565b600085815260208120601f198616915b828110156132b257888601518255948401946001909101908401613293565b50858210156132d05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8051151582526020808201516001600160801b039081169184019190915260409182015116910152565b60006101006001600160401b038716835280602084015261332d8184018761293a565b91505061333d60408301856132e0565b6125d160a08301846132e0565b60006020828403121561335c57600080fd5b81516119c281612e1f565b60006020828403121561337957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156105b9576105b9613380565b600181815b808511156133ea5781600019048211156133d0576133d0613380565b808516156133dd57918102915b93841c93908002906133b4565b509250929050565b600082613401575060016105b9565b8161340e575060006105b9565b8160018114613424576002811461342e5761344a565b60019150506105b9565b60ff84111561343f5761343f613380565b50506001821b6105b9565b5060208310610133831016604e8410600b841016171561346d575081810a6105b9565b61347783836133af565b806000190482111561348b5761348b613380565b029392505050565b60006119c260ff8416836133f2565b6000826134bf57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176105b9576105b9613380565b6001600160401b0383168152604060208201526000610783604083018461293a565b6001600160401b038416815260e0810161351a60208301856132e0565b61078360808301846132e0565b818103818111156105b9576105b9613380565b606081016105b982846132e0565b60006020828403121561355a57600080fd5b81516119c281612993565b634e487b7160e01b600052603160045260246000fd5b808201808211156105b9576105b961338056fea2646970667358221220d78ff95b8ff7c2f8ee3267c68cb3ea4058181820a6aa44dfa090e5ff6c6de89864736f6c63430008180033",
  "devdoc": {
    "details": "Pool whitelisting mode is set in the constructor and cannot be modified later. It either accepts any address as originalSender, or only accepts whitelisted originalSender. The only way to change whitelisting mode is to deploy a new pool. If that is expected, please make sure the token's burner/minter roles are adjustable.This contract is a variant of BurnMintTokenPool that uses `burn(amount)`.",
    "kind": "dev",
    "methods": {
      "addRemotePool(uint64,bytes)": {
        "params": {
          "remoteChainSelector": "The remote chain selector for which the remote pool address is being added.",
          "remotePoolAddress": "The address of the new remote pool."
        }
      },
      "applyAllowListUpdates(address[],address[])": {
        "params": {
          "adds": "The addresses to be added.",
          "removes": "The addresses to be removed."
        }
      },
      "applyChainUpdates(uint64[],(uint64,bytes[],bytes,(bool,uint128,uint128),(bool,uint128,uint128))[])": {
        "details": "Only callable by the owner",
        "params": {
          "chainsToAdd": "A list of chains and their new permission status & rate limits. Rate limits are only used when the chain is being added through `allowed` being true.",
          "remoteChainSelectorsToRemove": "A list of chain selectors to remove."
        }
      },
      "getAllowList()": {
        "returns": {
          "_0": "The allowed addresses."
        }
      },
      "getAllowListEnabled()": {
        "returns": {
          "_0": "true is enabled, false if not."
        }
      },
      "getCurrentInboundRateLimiterState(uint64)": {
        "returns": {
          "_0": "The token bucket."
        }
      },
      "getCurrentOutboundRateLimiterState(uint64)": {
        "returns": {
          "_0": "The token bucket."
        }
      },
      "getRemotePools(uint64)": {
        "details": "To support non-evm chains, this value is encoded into bytes",
        "params": {
          "remoteChainSelector": "Remote chain selector."
        }
      },
      "getRemoteToken(uint64)": {
        "details": "To support non-evm chains, this value is encoded into bytes",
        "params": {
          "remoteChainSelector": "Remote chain selector."
        }
      },
      "getRmnProxy()": {
        "returns": {
          "rmnProxy": "Address of RMN proxy"
        }
      },
      "getRouter()": {
        "returns": {
          "router": "The pool's Router"
        }
      },
      "getSupportedChains()": {
        "returns": {
          "_0": "list of chains."
        }
      },
      "getToken()": {
        "returns": {
          "token": "The IERC20 token representation."
        }
      },
      "isRemotePool(uint64,bytes)": {
        "params": {
          "remoteChainSelector": "Remote chain selector.",
          "remotePoolAddress": "The address of the remote pool."
        }
      },
      "isSupportedChain(uint64)": {
        "params": {
          "remoteChainSelector": "The selector of the remote chain."
        },
        "returns": {
          "_0": "true if the given chain is a permissioned remote chain."
        }
      },
      "isSupportedToken(address)": {
        "params": {
          "token": "The address of the token."
        },
        "returns": {
          "_0": "true if the token is supported by the pool."
        }
      },
      "lockOrBurn((bytes,uint64,address,uint256,address))": {
        "details": "The _validateLockOrBurn check is an essential security check"
      },
      "releaseOrMint((bytes,uint64,address,uint256,address,bytes,bytes,bytes))": {
        "details": "The _validateReleaseOrMint check is an essential security check"
      },
      "removeRemotePool(uint64,bytes)": {
        "details": "All inflight txs from the remote pool will be rejected after it is removed. To ensure no loss of funds, there should be no inflight txs from the given pool."
      },
      "setChainRateLimiterConfig(uint64,(bool,uint128,uint128),(bool,uint128,uint128))": {
        "params": {
          "inboundConfig": "The new inbound rate limiter config, meaning the offRamp rate limits for the given chain.",
          "outboundConfig": "The new outbound rate limiter config, meaning the onRamp rate limits for the given chain.",
          "remoteChainSelector": "The remote chain selector for which the rate limits apply."
        }
      },
      "setChainRateLimiterConfigs(uint64[],(bool,uint128,uint128)[],(bool,uint128,uint128)[])": {
        "params": {
          "inboundConfigs": "The new inbound rate limiter config, meaning the offRamp rate limits for the given chain.",
          "outboundConfigs": "The new outbound rate limiter config, meaning the onRamp rate limits for the given chain.",
          "remoteChainSelectors": "The remote chain selector for which the rate limits apply."
        }
      },
      "setRateLimitAdmin(address)": {
        "details": "Only callable by the owner.",
        "params": {
          "rateLimitAdmin": "The new rate limiter admin address."
        }
      },
      "setRouter(address)": {
        "params": {
          "newRouter": "The new Router"
        }
      },
      "transferOwnership(address)": {
        "params": {
          "to": "The address to which ownership will be transferred."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "addRemotePool(uint64,bytes)": {
        "notice": "Adds a remote pool for a given chain selector. This could be due to a pool being upgraded on the remote chain. We don't simply want to replace the old pool as there could still be valid inflight messages from the old pool. This function allows for multiple pools to be added for a single chain selector."
      },
      "applyAllowListUpdates(address[],address[])": {
        "notice": "Apply updates to the allow list."
      },
      "applyChainUpdates(uint64[],(uint64,bytes[],bytes,(bool,uint128,uint128),(bool,uint128,uint128))[])": {
        "notice": "Sets the permissions for a list of chains selectors. Actual senders for these chains need to be allowed on the Router to interact with this pool."
      },
      "getAllowList()": {
        "notice": "Gets the allowed addresses."
      },
      "getAllowListEnabled()": {
        "notice": "Gets whether the allowlist functionality is enabled."
      },
      "getCurrentInboundRateLimiterState(uint64)": {
        "notice": "Gets the token bucket with its values for the block it was requested at."
      },
      "getCurrentOutboundRateLimiterState(uint64)": {
        "notice": "Gets the token bucket with its values for the block it was requested at."
      },
      "getRateLimitAdmin()": {
        "notice": "Gets the rate limiter admin address."
      },
      "getRemotePools(uint64)": {
        "notice": "Gets the pool address on the remote chain."
      },
      "getRemoteToken(uint64)": {
        "notice": "Gets the token address on the remote chain."
      },
      "getRmnProxy()": {
        "notice": "Get RMN proxy address"
      },
      "getRouter()": {
        "notice": "Gets the pool's Router"
      },
      "getSupportedChains()": {
        "notice": "Get list of allowed chains"
      },
      "getToken()": {
        "notice": "Gets the IERC20 token that this pool can lock or burn."
      },
      "getTokenDecimals()": {
        "notice": "Gets the IERC20 token decimals on the local chain."
      },
      "isRemotePool(uint64,bytes)": {
        "notice": "Checks if the pool address is configured on the remote chain."
      },
      "isSupportedChain(uint64)": {
        "notice": "Checks whether a remote chain is supported in the token pool."
      },
      "isSupportedToken(address)": {
        "notice": "Returns if the token pool supports the given token."
      },
      "lockOrBurn((bytes,uint64,address,uint256,address))": {
        "notice": "Burn the token in the pool"
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "releaseOrMint((bytes,uint64,address,uint256,address,bytes,bytes,bytes))": {
        "notice": "Mint tokens from the pool to the recipient"
      },
      "removeRemotePool(uint64,bytes)": {
        "notice": "Removes the remote pool address for a given chain selector."
      },
      "setChainRateLimiterConfig(uint64,(bool,uint128,uint128),(bool,uint128,uint128))": {
        "notice": "Sets the chain rate limiter config."
      },
      "setChainRateLimiterConfigs(uint64[],(bool,uint128,uint128)[],(bool,uint128,uint128)[])": {
        "notice": "Sets multiple chain rate limiter configs."
      },
      "setRateLimitAdmin(address)": {
        "notice": "Sets the rate limiter admin address."
      },
      "setRouter(address)": {
        "notice": "Sets the pool's Router"
      },
      "supportsInterface(bytes4)": {
        "notice": "Signals which version of the pool interface is supported"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address. The new owner needs to call `acceptOwnership` to accept the transfer before any permissions are changed."
      }
    },
    "notice": "This pool mints and burns a 3rd-party token.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5125,
        "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5128,
        "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
        "label": "s_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2148,
        "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
        "label": "s_allowlist",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)9099_storage"
      },
      {
        "astId": 2152,
        "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
        "label": "s_router",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IRouter)271"
      },
      {
        "astId": 2156,
        "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
        "label": "s_remoteChainSelectors",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(UintSet)9256_storage"
      },
      {
        "astId": 2161,
        "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
        "label": "s_remoteChainConfigs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint64,t_struct(RemoteChainConfig)2131_storage)"
      },
      {
        "astId": 2166,
        "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
        "label": "s_remotePoolAddresses",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 2169,
        "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
        "label": "s_rateLimitAdmin",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IRouter)271": {
        "encoding": "inplace",
        "label": "contract IRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_struct(RemoteChainConfig)2131_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct TokenPool.RemoteChainConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(RemoteChainConfig)2131_storage"
      },
      "t_struct(AddressSet)9099_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 9098,
            "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8784_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32Set)8978_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 8977,
            "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8784_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RemoteChainConfig)2131_storage": {
        "encoding": "inplace",
        "label": "struct TokenPool.RemoteChainConfig",
        "members": [
          {
            "astId": 2122,
            "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
            "label": "outboundRateLimiterConfig",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(TokenBucket)1349_storage"
          },
          {
            "astId": 2125,
            "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
            "label": "inboundRateLimiterConfig",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(TokenBucket)1349_storage"
          },
          {
            "astId": 2127,
            "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
            "label": "remoteTokenAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes_storage"
          },
          {
            "astId": 2130,
            "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
            "label": "remotePools",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(Bytes32Set)8978_storage"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Set)8784_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 8779,
            "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8783,
            "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenBucket)1349_storage": {
        "encoding": "inplace",
        "label": "struct RateLimiter.TokenBucket",
        "members": [
          {
            "astId": 1340,
            "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
            "label": "tokens",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 1342,
            "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
            "label": "lastUpdated",
            "offset": 16,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1344,
            "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
            "label": "isEnabled",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1346,
            "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
            "label": "capacity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 1348,
            "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
            "label": "rate",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)9256_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 9255,
            "contract": "@chainlink/contracts-ccip/src/v0.8/ccip/pools/BurnMintTokenPool.sol:BurnMintTokenPool",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8784_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}
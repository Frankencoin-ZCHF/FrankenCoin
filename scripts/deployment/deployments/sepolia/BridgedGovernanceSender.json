{
  "address": "0xa6B5a8dBeE81ADFC1144aD90332B36AC5Fcb8035",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Governance",
          "name": "_governance",
          "type": "address"
        },
        {
          "internalType": "contract IRouterClient",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "destinationChainSelector",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "receiver",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "syncedVoters",
          "type": "address[]"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GOVERNANCE",
      "outputs": [
        {
          "internalType": "contract Governance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "contract IRouterClient",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_receiver",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_destinationChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_feeTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_voters",
          "type": "address[]"
        },
        {
          "internalType": "bytes",
          "name": "_extraArgs",
          "type": "bytes"
        }
      ],
      "name": "getCCIPFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_receiver",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_feeTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_voters",
          "type": "address[]"
        },
        {
          "internalType": "bytes",
          "name": "_extraArgs",
          "type": "bytes"
        }
      ],
      "name": "getCCIPMessage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "receiver",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Client.EVMTokenAmount[]",
              "name": "tokenAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "extraArgs",
              "type": "bytes"
            }
          ],
          "internalType": "struct Client.EVM2AnyMessage",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_receiver",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_destinationChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "address[]",
          "name": "_voters",
          "type": "address[]"
        },
        {
          "internalType": "bytes",
          "name": "_extraArgs",
          "type": "bytes"
        }
      ],
      "name": "syncVotesPayNative",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_receiver",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_destinationChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "contract IERC20",
          "name": "_ccipFeeToken",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_voters",
          "type": "address[]"
        },
        {
          "internalType": "bytes",
          "name": "_extraArgs",
          "type": "bytes"
        }
      ],
      "name": "syncVotesPayToken",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "messageId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x83f09e38158ad546d284a66bf76196921bcc7ae6623ac1056d9010e2dec48749",
  "receipt": {
    "to": null,
    "from": "0xD92fE8B91aB9eC967eC4208eac1d4EA625cDFF03",
    "contractAddress": "0xa6B5a8dBeE81ADFC1144aD90332B36AC5Fcb8035",
    "transactionIndex": 183,
    "gasUsed": "1016923",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9827651ffbd91875965383d32bcad0378e8395de8bd242c6303f8d339cefa0d5",
    "transactionHash": "0x83f09e38158ad546d284a66bf76196921bcc7ae6623ac1056d9010e2dec48749",
    "logs": [],
    "blockNumber": 7901744,
    "cumulativeGasUsed": "21913095",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3e94a9aB9fc662eA83e939c0BC801bE1C131853B",
    "0x0BF3dE8c5D3e8A2B34D2BEeB17ABfCeBaf363A59"
  ],
  "numDeployments": 1,
  "solcInputHash": "76d7a9ad677e8057d18143f24edcad6f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Governance\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"contract IRouterClient\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"destinationChainSelector\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"syncedVoters\",\"type\":\"address[]\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GOVERNANCE\",\"outputs\":[{\"internalType\":\"contract Governance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract IRouterClient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_feeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_extraArgs\",\"type\":\"bytes\"}],\"name\":\"getCCIPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_receiver\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_feeTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_extraArgs\",\"type\":\"bytes\"}],\"name\":\"getCCIPMessage\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"tokenAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"internalType\":\"struct Client.EVM2AnyMessage\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_extraArgs\",\"type\":\"bytes\"}],\"name\":\"syncVotesPayNative\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_receiver\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_destinationChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"contract IERC20\",\"name\":\"_ccipFeeToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_extraArgs\",\"type\":\"bytes\"}],\"name\":\"syncVotesPayToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getCCIPFee(bytes,uint64,address,address[],bytes)\":{\"params\":{\"_destinationChainSelector\":\"The selector of the destination chain.\",\"_extraArgs\":\"Extra args for ccip message\",\"_feeTokenAddress\":\"The address of the fee token.\",\"_voters\":\"Collection of addresses which votes and delegation should be synced\"},\"returns\":{\"_0\":\"uint256 The fee required to send the CCIP message.\"}},\"getCCIPMessage(bytes,address,address[],bytes)\":{\"details\":\"Gets the necessary information for voters from governance\",\"params\":{\"_extraArgs\":\"Extra args for ccip message\",\"_feeTokenAddress\":\"Token used to pay the ccip fees\",\"_receiver\":\"Address of the recipient on the destination chain\",\"_voters\":\"Collection of addresses which votes and delegation should be synced\"},\"returns\":{\"_0\":\"Client.EVM2AnyMessage The CCIP message to be sent\"}},\"syncVotesPayNative(bytes,uint64,address[],bytes)\":{\"details\":\"extraArgs for CCIP can be provided such as gasLimit or out-of-order execution\",\"params\":{\"_destinationChainSelector\":\"Chain selector of the destination chain\",\"_extraArgs\":\"Extra args for ccip message\",\"_receiver\":\"Address of the recipient on the destination chain\",\"_voters\":\"Collection of addresses which votes and delegation should be synced\"},\"returns\":{\"messageId\":\"bytes32 MessageID of the sent message\"}},\"syncVotesPayToken(bytes,uint64,address,address[],bytes)\":{\"details\":\"extraArgs for CCIP can be provided such as gasLimit or out-of-order execution\",\"params\":{\"_ccipFeeToken\":\"Token used to pay the ccip fees\",\"_destinationChainSelector\":\"Chain selector of the destination chain\",\"_extraArgs\":\"Extra args for ccip message\",\"_receiver\":\"Address of the recipient on the destination chain\",\"_voters\":\"Collection of addresses which votes and delegation should be synced\"},\"returns\":{\"messageId\":\"bytes32 MessageID of the sent message\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCCIPFee(bytes,uint64,address,address[],bytes)\":{\"notice\":\"Get the fee required to send a CCIP message.\"},\"getCCIPMessage(bytes,address,address[],bytes)\":{\"notice\":\"Gathers necessary information and builds the CCIP message to be sent\"},\"syncVotesPayNative(bytes,uint64,address[],bytes)\":{\"notice\":\"Sync governance votes to destination paying with native token\"},\"syncVotesPayToken(bytes,uint64,address,address[],bytes)\":{\"notice\":\"Sync governance votes to destination paying with ERC20 token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/equity/BridgedGovernanceSender.sol\":\"BridgedGovernanceSender\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param destChainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(\\n    uint64 destChainSelector\\n  ) external view returns (bool supported);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1f1402f2a1735a827db4951b6bbb53eeb582ecfe03988e55eeb335858f346e67\",\"license\":\"MIT\"},\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV2)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(\\n    EVMExtraArgsV1 memory extraArgs\\n  ) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV2\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V2_TAG = 0x181dcf10;\\n\\n  /// @param gasLimit: gas limit for the callback on the destination chain.\\n  /// @param allowOutOfOrderExecution: if true, it indicates that the message can be executed in any order relative to other messages from the same sender.\\n  /// This value's default varies by chain. On some chains, a particular value is enforced, meaning if the expected value\\n  /// is not set, the message request will revert.\\n  struct EVMExtraArgsV2 {\\n    uint256 gasLimit;\\n    bool allowOutOfOrderExecution;\\n  }\\n\\n  function _argsToBytes(\\n    EVMExtraArgsV2 memory extraArgs\\n  ) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V2_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x052174af3c87abcbf5e7754f3d3aa9d0ff5054ecef0d9d01ef087c28a468bb0b\",\"license\":\"MIT\"},\"contracts/equity/BridgedGovernanceSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\nimport {SyncVote, SyncMessage} from \\\"./BridgedGovernanceTypes.sol\\\";\\nimport {Governance} from \\\"./Governance.sol\\\";\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport {IERC20} from \\\"../erc20/IERC20.sol\\\";\\n\\ncontract BridgedGovernanceSender {\\n    Governance public immutable GOVERNANCE;\\n    IRouterClient public immutable ROUTER;\\n\\n    event MessageSent(\\n        bytes32 indexed messageId, // The unique ID of the CCIP message.\\n        uint64 indexed destinationChainSelector, // The chain selector of the destination chain.\\n        bytes indexed receiver, // The address of the receiver on the destination chain.\\n        address feeToken, // the token address used to pay CCIP fees.\\n        uint256 fees, // The fees paid for sending the CCIP message.\\n        address[] syncedVoters\\n    );\\n\\n    error InsufficientBalance(uint256 available, uint256 required);\\n    constructor(Governance _governance, IRouterClient _router) {\\n        GOVERNANCE = _governance;\\n        ROUTER = _router;\\n    }\\n\\n    /**\\n     * @notice Sync governance votes to destination paying with ERC20 token\\n     * @dev extraArgs for CCIP can be provided such as gasLimit or out-of-order execution\\n     *\\n     * @param _receiver                 Address of the recipient on the destination chain\\n     * @param _destinationChainSelector Chain selector of the destination chain\\n     * @param _ccipFeeToken             Token used to pay the ccip fees\\n     * @param _voters                   Collection of addresses which votes and delegation should be synced\\n     * @param _extraArgs                Extra args for ccip message\\n     *\\n     * @return messageId bytes32 MessageID of the sent message\\n     */\\n    function syncVotesPayToken(\\n        bytes calldata _receiver,\\n        uint64 _destinationChainSelector,\\n        IERC20 _ccipFeeToken,\\n        address[] calldata _voters,\\n        bytes calldata _extraArgs\\n    ) external returns (bytes32 messageId) {\\n        Client.EVM2AnyMessage memory message = getCCIPMessage(_receiver, address(_ccipFeeToken), _voters, _extraArgs);\\n        uint256 fees = ROUTER.getFee(_destinationChainSelector, message);\\n        uint256 availableBalance = _ccipFeeToken.balanceOf(msg.sender);\\n\\n        if (fees > availableBalance) {\\n            revert InsufficientBalance({available: availableBalance, required: fees});\\n        }\\n\\n        _ccipFeeToken.transferFrom(msg.sender, address(this), fees);\\n        _ccipFeeToken.approve(address(ROUTER), fees);\\n\\n        messageId = ROUTER.ccipSend(_destinationChainSelector, message);\\n\\n        emit MessageSent({\\n            messageId: messageId,\\n            destinationChainSelector: _destinationChainSelector,\\n            receiver: _receiver,\\n            feeToken: address(_ccipFeeToken),\\n            fees: fees,\\n            syncedVoters: _voters\\n        });\\n    }\\n\\n    /**\\n     * @notice Sync governance votes to destination paying with native token\\n     * @dev extraArgs for CCIP can be provided such as gasLimit or out-of-order execution\\n     *\\n     * @param _receiver                 Address of the recipient on the destination chain\\n     * @param _destinationChainSelector Chain selector of the destination chain\\n     * @param _voters                   Collection of addresses which votes and delegation should be synced\\n     * @param _extraArgs                Extra args for ccip message\\n     *\\n     * @return messageId bytes32 MessageID of the sent message\\n     */\\n    function syncVotesPayNative(\\n        bytes calldata _receiver,\\n        uint64 _destinationChainSelector,\\n        address[] calldata _voters,\\n        bytes calldata _extraArgs\\n    ) external payable returns (bytes32 messageId) {\\n        Client.EVM2AnyMessage memory message = getCCIPMessage(_receiver, address(0), _voters, _extraArgs);\\n        uint256 fees = ROUTER.getFee(_destinationChainSelector, message);\\n        uint256 availableBalance = address(this).balance;\\n\\n        if (fees > availableBalance) {\\n            revert InsufficientBalance({available: availableBalance, required: fees});\\n        }\\n\\n        messageId = ROUTER.ccipSend{value: fees}(_destinationChainSelector, message);\\n\\n        emit MessageSent({\\n            messageId: messageId,\\n            destinationChainSelector: _destinationChainSelector,\\n            receiver: _receiver,\\n            feeToken: address(0),\\n            fees: fees,\\n            syncedVoters: _voters\\n        });\\n    }\\n\\n    /**\\n     * @notice Gathers necessary information and builds the CCIP message to be sent\\n     * @dev Gets the necessary information for voters from governance\\n     *\\n     * @param _receiver                 Address of the recipient on the destination chain\\n     * @param _feeTokenAddress          Token used to pay the ccip fees\\n     * @param _voters                   Collection of addresses which votes and delegation should be synced\\n     * @param _extraArgs                Extra args for ccip message\\n     *\\n     * @return Client.EVM2AnyMessage The CCIP message to be sent\\n     */\\n    function getCCIPMessage(\\n        bytes calldata _receiver,\\n        address _feeTokenAddress,\\n        address[] calldata _voters,\\n        bytes calldata _extraArgs\\n    ) public view returns (Client.EVM2AnyMessage memory) {\\n        SyncVote[] memory syncVotes = new SyncVote[](_voters.length);\\n\\n        // omitted unchecked optimization for readability\\n        for (uint256 i = 0; i < _voters.length; i++) {\\n            syncVotes[i] = SyncVote({\\n                voter: _voters[i],\\n                votes: GOVERNANCE.votes(_voters[i]),\\n                delegatee: GOVERNANCE.delegates(_voters[i])\\n            });\\n        }\\n\\n        return _buildCCIPMessage(_receiver, _feeTokenAddress, GOVERNANCE.totalVotes(), syncVotes, _extraArgs);\\n    }\\n\\n    /**\\n     * @notice Get the fee required to send a CCIP message.\\n     * @param _destinationChainSelector The selector of the destination chain.\\n     * @param _feeTokenAddress          The address of the fee token.\\n     * @param _voters                   Collection of addresses which votes and delegation should be synced\\n     * @param _extraArgs                Extra args for ccip message\\n     *\\n     * @return uint256 The fee required to send the CCIP message.\\n     */\\n    function getCCIPFee(\\n        bytes calldata _receiver,\\n        uint64 _destinationChainSelector,\\n        address _feeTokenAddress,\\n        address[] calldata _voters,\\n        bytes calldata _extraArgs\\n    ) public view returns (uint256) {\\n        Client.EVM2AnyMessage memory message = getCCIPMessage(_receiver, _feeTokenAddress, _voters, _extraArgs);\\n        return ROUTER.getFee(_destinationChainSelector, message);\\n    }\\n\\n    /**\\n     * @notice Builds the CCIP message to be sent\\n     * @dev Gets the necessary information for voters from governance\\n     *\\n     * @param _receiver         Address of the recipient on the destination chain\\n     * @param _feeTokenAddress  Token used to pay the ccip fees\\n     * @param _totalVotes       Total votes available in governance\\n     * @param _votes            Collection of SyncVote\\n     * @param _extraArgs        Extra args for ccip message\\n     *\\n     * @return Client.EVM2AnyMessage The CCIP message to be sent\\n     */\\n    function _buildCCIPMessage(\\n        bytes calldata _receiver,\\n        address _feeTokenAddress,\\n        uint256 _totalVotes,\\n        SyncVote[] memory _votes,\\n        bytes calldata _extraArgs\\n    ) private pure returns (Client.EVM2AnyMessage memory) {\\n        SyncMessage memory _syncMessage = SyncMessage({votes: _votes, totalVotes: _totalVotes});\\n\\n        return\\n            Client.EVM2AnyMessage({\\n                receiver: _receiver,\\n                data: abi.encode(_syncMessage),\\n                tokenAmounts: new Client.EVMTokenAmount[](0), // Empty array as no tokens are transferred\\n                extraArgs: _extraArgs,\\n                // Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees\\n                feeToken: _feeTokenAddress\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0xb8ae9dc62107ee796d43c14b10c18e9234223d34152f7f192d510e69237664c2\",\"license\":\"MIT\"},\"contracts/equity/BridgedGovernanceTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nstruct SyncVote {\\n    address voter;\\n    uint256 votes;\\n    address delegatee;\\n}\\n\\nstruct SyncMessage {\\n    SyncVote[] votes;\\n    uint256 totalVotes;\\n}\\n\",\"keccak256\":\"0x9e9dd9805c1a77ecad9e037968b8877b25da7004a2e8c16cc1470bf7e805fc39\",\"license\":\"MIT\"},\"contracts/equity/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IGovernance.sol\\\";\\n\\nabstract contract Governance is IGovernance {\\n\\n    /**\\n     * @notice The quorum in basis points. 100 is 1%.\\n     */\\n    uint32 private constant QUORUM = 200;\\n\\n    /**\\n     * @notice Keeping track on who delegated votes to whom.\\n     * Note that delegation does not mean you cannot vote / veto any more, it just means that the delegate can\\n     * benefit from your votes when invoking a veto. Circular delegations are valid, do not help when voting.\\n     */\\n    mapping(address owner => address delegate) public delegates;\\n\\n    event Delegation(address indexed from, address indexed to); // indicates a delegation\\n\\n    /**\\n     * @notice The votes of the holder, excluding votes from delegates.\\n     */\\n    function votes(address holder) virtual public view returns (uint256);\\n\\n    /**\\n     * @notice Total number of votes in the system.\\n     */\\n    function totalVotes() virtual public view returns (uint256);\\n\\n    /**\\n     * @notice The number of votes the sender commands when taking the support of the helpers into account.\\n     * @param sender    The address whose total voting power is of interest\\n     * @param helpers   An incrementally sorted list of helpers without duplicates and without the sender.\\n     *                  The call fails if the list contains an address that does not delegate to sender.\\n     *                  For indirect delegates, i.e. a -> b -> c, both a and b must be included for both to count.\\n     * @return          The total number of votes of sender at the current point in time.\\n     */\\n    function votesDelegated(address sender, address[] calldata helpers) public view returns (uint256) {\\n        uint256 _votes = votes(sender);\\n        require(_checkDuplicatesAndSorted(helpers));\\n        for (uint i = 0; i < helpers.length; i++) {\\n            address current = helpers[i];\\n            require(current != sender);\\n            require(_canVoteFor(sender, current));\\n            _votes += votes(current);\\n        }\\n        return _votes;\\n    }\\n\\n    function _checkDuplicatesAndSorted(address[] calldata helpers) internal pure returns (bool ok) {\\n        if (helpers.length <= 1) {\\n            return true;\\n        } else {\\n            address prevAddress = helpers[0];\\n            for (uint i = 1; i < helpers.length; i++) {\\n                if (helpers[i] <= prevAddress) {\\n                    return false;\\n                }\\n                prevAddress = helpers[i];\\n            }\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether the sender address is qualified given a list of helpers that delegated their votes\\n     * directly or indirectly to the sender. It is the responsiblity of the caller to figure out whether\\n     * helpes are necessary and to identify them by scanning the blockchain for Delegation events.\\n     */\\n    function checkQualified(address sender, address[] calldata helpers) public view override {\\n        uint256 _votes = votesDelegated(sender, helpers);\\n        if (_votes * 10000 < QUORUM * totalVotes()) revert NotQualified();\\n    }\\n\\n    error NotQualified();\\n\\n    /**\\n     * @notice Increases the voting power of the delegate by your number of votes without taking away any voting power\\n     * from the sender.\\n     */\\n    function delegateVoteTo(address delegate_) external {\\n        delegate(msg.sender, delegate_);\\n    }\\n\\n    function delegate(address owner, address delegate_) internal {\\n        delegates[owner] = delegate_;\\n        emit Delegation(owner, delegate_);\\n    }\\n\\n    function _canVoteFor(address delegate_, address owner) internal view returns (bool) {\\n        if (owner == delegate_) {\\n            return true;\\n        } else if (owner == address(0x0)) {\\n            return false;\\n        } else {\\n            return _canVoteFor(delegate_, delegates[owner]);\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x9f9fc9d18f8a6b6347ccd1990f704c36f6e6d98a40d2ab944e7f8a4639041045\",\"license\":\"MIT\"},\"contracts/equity/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGovernance {\\n   function checkQualified(address sender, address[] calldata helpers) external view;\\n}\",\"keccak256\":\"0x7b41d66c02ba4f39b371bcbfd0456c233574b38cbc31031d6a22ad8ecf99a934\",\"license\":\"MIT\"},\"contracts/erc20/IERC20.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2016-2019 zOS Global Limited\\n *\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns always true. Throws error on failure.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value can change when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns always true. Throws error on failure.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6c4823424e1d0c53e2d3e978b81929fcec2583b96ed286abc955b71a5aad5544\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161126638038061126683398101604081905261002f9161005e565b6001600160a01b039182166080521660a052610098565b6001600160a01b038116811461005b57600080fd5b50565b6000806040838503121561007157600080fd5b825161007c81610046565b602084015190925061008d81610046565b809150509250929050565b60805160a05161116c6100fa6000396000818160de015281816101860152818161025d0152818161068301528181610721015281816108d8015261096c015260008181609201528181610409015281816104cc01526105c2015261116c6000f3fe6080604052600436106100555760003560e01c806313ca84871461005a578063146278341461008057806332fe7b26146100cc578063334ff87f14610100578063c2969ced1461012d578063e18c59cb1461014d575b600080fd5b61006d610068366004610c60565b61016d565b6040519081526020015b60405180910390f35b34801561008c57600080fd5b506100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610077565b3480156100d857600080fd5b506100b47f000000000000000000000000000000000000000000000000000000000000000081565b34801561010c57600080fd5b5061012061011b366004610d26565b61034b565b6040516100779190610e99565b34801561013957600080fd5b5061006d610148366004610eb3565b610657565b34801561015957600080fd5b5061006d610168366004610eb3565b610709565b600080610180898960008989898961034b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166320487ded89846040518363ffffffff1660e01b81526004016101d2929190610f75565b602060405180830381865afa1580156101ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102139190610fa0565b905047808211156102465760405163cf47918160e01b815260048101829052602481018390526044015b60405180910390fd5b6040516396f4e9f960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906396f4e9f9908490610296908d908890600401610f75565b60206040518083038185885af11580156102b4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906102d99190610fa0565b93508a8a6040516102eb929190610fb9565b60405180910390208967ffffffffffffffff16857f62030e04ccd3b2bad6e4798b9ebd92d10d0548f0a357bb5ae088beb434dc57f46000868d8d6040516103359493929190610fc9565b60405180910390a4505050979650505050505050565b610353610b7d565b60008467ffffffffffffffff81111561036e5761036e61102c565b6040519080825280602002602001820160405280156103b957816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161038c5790505b50905060005b858110156105b95760405180606001604052808888848181106103e4576103e4611042565b90506020020160208101906103f99190611058565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8bff5a58a8a8681811061044857610448611042565b905060200201602081019061045d9190611058565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156104a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c59190610fa0565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663587cde1e8a8a8681811061050b5761050b611042565b90506020020160208101906105209190611058565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105889190611075565b6001600160a01b03168152508282815181106105a6576105a6611042565b60209081029190910101526001016103bf565b5061064a8989897f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630d15fd776040518163ffffffff1660e01b8152600401602060405180830381865afa15801561061e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106429190610fa0565b858989610a58565b9998505050505050505050565b6000806106698a8a898989898961034b565b6040516320487ded60e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906320487ded906106ba908b908590600401610f75565b602060405180830381865afa1580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb9190610fa0565b9a9950505050505050505050565b60008061071b8a8a898989898961034b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166320487ded8a846040518363ffffffff1660e01b815260040161076d929190610f75565b602060405180830381865afa15801561078a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ae9190610fa0565b6040516370a0823160e01b81523360048201529091506000906001600160a01b038a16906370a0823190602401602060405180830381865afa1580156107f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081c9190610fa0565b9050808211156108495760405163cf47918160e01b8152600481018290526024810183905260440161023d565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038a16906323b872dd906064016020604051808303816000875af115801561089c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c09190611092565b5060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490528a169063095ea7b3906044016020604051808303816000875af1158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190611092565b506040516396f4e9f960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906396f4e9f9906109a3908d908790600401610f75565b6020604051808303816000875af11580156109c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e69190610fa0565b93508b8b6040516109f8929190610fb9565b60405180910390208a67ffffffffffffffff16857f62030e04ccd3b2bad6e4798b9ebd92d10d0548f0a357bb5ae088beb434dc57f48c868d8d604051610a419493929190610fc9565b60405180910390a450505098975050505050505050565b610a60610b7d565b6040805180820182528581526020808201889052825160c0601f8c018390049092028101820190935260a083018a815291929182918c908c9081908501838280828437600092019190915250505090825250604051602091820191610ac7918591016110b4565b60408051601f1981840301815291905281526020016000604051908082528060200260200182016040528015610b2357816020015b6040805180820190915260008082526020820152815260200190600190039081610afc5790505b508152602001886001600160a01b0316815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152509998505050505050505050565b6040518060a0016040528060608152602001606081526020016060815260200160006001600160a01b03168152602001606081525090565b60008083601f840112610bc757600080fd5b50813567ffffffffffffffff811115610bdf57600080fd5b602083019150836020828501011115610bf757600080fd5b9250929050565b803567ffffffffffffffff81168114610c1657600080fd5b919050565b60008083601f840112610c2d57600080fd5b50813567ffffffffffffffff811115610c4557600080fd5b6020830191508360208260051b8501011115610bf757600080fd5b60008060008060008060006080888a031215610c7b57600080fd5b873567ffffffffffffffff80821115610c9357600080fd5b610c9f8b838c01610bb5565b9099509750879150610cb360208b01610bfe565b965060408a0135915080821115610cc957600080fd5b610cd58b838c01610c1b565b909650945060608a0135915080821115610cee57600080fd5b50610cfb8a828b01610bb5565b989b979a50959850939692959293505050565b6001600160a01b0381168114610d2357600080fd5b50565b60008060008060008060006080888a031215610d4157600080fd5b873567ffffffffffffffff80821115610d5957600080fd5b610d658b838c01610bb5565b909950975060208a01359150610d7a82610d0e565b90955060408901359080821115610cc957600080fd5b6000815180845260005b81811015610db657602081850181015186830182015201610d9a565b506000602082860101526020601f19601f83011685010191505092915050565b6000815160a08452610deb60a0850182610d90565b905060208084015185830382870152610e048382610d90565b60408681015188830389830152805180845290850195509092506000918401905b80831015610e5757855180516001600160a01b0316835285015185830152948401946001929092019190830190610e25565b5060608701519450610e7460608901866001600160a01b03169052565b608087015194508781036080890152610e8d8186610d90565b98975050505050505050565b602081526000610eac6020830184610dd6565b9392505050565b60008060008060008060008060a0898b031215610ecf57600080fd5b883567ffffffffffffffff80821115610ee757600080fd5b610ef38c838d01610bb5565b909a509850889150610f0760208c01610bfe565b975060408b01359150610f1982610d0e565b90955060608a01359080821115610f2f57600080fd5b610f3b8c838d01610c1b565b909650945060808b0135915080821115610f5457600080fd5b50610f618b828c01610bb5565b999c989b5096995094979396929594505050565b67ffffffffffffffff83168152604060208201526000610f986040830184610dd6565b949350505050565b600060208284031215610fb257600080fd5b5051919050565b8183823760009101908152919050565b6001600160a01b03858116825260208083018690526060604084018190528301849052600091859160808501845b8781101561101e57843561100a81610d0e565b841682529382019390820190600101610ff7565b509998505050505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561106a57600080fd5b8135610eac81610d0e565b60006020828403121561108757600080fd5b8151610eac81610d0e565b6000602082840312156110a457600080fd5b81518015158114610eac57600080fd5b6000602080835260608084018551604080858801528282518085526080890191508684019450600093505b8084101561111d57845180516001600160a01b03908116845288820151898501529084015116838301529386019360019390930192908501906110df565b508589015160408901528096505050505050509291505056fea26469706673582212205b9320f42ba05d63cd3a4adbb7bc59c95c86cde06ac4b7cbc2d21b2d6f942edd64736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c806313ca84871461005a578063146278341461008057806332fe7b26146100cc578063334ff87f14610100578063c2969ced1461012d578063e18c59cb1461014d575b600080fd5b61006d610068366004610c60565b61016d565b6040519081526020015b60405180910390f35b34801561008c57600080fd5b506100b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610077565b3480156100d857600080fd5b506100b47f000000000000000000000000000000000000000000000000000000000000000081565b34801561010c57600080fd5b5061012061011b366004610d26565b61034b565b6040516100779190610e99565b34801561013957600080fd5b5061006d610148366004610eb3565b610657565b34801561015957600080fd5b5061006d610168366004610eb3565b610709565b600080610180898960008989898961034b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166320487ded89846040518363ffffffff1660e01b81526004016101d2929190610f75565b602060405180830381865afa1580156101ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102139190610fa0565b905047808211156102465760405163cf47918160e01b815260048101829052602481018390526044015b60405180910390fd5b6040516396f4e9f960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906396f4e9f9908490610296908d908890600401610f75565b60206040518083038185885af11580156102b4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906102d99190610fa0565b93508a8a6040516102eb929190610fb9565b60405180910390208967ffffffffffffffff16857f62030e04ccd3b2bad6e4798b9ebd92d10d0548f0a357bb5ae088beb434dc57f46000868d8d6040516103359493929190610fc9565b60405180910390a4505050979650505050505050565b610353610b7d565b60008467ffffffffffffffff81111561036e5761036e61102c565b6040519080825280602002602001820160405280156103b957816020015b604080516060810182526000808252602080830182905292820152825260001990920191018161038c5790505b50905060005b858110156105b95760405180606001604052808888848181106103e4576103e4611042565b90506020020160208101906103f99190611058565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d8bff5a58a8a8681811061044857610448611042565b905060200201602081019061045d9190611058565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156104a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c59190610fa0565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663587cde1e8a8a8681811061050b5761050b611042565b90506020020160208101906105209190611058565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105889190611075565b6001600160a01b03168152508282815181106105a6576105a6611042565b60209081029190910101526001016103bf565b5061064a8989897f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630d15fd776040518163ffffffff1660e01b8152600401602060405180830381865afa15801561061e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106429190610fa0565b858989610a58565b9998505050505050505050565b6000806106698a8a898989898961034b565b6040516320487ded60e01b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906320487ded906106ba908b908590600401610f75565b602060405180830381865afa1580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb9190610fa0565b9a9950505050505050505050565b60008061071b8a8a898989898961034b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166320487ded8a846040518363ffffffff1660e01b815260040161076d929190610f75565b602060405180830381865afa15801561078a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ae9190610fa0565b6040516370a0823160e01b81523360048201529091506000906001600160a01b038a16906370a0823190602401602060405180830381865afa1580156107f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081c9190610fa0565b9050808211156108495760405163cf47918160e01b8152600481018290526024810183905260440161023d565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038a16906323b872dd906064016020604051808303816000875af115801561089c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c09190611092565b5060405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490528a169063095ea7b3906044016020604051808303816000875af1158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190611092565b506040516396f4e9f960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906396f4e9f9906109a3908d908790600401610f75565b6020604051808303816000875af11580156109c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e69190610fa0565b93508b8b6040516109f8929190610fb9565b60405180910390208a67ffffffffffffffff16857f62030e04ccd3b2bad6e4798b9ebd92d10d0548f0a357bb5ae088beb434dc57f48c868d8d604051610a419493929190610fc9565b60405180910390a450505098975050505050505050565b610a60610b7d565b6040805180820182528581526020808201889052825160c0601f8c018390049092028101820190935260a083018a815291929182918c908c9081908501838280828437600092019190915250505090825250604051602091820191610ac7918591016110b4565b60408051601f1981840301815291905281526020016000604051908082528060200260200182016040528015610b2357816020015b6040805180820190915260008082526020820152815260200190600190039081610afc5790505b508152602001886001600160a01b0316815260200185858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152509998505050505050505050565b6040518060a0016040528060608152602001606081526020016060815260200160006001600160a01b03168152602001606081525090565b60008083601f840112610bc757600080fd5b50813567ffffffffffffffff811115610bdf57600080fd5b602083019150836020828501011115610bf757600080fd5b9250929050565b803567ffffffffffffffff81168114610c1657600080fd5b919050565b60008083601f840112610c2d57600080fd5b50813567ffffffffffffffff811115610c4557600080fd5b6020830191508360208260051b8501011115610bf757600080fd5b60008060008060008060006080888a031215610c7b57600080fd5b873567ffffffffffffffff80821115610c9357600080fd5b610c9f8b838c01610bb5565b9099509750879150610cb360208b01610bfe565b965060408a0135915080821115610cc957600080fd5b610cd58b838c01610c1b565b909650945060608a0135915080821115610cee57600080fd5b50610cfb8a828b01610bb5565b989b979a50959850939692959293505050565b6001600160a01b0381168114610d2357600080fd5b50565b60008060008060008060006080888a031215610d4157600080fd5b873567ffffffffffffffff80821115610d5957600080fd5b610d658b838c01610bb5565b909950975060208a01359150610d7a82610d0e565b90955060408901359080821115610cc957600080fd5b6000815180845260005b81811015610db657602081850181015186830182015201610d9a565b506000602082860101526020601f19601f83011685010191505092915050565b6000815160a08452610deb60a0850182610d90565b905060208084015185830382870152610e048382610d90565b60408681015188830389830152805180845290850195509092506000918401905b80831015610e5757855180516001600160a01b0316835285015185830152948401946001929092019190830190610e25565b5060608701519450610e7460608901866001600160a01b03169052565b608087015194508781036080890152610e8d8186610d90565b98975050505050505050565b602081526000610eac6020830184610dd6565b9392505050565b60008060008060008060008060a0898b031215610ecf57600080fd5b883567ffffffffffffffff80821115610ee757600080fd5b610ef38c838d01610bb5565b909a509850889150610f0760208c01610bfe565b975060408b01359150610f1982610d0e565b90955060608a01359080821115610f2f57600080fd5b610f3b8c838d01610c1b565b909650945060808b0135915080821115610f5457600080fd5b50610f618b828c01610bb5565b999c989b5096995094979396929594505050565b67ffffffffffffffff83168152604060208201526000610f986040830184610dd6565b949350505050565b600060208284031215610fb257600080fd5b5051919050565b8183823760009101908152919050565b6001600160a01b03858116825260208083018690526060604084018190528301849052600091859160808501845b8781101561101e57843561100a81610d0e565b841682529382019390820190600101610ff7565b509998505050505050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561106a57600080fd5b8135610eac81610d0e565b60006020828403121561108757600080fd5b8151610eac81610d0e565b6000602082840312156110a457600080fd5b81518015158114610eac57600080fd5b6000602080835260608084018551604080858801528282518085526080890191508684019450600093505b8084101561111d57845180516001600160a01b03908116845288820151898501529084015116838301529386019360019390930192908501906110df565b508589015160408901528096505050505050509291505056fea26469706673582212205b9320f42ba05d63cd3a4adbb7bc59c95c86cde06ac4b7cbc2d21b2d6f942edd64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getCCIPFee(bytes,uint64,address,address[],bytes)": {
        "params": {
          "_destinationChainSelector": "The selector of the destination chain.",
          "_extraArgs": "Extra args for ccip message",
          "_feeTokenAddress": "The address of the fee token.",
          "_voters": "Collection of addresses which votes and delegation should be synced"
        },
        "returns": {
          "_0": "uint256 The fee required to send the CCIP message."
        }
      },
      "getCCIPMessage(bytes,address,address[],bytes)": {
        "details": "Gets the necessary information for voters from governance",
        "params": {
          "_extraArgs": "Extra args for ccip message",
          "_feeTokenAddress": "Token used to pay the ccip fees",
          "_receiver": "Address of the recipient on the destination chain",
          "_voters": "Collection of addresses which votes and delegation should be synced"
        },
        "returns": {
          "_0": "Client.EVM2AnyMessage The CCIP message to be sent"
        }
      },
      "syncVotesPayNative(bytes,uint64,address[],bytes)": {
        "details": "extraArgs for CCIP can be provided such as gasLimit or out-of-order execution",
        "params": {
          "_destinationChainSelector": "Chain selector of the destination chain",
          "_extraArgs": "Extra args for ccip message",
          "_receiver": "Address of the recipient on the destination chain",
          "_voters": "Collection of addresses which votes and delegation should be synced"
        },
        "returns": {
          "messageId": "bytes32 MessageID of the sent message"
        }
      },
      "syncVotesPayToken(bytes,uint64,address,address[],bytes)": {
        "details": "extraArgs for CCIP can be provided such as gasLimit or out-of-order execution",
        "params": {
          "_ccipFeeToken": "Token used to pay the ccip fees",
          "_destinationChainSelector": "Chain selector of the destination chain",
          "_extraArgs": "Extra args for ccip message",
          "_receiver": "Address of the recipient on the destination chain",
          "_voters": "Collection of addresses which votes and delegation should be synced"
        },
        "returns": {
          "messageId": "bytes32 MessageID of the sent message"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCCIPFee(bytes,uint64,address,address[],bytes)": {
        "notice": "Get the fee required to send a CCIP message."
      },
      "getCCIPMessage(bytes,address,address[],bytes)": {
        "notice": "Gathers necessary information and builds the CCIP message to be sent"
      },
      "syncVotesPayNative(bytes,uint64,address[],bytes)": {
        "notice": "Sync governance votes to destination paying with native token"
      },
      "syncVotesPayToken(bytes,uint64,address,address[],bytes)": {
        "notice": "Sync governance votes to destination paying with ERC20 token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
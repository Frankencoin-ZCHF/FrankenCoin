{
  "address": "0xEef1CaCe8eaEae155a6E4b834261F44aC6de21EE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minApplicationPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applicationPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applicationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "MinterApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "MinterDenied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_APPLICATION_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "reservePPM",
          "type": "uint32"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetTotalBurnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reservePPM",
          "type": "uint32"
        }
      ],
      "name": "burnFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountExcludingReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reservePPM",
          "type": "uint32"
        }
      ],
      "name": "burnWithReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "mintedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reservePPM",
          "type": "uint32"
        }
      ],
      "name": "calculateAssignedReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_helpers",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "denyMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "equity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_position",
          "type": "address"
        }
      ],
      "name": "isPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reservePPM",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_feesPPM",
          "type": "uint32"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minterReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "notifyLoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_position",
          "type": "address"
        }
      ],
      "name": "registerPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "contract IReserve",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_applicationPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_applicationFee",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "suggestMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa22ce2eb08c48df5a3992ea20941840c737ac339261640ca0f7b67779397415",
  "receipt": {
    "to": null,
    "from": "0x0aB6527027EcFF1144dEc3d78154fce309ac838c",
    "contractAddress": "0xEef1CaCe8eaEae155a6E4b834261F44aC6de21EE",
    "transactionIndex": 0,
    "gasUsed": "3083067",
    "logsBloom": "0x
    "blockHash": "0x9775084a257520394934642d834c3e23937d60e6ce5f8bc286030a2f87c4827f",
    "transactionHash": "0xaa22ce2eb08c48df5a3992ea20941840c737ac339261640ca0f7b67779397415",
    "logs": [],
    "blockNumber": 2469274,
    "cumulativeGasUsed": "3083067",
    "status": 1,
    "byzantium": true
  },
  "args": [
    900
  ],
  "numDeployments": 1,
  "solcInputHash": "35c53c9822df511dc79e606069bca182",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minApplicationPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applicationPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applicationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MinterApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MinterDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_APPLICATION_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"reservePPM\",\"type\":\"uint32\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetTotalBurnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reservePPM\",\"type\":\"uint32\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountExcludingReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reservePPM\",\"type\":\"uint32\"}],\"name\":\"burnWithReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reservePPM\",\"type\":\"uint32\"}],\"name\":\"calculateAssignedReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_helpers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"denyMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"equity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_position\",\"type\":\"address\"}],\"name\":\"isPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reservePPM\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_feesPPM\",\"type\":\"uint32\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_position\",\"type\":\"address\"}],\"name\":\"registerPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract IReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_applicationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_applicationFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"suggestMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See `IERC20.allowance`.\"},\"approve(address,uint256)\":{\"details\":\"See `IERC20.approve`. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See `IERC20.balanceOf`.\"},\"equity()\":{\"returns\":{\"_0\":\"ZCHF in dec18 format\"}},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"amount in dec18 format\",\"_target\":\"address that receives ZCHF if it's a minter\"}},\"mint(address,uint256,uint32,uint32)\":{\"params\":{\"_amount\":\"amount ZCHF before fees and pool contribution requested                      number in dec18 format\",\"_feesPPM\":\"fees in parts per million\",\"_reservePPM\":\"reserve requirement in parts per million\",\"_target\":\"address that receives ZCHF if it's a minter\"}},\"suggestMinter(address,uint256,uint256,string)\":{\"params\":{\"_applicationFee\":\"application fee in parts per million\",\"_applicationPeriod\":\"application period in seconds\",\"_message\":\"message string\",\"_minter\":\"address of the position want to add to the minters\"}},\"totalSupply()\":{\"details\":\"See `IERC20.totalSupply`.\"},\"transfer(address,uint256)\":{\"details\":\"See `IERC20.transfer`. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See `IERC20.transferFrom`. Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"equity()\":{\"notice\":\"Get reserve balance (amount of ZCHF)\"},\"mint(address,uint256)\":{\"notice\":\"Mint amount of ZCHF for address _target\"},\"mint(address,uint256,uint32,uint32)\":{\"notice\":\"Mint amount of ZCHF for address _target\"},\"suggestMinter(address,uint256,uint256,string)\":{\"notice\":\"Minting is suggested either by (1) person applying for a new original position, or (2) by the minting hub when cloning a position. The minting hub has the priviledge to call with zero application fee and period.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Frankencoin.sol\":\"Frankencoin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied and adjusted from OpenZeppelin\\n// Adjustments:\\n// - modifications to support ERC-677\\n// - removed require messages to save space\\n// - removed unnecessary require statements\\n// - removed GSN Context\\n// - upgraded to 0.8 to drop SafeMath\\n// - let name() and symbol() be implemented by subclass\\n// - infinite allowance support, with 2^255 and above considered infinite\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC677Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the `IERC20` interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using `_mint`.\\n * For a generic mechanism see `ERC20Mintable`.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See `IERC20.approve`.\\n */\\n\\nabstract contract ERC20 is IERC20 {\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    uint8 public immutable override decimals;\\n\\n    constructor(uint8 _decimals) {\\n        decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.totalSupply`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.balanceOf`.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transfer`.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.allowance`.\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.approve`.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transferFrom`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of `ERC20`;\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `value`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        if (currentAllowance < (1 << 255)){\\n            // Only decrease the allowance if it was not set to 'infinite'\\n            // Documented in /doc/infiniteallowance.md\\n            require(currentAllowance >= amount, \\\"approval not enough\\\");\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to `transfer`, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a `Transfer` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(recipient != address(0));\\n        \\n        _beforeTokenTransfer(sender, recipient, amount);\\n        require(_balances[sender]>=amount, \\\"balance not enough\\\");\\n        _balances[sender] -= amount;\\n        _balances[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    // ERC-677 functionality, can be useful for swapping and wrapping tokens\\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external override returns (bool) {\\n        bool success = transfer(recipient, amount);\\n        if (success){\\n            success = IERC677Receiver(recipient).onTokenTransfer(msg.sender, amount, data);\\n        }\\n        return success;\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a `Transfer` event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address recipient, uint256 amount) internal virtual {\\n        require(recipient != address(0));\\n\\n        _beforeTokenTransfer(address(0), recipient, amount);\\n\\n        _totalSupply += amount;\\n        _balances[recipient] += amount;\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n     /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a `Transfer` event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _totalSupply -= amount;\\n        _balances[account] -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) virtual internal {\\n    }\\n}\",\"keccak256\":\"0x14ea8f1a8ce94f6e364e65b67bf9378e34f0ff1c3adc5ff38240e170c4ab30e8\",\"license\":\"MIT\"},\"contracts/ERC20PermitLight.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied from https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol\\n// and modified it.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\nabstract contract ERC20PermitLight is ERC20 {\\n   \\n   /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    mapping(address => uint256) public nonces;\\n\\n  /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"),\\n                                bytes32(0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            //allowance[recoveredAddress][spender] = value;\\n            _approve(recoveredAddress, spender, value);\\n        }\\n\\n        // emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n}\",\"keccak256\":\"0x7c32c06ad58600f982170601cb89ebbcb5ce2174a3d27cc9260de33a4d3c9c9e\",\"license\":\"MIT\"},\"contracts/Equity.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Frankencoin.sol\\\";\\nimport \\\"./IERC677Receiver.sol\\\";\\nimport \\\"./ERC20PermitLight.sol\\\";\\nimport \\\"./MathUtil.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\n\\n/** \\n * @title Reserve pool for the Frankencoin\\n */\\ncontract Equity is ERC20PermitLight, MathUtil, IReserve {\\n\\n    uint32 public constant VALUATION_FACTOR = 3;\\n    uint256 public constant MIN_HOLDING_DURATION = 5; // TEMP!!! 90 * 24 * 60 * 5; // about 90 days\\n    uint32 private constant QUORUM = 300;\\n\\n    Frankencoin immutable public zchf;\\n\\n    // should hopefully be grouped into one storage slot\\n    uint64 private totalVotesAnchorTime;\\n    uint192 private totalVotesAtAnchor;\\n\\n\\n    mapping (address => address) public delegates;\\n    mapping (address => uint64) private voteAnchor;\\n\\n    event Delegation(address indexed from, address indexed to);\\n\\n    constructor(Frankencoin zchf_) ERC20(18) {\\n        zchf = zchf_;\\n    }\\n\\n    function name() override external pure returns (string memory) {\\n        return \\\"Frankencoin Pool Share\\\";\\n    }\\n\\n    function symbol() override external pure returns (string memory) {\\n        return \\\"FPS\\\";\\n    }\\n\\n    function price() public view returns (uint256){\\n        return VALUATION_FACTOR * zchf.equity() * ONE_DEC18 / totalSupply();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) override internal {\\n        super._beforeTokenTransfer(from, to, amount);\\n        if (amount > 0){\\n            uint256 roundingLoss = adjustRecipientVoteAnchor(to, amount);\\n            adjustTotalVotes(from, amount, roundingLoss);\\n        }\\n    }\\n\\n    function canRedeem() external view returns (bool){\\n        return canRedeem(msg.sender);\\n    }\\n\\n    function canRedeem(address owner) public view returns (bool) {\\n        return block.number - voteAnchor[owner] >= MIN_HOLDING_DURATION;\\n    }\\n\\n     /**\\n     * @notice Decrease the total votes anchor when tokens lose their voting power due to being moved\\n     * @param from      sender\\n     * @param amount    amount to be sent\\n     */\\n    function adjustTotalVotes(address from, uint256 amount, uint256 roundingLoss) internal {\\n        uint256 lostVotes = from == address(0x0) ? 0 : (block.number - voteAnchor[from]) * amount;\\n        totalVotesAtAnchor = uint192(totalVotes() - roundingLoss - lostVotes);\\n        totalVotesAnchorTime = uint64(block.number);\\n    }\\n\\n    /**\\n     * @notice the vote anchor of the recipient is moved forward such that the number of calculated\\n     * votes does not change despite the higher balance.\\n     * @param to        receiver address\\n     * @param amount    amount to be received\\n     * @return the number of votes lost due to rounding errors\\n     */\\n    function adjustRecipientVoteAnchor(address to, uint256 amount) internal returns (uint256){\\n        if (to != address(0x0)) {\\n            uint256 recipientVotes = votes(to); // for example 21 if 7 shares were held for 3 blocks\\n            uint256 newbalance = balanceOf(to) + amount; // for example 11 if 4 shares are added\\n            voteAnchor[to] = uint64(block.number - recipientVotes / newbalance); // new example anchor is only 21 / 11 = 1 block in the past\\n            return recipientVotes % newbalance; // we have lost 21 % 11 = 10 votes\\n        } else {\\n            // optimization for burn, vote anchor of null address does not matter\\n            return 0;\\n        }\\n    }\\n\\n    function votes(address holder) public view returns (uint256) {\\n        return balanceOf(holder) * (block.number - voteAnchor[holder]);\\n    }\\n\\n    function totalVotes() public view returns (uint256) {\\n        return totalVotesAtAnchor + totalSupply() * (block.number - totalVotesAnchorTime);\\n    }\\n\\n    function isQualified(address sender, address[] calldata helpers) external override view returns (bool) {\\n        uint256 _votes = votes(sender);\\n        for (uint i=0; i<helpers.length; i++){\\n            address current = helpers[i];\\n            require(current != sender);\\n            require(canVoteFor(sender, current));\\n            for (uint j=i+1; j<helpers.length; j++){\\n                require(current != helpers[j]);\\n            }\\n            _votes += votes(current);\\n        }\\n        return _votes * 10000 >= QUORUM * totalVotes();\\n    }\\n\\n    function delegateVoteTo(address delegate) external {\\n        delegates[msg.sender] = delegate;\\n        emit Delegation(msg.sender, delegate);\\n    }\\n\\n    function canVoteFor(address delegate, address owner) public view returns (bool) {\\n        if (owner == delegate){\\n            return true;\\n        } else if (owner == address(0x0)){\\n            return false;\\n        } else {\\n            return canVoteFor(delegate, delegates[owner]);\\n        }\\n    }\\n\\n    function onTokenTransfer(address from, uint256 amount, bytes calldata) external returns (bool) {\\n        require(msg.sender == address(zchf), \\\"caller must be zchf\\\");\\n        if (totalSupply() == 0){\\n            require(amount >= ONE_DEC18, \\\"initial deposit must >= 1\\\");\\n            // initialize with 1 share\\n            _mint(from, 1 * 10**18);\\n            amount -= ONE_DEC18;\\n        } \\n        _mint(from, calculateSharesInternal(zchf.equity() - amount, amount));\\n        require(totalSupply() < 2**90, \\\"total supply exceeded\\\");\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Calculate shares received when depositing ZCHF\\n     * @dev this function is called after the transfer of ZCHF happens\\n     * @param investment ZCHF invested, in dec18 format\\n     * @return amount of shares received for the ZCHF invested\\n     */\\n    function calculateShares(uint256 investment) public view returns (uint256) {\\n        return calculateSharesInternal(zchf.equity(), investment);\\n    }\\n\\n    function calculateSharesInternal(uint256 capitalBefore, uint256 investment) internal view returns (uint256) {\\n        uint256 totalShares = totalSupply();\\n        uint256 newTotalShares = _mulD18(totalShares, _cubicRoot(_divD18(capitalBefore + investment, capitalBefore)));\\n        return newTotalShares - totalShares;\\n    }\\n\\n    function redeem(address target, uint256 shares) public returns (uint256) {\\n        require(canRedeem(msg.sender));\\n        uint256 proceeds = calculateProceeds(shares);\\n        _burn(msg.sender, shares);\\n        zchf.transfer(target, proceeds);\\n        return proceeds;\\n    }\\n\\n    /**\\n     * @notice Calculate ZCHF received when depositing shares\\n     * @dev this function is called before any transfer happens\\n     * @param shares number of shares we want to exchange for ZCHF,\\n     *               in dec18 format\\n     * @return amount of ZCHF received for the shares\\n     */\\n    function calculateProceeds(uint256 shares) public view returns (uint256) {\\n        uint256 totalShares = totalSupply();\\n        uint256 capital = zchf.equity();\\n        require(shares + ONE_DEC18 < totalShares, \\\"too many shares\\\"); // make sure there is always at least one share\\n        uint256 newTotalShares = totalShares - shares;\\n        uint256 newCapital = _mulD18(capital, _power3(_divD18(newTotalShares, totalShares)));\\n        return capital - newCapital;\\n    }\\n\\n}\",\"keccak256\":\"0x02f001a13e33d2ca6919d7c79e93725f07cbcffd2f2f626bd933a1a4aa8f6a07\",\"license\":\"MIT\"},\"contracts/Frankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20PermitLight.sol\\\";\\nimport \\\"./Equity.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\nimport \\\"./IFrankencoin.sol\\\";\\n\\ncontract Frankencoin is ERC20PermitLight, IFrankencoin {\\n\\n   uint256 public constant MIN_FEE = 1000 * (10**18);\\n   uint256 public immutable MIN_APPLICATION_PERIOD; //10 days;\\n\\n   IReserve override public immutable reserve;\\n   uint256 private minterReserveE6;\\n\\n   mapping (address => uint256) public minters;\\n   mapping (address => address) public positions;\\n\\n   event MinterApplied(address indexed minter, uint256 applicationPeriod, uint256 applicationFee, string message);\\n   event MinterDenied(address indexed minter, string message);\\n\\n   constructor(uint256 _minApplicationPeriod) ERC20(18){\\n      MIN_APPLICATION_PERIOD = _minApplicationPeriod;\\n      reserve = new Equity(this);\\n   }\\n\\n   function name() override external pure returns (string memory){\\n      return \\\"Frankencoin V1\\\";\\n   }\\n\\n   function symbol() override external pure returns (string memory){\\n      return \\\"ZCHF\\\";\\n   }\\n\\n   /**\\n    * @notice Minting is suggested either by (1) person applying for a new original position,\\n    * or (2) by the minting hub when cloning a position. The minting hub has the priviledge\\n    * to call with zero application fee and period.\\n    * @param _minter             address of the position want to add to the minters\\n    * @param _applicationPeriod  application period in seconds\\n    * @param _applicationFee     application fee in parts per million\\n    * @param _message            message string\\n    */\\n   function suggestMinter(address _minter, uint256 _applicationPeriod, \\n      uint256 _applicationFee, string calldata _message) override external \\n   {\\n      require(_applicationPeriod >= MIN_APPLICATION_PERIOD || totalSupply() == 0, \\\"period too short\\\");\\n      require(_applicationFee >= MIN_FEE || totalSupply() == 0, \\\"fee too low\\\");\\n      require(minters[_minter] == 0, \\\"already registered\\\");\\n      _transfer(msg.sender, address(reserve), _applicationFee);\\n      minters[_minter] = block.timestamp + _applicationPeriod;\\n      emit MinterApplied(_minter, _applicationPeriod, _applicationFee, _message);\\n   }\\n\\n   function minterReserve() public view returns (uint256) {\\n      return minterReserveE6 / 1000000;\\n   }\\n\\n   function registerPosition(address _position) override external {\\n      require(isMinter(msg.sender), \\\"not minter\\\");\\n      positions[_position] = msg.sender;\\n   }\\n\\n   /**\\n    * @notice Get reserve balance (amount of ZCHF)\\n    * @return ZCHF in dec18 format\\n    */\\n   function equity() public view returns (uint256) {\\n      uint256 balance = balanceOf(address(reserve));\\n      uint256 minReserve = minterReserve();\\n      if (balance <= minReserve){\\n        return 0;\\n      } else {\\n        return balance - minReserve;\\n      }\\n    }\\n\\n   function denyMinter(address _minter, address[] calldata _helpers, string calldata _message) override external {\\n      require(block.timestamp <= minters[_minter], \\\"too late\\\");\\n      require(reserve.isQualified(msg.sender, _helpers), \\\"not qualified\\\");\\n      delete minters[_minter];\\n      emit MinterDenied(_minter, _message);\\n   }\\n\\n   /**\\n * @notice Mint amount of ZCHF for address _target\\n * @param _target       address that receives ZCHF if it's a minter\\n * @param _amount       amount ZCHF before fees and pool contribution requested\\n *                      number in dec18 format\\n * @param _reservePPM   reserve requirement in parts per million\\n * @param _feesPPM      fees in parts per million\\n */\\n   function mint(address _target, uint256 _amount, uint32 _reservePPM, uint32 _feesPPM) \\n      override external minterOnly \\n   {\\n      uint256 _minterReserveE6 = _amount * _reservePPM;\\n      uint256 reserveMint = (_minterReserveE6 + 999_999) / 1000_000; // make sure rounded up\\n      uint256 fees = (_amount * _feesPPM + 999_999) / 1000_000; // make sure rounded up\\n      _mint(_target, _amount - reserveMint - fees);\\n      _mint(address(reserve), reserveMint + fees);\\n      minterReserveE6 += reserveMint * 1000_000;\\n   }\\n\\n   /**\\n    * @notice Mint amount of ZCHF for address _target\\n    * @param _target   address that receives ZCHF if it's a minter\\n    * @param _amount   amount in dec18 format\\n    */\\n   function mint(address _target, uint256 _amount) override external minterOnly {\\n      _mint(_target, _amount);\\n   }\\n\\n   function burn(uint256 _amount) external {\\n      _burn(msg.sender, _amount);\\n   }\\n\\n   function burn(uint256 amount, uint32 reservePPM) external override minterOnly {\\n      _burn(msg.sender, amount);\\n      minterReserveE6 -= amount * reservePPM;\\n   }\\n\\n   function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) public view returns (uint256) {\\n      uint256 theoreticalReserve = _reservePPM * mintedAmount / 1000000;\\n      uint256 currentReserve = balanceOf(address(reserve));\\n      if (currentReserve < minterReserve()){\\n         // not enough reserves, owner has to take a loss\\n         return theoreticalReserve * currentReserve / minterReserve();\\n      } else {\\n         return theoreticalReserve;\\n      }\\n   }\\n\\n   function burnFrom(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external override minterOnly returns (uint256) {\\n      uint256 assigned = calculateAssignedReserve(targetTotalBurnAmount, _reservePPM);\\n      _transfer(address(reserve), payer, assigned); \\n      _burn(payer, targetTotalBurnAmount); // and burn everything\\n      minterReserveE6 -= targetTotalBurnAmount * _reservePPM; // reduce reserve requirements by original ratio\\n      return assigned;\\n   }\\n\\n   function burnWithReserve(uint256 _amountExcludingReserve /* 41 */, uint32 _reservePPM /* 20% */) \\n      external override minterOnly returns (uint256) \\n   {\\n      uint256 currentReserve = balanceOf(address(reserve)); // 18, 10% below what we should have\\n      uint256 minterReserve_ = minterReserve(); // 20\\n      uint256 adjustedReservePPM = currentReserve < minterReserve_ ? _reservePPM * currentReserve / minterReserve_ : _reservePPM; // 18%\\n      uint256 freedAmount = _amountExcludingReserve / (1000000 - adjustedReservePPM); // 0.18 * 41 /0.82 = 50\\n      minterReserveE6 -= freedAmount * _reservePPM; // reduce reserve requirements by original ratio, here 10\\n      _transfer(address(reserve), msg.sender, freedAmount - _amountExcludingReserve); // collect 9 assigned reserve, maybe less than original reserve\\n      _burn(msg.sender, freedAmount); // 41\\n      return freedAmount;\\n   }\\n\\n   function burn(address _owner, uint256 _amount) override external minterOnly {\\n      _burn(_owner, _amount);\\n   }\\n\\n   modifier minterOnly() {\\n      require(isMinter(msg.sender) || isMinter(positions[msg.sender]), \\\"not approved minter\\\");\\n      _;\\n   }\\n\\n   function notifyLoss(uint256 _amount) override external minterOnly {\\n      uint256 reserveLeft = balanceOf(address(reserve));\\n      if (reserveLeft >= _amount){\\n         _transfer(address(reserve), msg.sender, _amount);\\n      } else {\\n         _transfer(address(reserve), msg.sender, reserveLeft);\\n         _mint(msg.sender, _amount - reserveLeft);\\n      }\\n   }\\n   function isMinter(address _minter) override public view returns (bool){\\n      return minters[_minter]!=0 && block.timestamp >= minters[_minter];\\n   }\\n\\n   function isPosition(address _position) override public view returns (address){\\n      return positions[_position];\\n   }\\n\\n}\\n\\n\",\"keccak256\":\"0x3d5bac572418b1e91d1d7d757fa1505970877999080e58702dd4a2ffe2b7f333\",\"license\":\"MIT\"},\"contracts/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0xca95e6b6324b1c92dca4759b3da5fc251053691de885f2e23021eb5abdddea9c\",\"license\":\"MIT\"},\"contracts/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC677Receiver {\\n    \\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\n\\n}\",\"keccak256\":\"0x40703acdfa2126286b117ad0cca84c0a4ca2d3b18586765186c9bdd8ad5cf744\",\"license\":\"MIT\"},\"contracts/IFrankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\n\\ninterface IFrankencoin is IERC20 {\\n\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, \\n      uint256 _applicationFee, string calldata _message) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function isPosition(address position) external view returns (address);\\n    \\n    function mint(address target, uint256 amount) external;\\n\\n    function mint(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burn(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnFrom(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external returns (uint256);\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n    function burn(address target, uint256 amount) external;\\n\\n    function notifyLoss(uint256 amount) external;\\n\\n}\",\"keccak256\":\"0xabb33542d10c4922e9df1e5c64ef6e6c780a6deadd029488aebe5d6c374b39a3\",\"license\":\"MIT\"},\"contracts/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReserve {\\n   function isQualified(address sender, address[] calldata helpers) external view returns (bool);\\n}\",\"keccak256\":\"0x0fe637cc8a87dd12b7a236a86c15d52990ea3224413a1ec0e776b093b44eca0d\",\"license\":\"MIT\"},\"contracts/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/** \\n * @title Functions for share valuation\\n */\\ncontract MathUtil {\\n\\n    uint256 internal constant ONE_DEC18 = 10**18;\\n    uint256 internal constant THRESH_DEC18 =  10000000000000000;//0.01\\n    /**\\n     * @notice Cubic root with Halley approximation\\n     *         Number 1e18 decimal\\n     * @param _v     number for which we calculate x**(1/3)\\n     * @return returns _v**(1/3)\\n     */\\n    function _cubicRoot(uint256 _v) internal pure returns (uint256) {\\n        uint256 x = ONE_DEC18;\\n        uint256 xOld;\\n        bool cond;\\n        do {\\n            xOld = x;\\n            uint256 powX3 = _mulD18(_mulD18(x, x), x);\\n            x = _mulD18(x, _divD18( (powX3 + 2 * _v) , (2 * powX3 + _v)));\\n            cond = xOld > x ? xOld - x > THRESH_DEC18 : x - xOld > THRESH_DEC18;\\n        } while ( cond );\\n        return x;\\n    }\\n\\n    function _mulD18(uint256 _a, uint256 _b) internal pure returns(uint256) {\\n        return _a * _b / ONE_DEC18;\\n    }\\n\\n    function _divD18(uint256 _a, uint256 _b) internal pure returns(uint256) {\\n        return (_a * ONE_DEC18) / _b ;\\n    }\\n\\n    function _power3(uint256 _x) internal pure returns(uint256) {\\n        return _mulD18(_mulD18(_x, _x), _x);\\n    }\\n\\n}\",\"keccak256\":\"0xb5d4f2e9e32e67daec5e87f2953a5f59b4a871d1feca79ca8703a61757215dce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c806391a0ac6a1161011a578063b52c696d116100ad578063d38bb0091161007c578063d38bb00914610542578063d505accf1461054a578063dd62ed3e1461055d578063ea889b8a14610596578063f46eccc4146105a957600080fd5b8063b52c696d146104e2578063cbca628e146104f5578063cd3293de14610508578063d1a15ff11461052f57600080fd5b80639dc29fac116100e95780639dc29fac14610496578063a47d75ad146104a9578063a9059cbb146104bc578063aa271e1a146104cf57600080fd5b806391a0ac6a1461044857806395d89b41146104505780639b404da6146104705780639cc063581461048357600080fd5b80633644e5151161019d57806355f575101161016c57806355f57510146103b357806361f3d110146103dc57806370a08231146103ef57806376c7a3c7146104185780637ecebe001461042857600080fd5b80633644e5151461034a5780634000aea01461037857806340c10f191461038b57806342966c68146103a057600080fd5b80631a46c7e9116101d95780631a46c7e91461029357806323b872dd146102ba5780632748913b146102cd578063313ce5671461031157600080fd5b806306fdde031461020b578063095ea7b31461024757806316e0e5381461026a57806318160ddd1461028b575b600080fd5b60408051808201909152600e81526d4672616e6b656e636f696e20563160901b60208201525b60405161023e9190611626565b60405180910390f35b61025a610255366004611697565b6105c9565b604051901515815260200161023e565b61027d6102783660046116d5565b6105e0565b60405190815260200161023e565b60025461027d565b61027d7f000000000000000000000000000000000000000000000000000000000000000081565b61025a6102c8366004611701565b610682565b6102f96102db36600461173d565b6001600160a01b039081166000908152600660205260409020541690565b6040516001600160a01b03909116815260200161023e565b6103387f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff909116815260200161023e565b604080514660208083019190915230828401528251808303840181526060909201909252805191012061027d565b61025a6103863660046117a8565b610729565b61039e610399366004611697565b6107bf565b005b61039e6103ae366004611802565b61081a565b6102f96103c136600461173d565b6006602052600090815260409020546001600160a01b031681565b61039e6103ea366004611802565b610827565b61027d6103fd36600461173d565b6001600160a01b031660009081526020819052604090205490565b61027d683635c9adc5dea0000081565b61027d61043636600461173d565b60036020526000908152604090205481565b61027d61091d565b6040805180820190915260048152632d21a42360e11b6020820152610231565b61039e61047e36600461181b565b610983565b61039e6104913660046116d5565b610aff565b61039e6104a4366004611697565b610b80565b61027d6104b73660046116d5565b610bd7565b61025a6104ca366004611697565b610d26565b61025a6104dd36600461173d565b610d33565b61039e6104f036600461173d565b610d74565b61039e6105033660046118cd565b610ddf565b6102f97f000000000000000000000000000000000000000000000000000000000000000081565b61039e61053d36600461191a565b610f01565b61027d6110a4565b61039e610558366004611971565b6110bc565b61027d61056b3660046119e4565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61027d6105a4366004611a0e565b6112d3565b61027d6105b736600461173d565b60056020526000908152604090205481565b60006105d6338484611394565b5060015b92915050565b600080620f42406105f78563ffffffff8616611a60565b6106019190611a7f565b905060006106447f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660009081526020819052604090205490565b905061064e6110a4565b81101561067a5761065d6110a4565b6106678284611a60565b6106719190611a7f565b925050506105da565b5090506105da565b600061068f8484846113f6565b6001600160a01b0384166000908152600160209081526040808320338452909152902054600160ff1b81101561071e578281101561070a5760405162461bcd60e51b81526020600482015260136024820152720c2e0e0e4deecc2d840dcdee840cadcdeeaced606b1b60448201526064015b60405180910390fd5b61071e85336107198685611aa1565b611394565b506001949350505050565b6000806107368686610d26565b905080156107b657604051635260769b60e11b81526001600160a01b0387169063a4c0ed3690610770903390899089908990600401611ae1565b6020604051808303816000875af115801561078f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b39190611b09565b90505b95945050505050565b6107c833610d33565b806107f05750336000908152600660205260409020546107f0906001600160a01b0316610d33565b61080c5760405162461bcd60e51b815260040161070190611b2b565b6108168282611507565b5050565b61082433826115a4565b50565b61083033610d33565b80610858575033600090815260066020526040902054610858906001600160a01b0316610d33565b6108745760405162461bcd60e51b815260040161070190611b2b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166000908152602081905260409020548181106108df576108167f000000000000000000000000000000000000000000000000000000000000000033846113f6565b61090a7f000000000000000000000000000000000000000000000000000000000000000033836113f6565b610816336109188385611aa1565b611507565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660009081526020819052604081205460006109606110a4565b90508082116109725760009250505090565b61097c8183611aa1565b9250505090565b6001600160a01b0385166000908152600560205260409020544211156109d65760405162461bcd60e51b8152602060048201526008602482015267746f6f206c61746560c01b6044820152606401610701565b604051635e1121cf60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635e1121cf90610a2690339088908890600401611b58565b602060405180830381865afa158015610a43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a679190611b09565b610aa35760405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081c5d585b1a599a5959609a1b6044820152606401610701565b6001600160a01b03851660008181526005602052604080822091909155517fd60c86e83346fdbe3124cb7d1cba32973a9f62d05c4ec801bfe6c09d1038038190610af09085908590611bb2565b60405180910390a25050505050565b610b0833610d33565b80610b30575033600090815260066020526040902054610b30906001600160a01b0316610d33565b610b4c5760405162461bcd60e51b815260040161070190611b2b565b610b5633836115a4565b610b6663ffffffff821683611a60565b60046000828254610b779190611aa1565b90915550505050565b610b8933610d33565b80610bb1575033600090815260066020526040902054610bb1906001600160a01b0316610d33565b610bcd5760405162461bcd60e51b815260040161070190611b2b565b61081682826115a4565b6000610be233610d33565b80610c0a575033600090815260066020526040902054610c0a906001600160a01b0316610d33565b610c265760405162461bcd60e51b815260040161070190611b2b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660009081526020819052604081205490610c686110a4565b90506000818310610c7f578463ffffffff16610c9a565b81610c908463ffffffff8816611a60565b610c9a9190611a7f565b90506000610cab82620f4240611aa1565b610cb59088611a7f565b9050610cc763ffffffff871682611a60565b60046000828254610cd89190611aa1565b90915550610d1290507f000000000000000000000000000000000000000000000000000000000000000033610d0d8a85611aa1565b6113f6565b610d1c33826115a4565b9695505050505050565b60006105d63384846113f6565b6001600160a01b038116600090815260056020526040812054158015906105da5750506001600160a01b031660009081526005602052604090205442101590565b610d7d33610d33565b610db65760405162461bcd60e51b815260206004820152600a6024820152693737ba1036b4b73a32b960b11b6044820152606401610701565b6001600160a01b0316600090815260066020526040902080546001600160a01b03191633179055565b610de833610d33565b80610e10575033600090815260066020526040902054610e10906001600160a01b0316610d33565b610e2c5760405162461bcd60e51b815260040161070190611b2b565b6000610e3e63ffffffff841685611a60565b90506000620f4240610e5383620f423f611bce565b610e5d9190611a7f565b90506000620f4240610e7563ffffffff861688611a60565b610e8290620f423f611bce565b610e8c9190611a7f565b9050610ea78782610e9d858a611aa1565b6109189190611aa1565b610ed57f00000000000000000000000000000000000000000000000000000000000000006109188385611bce565b610ee282620f4240611a60565b60046000828254610ef39190611bce565b909155505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000084101580610f305750600254155b610f6f5760405162461bcd60e51b815260206004820152601060248201526f1c195c9a5bd9081d1bdbc81cda1bdc9d60821b6044820152606401610701565b683635c9adc5dea0000083101580610f875750600254155b610fc15760405162461bcd60e51b815260206004820152600b60248201526a66656520746f6f206c6f7760a81b6044820152606401610701565b6001600160a01b0385166000908152600560205260409020541561101c5760405162461bcd60e51b8152602060048201526012602482015271185b1c9958591e481c9959da5cdd195c995960721b6044820152606401610701565b611047337f0000000000000000000000000000000000000000000000000000000000000000856113f6565b6110518442611bce565b6001600160a01b038616600081815260056020526040908190209290925590517f97326258efdae63280617ca33884e507791c2abeed7b82acd77f1853394ef94b90610af0908790879087908790611be6565b6000620f42406004546110b79190611a7f565b905090565b4284101561110c5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610701565b6000600161113f604080514660208083019190915230828401528251808303840181526060909201909252805191012090565b6001600160a01b038a811660008181526003602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa15801561124b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906112815750876001600160a01b0316816001600160a01b0316145b6112be5760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606401610701565b6112c9818888611394565b5050505050505050565b60006112de33610d33565b80611306575033600090815260066020526040902054611306906001600160a01b0316610d33565b6113225760405162461bcd60e51b815260040161070190611b2b565b600061132e84846105e0565b905061135b7f000000000000000000000000000000000000000000000000000000000000000086836113f6565b61136585856115a4565b61137563ffffffff841685611a60565b600460008282546113869190611aa1565b909155509095945050505050565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03821661140957600080fd5b6001600160a01b0383166000908152602081905260409020548111156114665760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b6044820152606401610701565b6001600160a01b0383166000908152602081905260408120805483929061148e908490611aa1565b90915550506001600160a01b038216600090815260208190526040812080548392906114bb908490611bce565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516113e991815260200190565b6001600160a01b03821661151a57600080fd5b806002600082825461152c9190611bce565b90915550506001600160a01b03821660009081526020819052604081208054839290611559908490611bce565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b80600260008282546115b69190611aa1565b90915550506001600160a01b038216600090815260208190526040812080548392906115e3908490611aa1565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001611598565b600060208083528351808285015260005b8181101561165357858101830151858201604001528201611637565b81811115611665576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461169257600080fd5b919050565b600080604083850312156116aa57600080fd5b6116b38361167b565b946020939093013593505050565b803563ffffffff8116811461169257600080fd5b600080604083850312156116e857600080fd5b823591506116f8602084016116c1565b90509250929050565b60008060006060848603121561171657600080fd5b61171f8461167b565b925061172d6020850161167b565b9150604084013590509250925092565b60006020828403121561174f57600080fd5b6117588261167b565b9392505050565b60008083601f84011261177157600080fd5b50813567ffffffffffffffff81111561178957600080fd5b6020830191508360208285010111156117a157600080fd5b9250929050565b600080600080606085870312156117be57600080fd5b6117c78561167b565b935060208501359250604085013567ffffffffffffffff8111156117ea57600080fd5b6117f68782880161175f565b95989497509550505050565b60006020828403121561181457600080fd5b5035919050565b60008060008060006060868803121561183357600080fd5b61183c8661167b565b9450602086013567ffffffffffffffff8082111561185957600080fd5b818801915088601f83011261186d57600080fd5b81358181111561187c57600080fd5b8960208260051b850101111561189157600080fd5b6020830196508095505060408801359150808211156118af57600080fd5b506118bc8882890161175f565b969995985093965092949392505050565b600080600080608085870312156118e357600080fd5b6118ec8561167b565b935060208501359250611901604086016116c1565b915061190f606086016116c1565b905092959194509250565b60008060008060006080868803121561193257600080fd5b61193b8661167b565b94506020860135935060408601359250606086013567ffffffffffffffff81111561196557600080fd5b6118bc8882890161175f565b600080600080600080600060e0888a03121561198c57600080fd5b6119958861167b565b96506119a36020890161167b565b95506040880135945060608801359350608088013560ff811681146119c757600080fd5b9699959850939692959460a0840135945060c09093013592915050565b600080604083850312156119f757600080fd5b611a008361167b565b91506116f86020840161167b565b600080600060608486031215611a2357600080fd5b611a2c8461167b565b925060208401359150611a41604085016116c1565b90509250925092565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611a7a57611a7a611a4a565b500290565b600082611a9c57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611ab357611ab3611a4a565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b0385168152836020820152606060408201526000610d1c606083018486611ab8565b600060208284031215611b1b57600080fd5b8151801515811461175857600080fd5b6020808252601390820152723737ba1030b8383937bb32b21036b4b73a32b960691b604082015260600190565b6001600160a01b03848116825260406020808401829052908301849052600091859160608501845b87811015611ba55783611b928661167b565b1682529382019390820190600101611b80565b5098975050505050505050565b602081526000611bc6602083018486611ab8565b949350505050565b60008219821115611be157611be1611a4a565b500190565b848152836020820152606060408201526000610d1c606083018486611ab856fea2646970667358221220bb4a75d831ef6097ece5a37541ed96df08ab5145bb499ec6a3eae347c2cef42364736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See `IERC20.allowance`."
      },
      "approve(address,uint256)": {
        "details": "See `IERC20.approve`. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See `IERC20.balanceOf`."
      },
      "equity()": {
        "returns": {
          "_0": "ZCHF in dec18 format"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "_amount": "amount in dec18 format",
          "_target": "address that receives ZCHF if it's a minter"
        }
      },
      "mint(address,uint256,uint32,uint32)": {
        "params": {
          "_amount": "amount ZCHF before fees and pool contribution requested                      number in dec18 format",
          "_feesPPM": "fees in parts per million",
          "_reservePPM": "reserve requirement in parts per million",
          "_target": "address that receives ZCHF if it's a minter"
        }
      },
      "suggestMinter(address,uint256,uint256,string)": {
        "params": {
          "_applicationFee": "application fee in parts per million",
          "_applicationPeriod": "application period in seconds",
          "_message": "message string",
          "_minter": "address of the position want to add to the minters"
        }
      },
      "totalSupply()": {
        "details": "See `IERC20.totalSupply`."
      },
      "transfer(address,uint256)": {
        "details": "See `IERC20.transfer`. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See `IERC20.transferFrom`. Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "equity()": {
        "notice": "Get reserve balance (amount of ZCHF)"
      },
      "mint(address,uint256)": {
        "notice": "Mint amount of ZCHF for address _target"
      },
      "mint(address,uint256,uint32,uint32)": {
        "notice": "Mint amount of ZCHF for address _target"
      },
      "suggestMinter(address,uint256,uint256,string)": {
        "notice": "Minting is suggested either by (1) person applying for a new original position, or (2) by the minting hub when cloning a position. The minting hub has the priviledge to call with zero application fee and period."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 35,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 37,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 408,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "nonces",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1187,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "minterReserveE6",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1191,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "minters",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1195,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "positions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x80909ffEE7097da98d4DEb210e79B6231B26Cf5d",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applicationPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applicationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "MinterApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "MinterDenied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_APPLICATION_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "reservePPM",
          "type": "uint32"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountExcludingReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reservePPM",
          "type": "uint32"
        }
      ],
      "name": "burnWithReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_helpers",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "denyMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "equity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_position",
          "type": "address"
        }
      ],
      "name": "isPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reservePPM",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_feesPPM",
          "type": "uint32"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minterReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "notifyLoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_position",
          "type": "address"
        }
      ],
      "name": "registerPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "contract IReserve",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "setPositionFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_applicationPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_applicationFee",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "suggestMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xca457a8e7028703317d7094e28a94a2cf8338493c37090d9efcead3753124a1e",
  "receipt": {
    "to": null,
    "from": "0x0aB6527027EcFF1144dEc3d78154fce309ac838c",
    "contractAddress": "0x80909ffEE7097da98d4DEb210e79B6231B26Cf5d",
    "transactionIndex": 0,
    "gasUsed": "2670473",
    "logsBloom": "0x
    "blockHash": "0x14aaaa8f29d823920ed1a1ef7393248e8850f4f0ff05b56864e994443382aeae",
    "transactionHash": "0xca457a8e7028703317d7094e28a94a2cf8338493c37090d9efcead3753124a1e",
    "logs": [],
    "blockNumber": 1922431,
    "cumulativeGasUsed": "2670473",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6c496beb1d81759105068f0146200159",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applicationPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applicationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MinterApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MinterDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_APPLICATION_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"reservePPM\",\"type\":\"uint32\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountExcludingReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reservePPM\",\"type\":\"uint32\"}],\"name\":\"burnWithReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_helpers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"denyMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"equity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_position\",\"type\":\"address\"}],\"name\":\"isPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reservePPM\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_feesPPM\",\"type\":\"uint32\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_position\",\"type\":\"address\"}],\"name\":\"registerPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract IReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setPositionFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_applicationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_applicationFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"suggestMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See `IERC20.allowance`.\"},\"approve(address,uint256)\":{\"details\":\"See `IERC20.approve`. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See `IERC20.balanceOf`.\"},\"equity()\":{\"returns\":{\"_0\":\"ZCHF in dec18 format\"}},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"amount in dec18 format\",\"_target\":\"address that receives ZCHF if it's a minter\"}},\"mint(address,uint256,uint32,uint32)\":{\"params\":{\"_amount\":\"amount ZCHF before fees and pool contribution requested                      number in dec18 format\",\"_feesPPM\":\"fees in parts per million\",\"_reservePPM\":\"reserve requirement in parts per million\",\"_target\":\"address that receives ZCHF if it's a minter\"}},\"suggestMinter(address,uint256,uint256,string)\":{\"params\":{\"_applicationFee\":\"application fee in parts per million\",\"_applicationPeriod\":\"application period in seconds\",\"_message\":\"message string\",\"_minter\":\"address of the position want to add to the minters\"}},\"totalSupply()\":{\"details\":\"See `IERC20.totalSupply`.\"},\"transfer(address,uint256)\":{\"details\":\"See `IERC20.transfer`. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See `IERC20.transferFrom`. Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"equity()\":{\"notice\":\"Get reserve balance (amount of ZCHF)\"},\"mint(address,uint256)\":{\"notice\":\"Mint amount of ZCHF for address _target\"},\"mint(address,uint256,uint32,uint32)\":{\"notice\":\"Mint amount of ZCHF for address _target\"},\"suggestMinter(address,uint256,uint256,string)\":{\"notice\":\"Minting is suggested either by (1) person applying for a new original position, or (2) by the minting hub when cloning a position. The minting hub has the priviledge to call with zero application fee and period.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Frankencoin.sol\":\"Frankencoin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied and adjusted from OpenZeppelin\\n// Adjustments:\\n// - modifications to support ERC-677\\n// - removed require messages to save space\\n// - removed unnecessary require statements\\n// - removed GSN Context\\n// - upgraded to 0.8 to drop SafeMath\\n// - let name() and symbol() be implemented by subclass\\n// - infinite allowance support, with 2^255 and above considered infinite\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC677Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the `IERC20` interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using `_mint`.\\n * For a generic mechanism see `ERC20Mintable`.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See `IERC20.approve`.\\n */\\n\\nabstract contract ERC20 is IERC20 {\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    uint8 public immutable override decimals;\\n\\n    constructor(uint8 _decimals) {\\n        decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.totalSupply`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.balanceOf`.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transfer`.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.allowance`.\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.approve`.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transferFrom`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of `ERC20`;\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `value`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        if (currentAllowance < (1 << 255)){\\n            // Only decrease the allowance if it was not set to 'infinite'\\n            // Documented in /doc/infiniteallowance.md\\n            require(currentAllowance >= amount, \\\"approval not enough\\\");\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to `transfer`, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a `Transfer` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(recipient != address(0));\\n        \\n        _beforeTokenTransfer(sender, recipient, amount);\\n        require(_balances[sender]>=amount, \\\"balance not enough\\\");\\n        _balances[sender] -= amount;\\n        _balances[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    // ERC-677 functionality, can be useful for swapping and wrapping tokens\\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external override returns (bool) {\\n        bool success = transfer(recipient, amount);\\n        if (success){\\n            success = IERC677Receiver(recipient).onTokenTransfer(msg.sender, amount, data);\\n        }\\n        return success;\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a `Transfer` event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address recipient, uint256 amount) internal virtual {\\n        require(recipient != address(0));\\n\\n        _beforeTokenTransfer(address(0), recipient, amount);\\n\\n        _totalSupply += amount;\\n        _balances[recipient] += amount;\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n     /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a `Transfer` event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _totalSupply -= amount;\\n        _balances[account] -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) virtual internal {\\n    }\\n}\",\"keccak256\":\"0x14ea8f1a8ce94f6e364e65b67bf9378e34f0ff1c3adc5ff38240e170c4ab30e8\",\"license\":\"MIT\"},\"contracts/Equity.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Frankencoin.sol\\\";\\nimport \\\"./IERC677Receiver.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./MathUtil.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\n\\n/** \\n * @title Reserve pool for the Frankencoin\\n */\\ncontract Equity is ERC20, MathUtil, IReserve {\\n\\n    uint32 public constant VALUATION_FACTOR = 3;\\n    uint256 public constant MIN_HOLDING_DURATION = 5; // TEMP!!! 90 * 24 * 60 * 5; // about 90 days\\n    uint32 private constant QUORUM = 300;\\n\\n    Frankencoin immutable public zchf;\\n\\n    // should hopefully be grouped into one storage slot\\n    uint64 private totalVotesAnchorTime;\\n    uint192 private totalVotesAtAnchor;\\n\\n\\n    mapping (address => address) public delegates;\\n    mapping (address => uint64) private voteAnchor;\\n\\n    event Delegation(address indexed from, address indexed to);\\n\\n    constructor(Frankencoin zchf_) ERC20(18) {\\n        zchf = zchf_;\\n    }\\n\\n    function name() override external pure returns (string memory) {\\n        return \\\"Frankencoin Pool Share\\\";\\n    }\\n\\n    function symbol() override external pure returns (string memory) {\\n        return \\\"FPS\\\";\\n    }\\n\\n    function price() public view returns (uint256){\\n        return VALUATION_FACTOR * zchf.equity() / totalSupply();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) override internal {\\n        super._beforeTokenTransfer(from, to, amount);\\n        if (amount > 0){\\n            uint256 roundingLoss = adjustRecipientVoteAnchor(to, amount);\\n            adjustTotalVotes(from, amount, roundingLoss);\\n        }\\n    }\\n\\n    function canRedeem() external view returns (bool){\\n        return canRedeem(msg.sender);\\n    }\\n\\n    function canRedeem(address owner) public view returns (bool) {\\n        return block.number - voteAnchor[owner] >= MIN_HOLDING_DURATION;\\n    }\\n\\n     /**\\n     * @notice Decrease the total votes anchor when tokens lose their voting power due to being moved\\n     * @param from      sender\\n     * @param amount    amount to be sent\\n     */\\n    function adjustTotalVotes(address from, uint256 amount, uint256 roundingLoss) internal {\\n        uint256 lostVotes = from == address(0x0) ? 0 : (block.number - voteAnchor[from]) * amount;\\n        totalVotesAtAnchor = uint192(totalVotes() - roundingLoss - lostVotes);\\n        totalVotesAnchorTime = uint64(block.number);\\n    }\\n\\n    /**\\n     * @notice the vote anchor of the recipient is moved forward such that the number of calculated\\n     * votes does not change despite the higher balance.\\n     * @param to        receiver address\\n     * @param amount    amount to be received\\n     * @return the number of votes lost due to rounding errors\\n     */\\n    function adjustRecipientVoteAnchor(address to, uint256 amount) internal returns (uint256){\\n        if (to != address(0x0)) {\\n            uint256 recipientVotes = votes(to); // for example 21 if 7 shares were held for 3 blocks\\n            uint256 newbalance = balanceOf(to) + amount; // for example 11 if 4 shares are added\\n            voteAnchor[to] = uint64(block.number - recipientVotes / newbalance); // new example anchor is only 21 / 11 = 1 block in the past\\n            return recipientVotes % newbalance; // we have lost 21 % 11 = 10 votes\\n        } else {\\n            // optimization for burn, vote anchor of null address does not matter\\n            return 0;\\n        }\\n    }\\n\\n    function votes(address holder) public view returns (uint256) {\\n        return balanceOf(holder) * (block.number - voteAnchor[holder]);\\n    }\\n\\n    function totalVotes() public view returns (uint256) {\\n        return totalVotesAtAnchor + totalSupply() * (block.number - totalVotesAnchorTime);\\n    }\\n\\n    function isQualified(address sender, address[] calldata helpers) external override view returns (bool) {\\n        uint256 _votes = votes(sender);\\n        for (uint i=0; i<helpers.length; i++){\\n            address current = helpers[i];\\n            require(current != sender);\\n            require(canVoteFor(sender, current));\\n            for (uint j=i+1; j<helpers.length; j++){\\n                require(current != helpers[j]);\\n            }\\n            _votes += votes(current);\\n        }\\n        return _votes * 10000 >= QUORUM * totalVotes();\\n    }\\n\\n    function delegateVoteTo(address delegate) external {\\n        delegates[msg.sender] = delegate;\\n        emit Delegation(msg.sender, delegate);\\n    }\\n\\n    function canVoteFor(address delegate, address owner) public view returns (bool) {\\n        if (owner == delegate){\\n            return true;\\n        } else if (owner == address(0x0)){\\n            return false;\\n        } else {\\n            return canVoteFor(delegate, delegates[owner]);\\n        }\\n    }\\n\\n    function onTokenTransfer(address from, uint256 amount, bytes calldata) external returns (bool) {\\n        require(msg.sender == address(zchf), \\\"caller must be zchf\\\");\\n        if (totalSupply() == 0){\\n            require(amount >= ONE_DEC18, \\\"initial deposit must >= 1\\\");\\n            // initialize with 1 share\\n            _mint(from, 1 * 10**18);\\n            amount -= ONE_DEC18;\\n        } \\n        _mint(from, calculateSharesInternal(zchf.equity() - amount, amount));\\n        require(totalSupply() < 2**90, \\\"total supply exceeded\\\");\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Calculate shares received when depositing ZCHF\\n     * @dev this function is called after the transfer of ZCHF happens\\n     * @param investment ZCHF invested, in dec18 format\\n     * @return amount of shares received for the ZCHF invested\\n     */\\n    function calculateShares(uint256 investment) public view returns (uint256) {\\n        return calculateSharesInternal(zchf.equity(), investment);\\n    }\\n\\n    function calculateSharesInternal(uint256 capitalBefore, uint256 investment) internal view returns (uint256) {\\n        uint256 totalShares = totalSupply();\\n        uint256 newTotalShares = _mulD18(totalShares, _cubicRoot(_divD18(capitalBefore + investment, capitalBefore)));\\n        return newTotalShares - totalShares;\\n    }\\n\\n    function redeem(address target, uint256 shares) public returns (uint256) {\\n        require(canRedeem(msg.sender));\\n        uint256 proceeds = calculateProceeds(shares);\\n        _burn(msg.sender, shares);\\n        zchf.transfer(target, proceeds);\\n        return proceeds;\\n    }\\n\\n    /**\\n     * @notice Calculate ZCHF received when depositing shares\\n     * @dev this function is called before any transfer happens\\n     * @param shares number of shares we want to exchange for ZCHF,\\n     *               in dec18 format\\n     * @return amount of ZCHF received for the shares\\n     */\\n    function calculateProceeds(uint256 shares) public view returns (uint256) {\\n        uint256 totalShares = totalSupply();\\n        uint256 capital = zchf.equity();\\n        require(shares + ONE_DEC18 < totalShares, \\\"too many shares\\\"); // make sure there is always at least one share\\n        uint256 newTotalShares = totalShares - shares;\\n        uint256 newCapital = _mulD18(capital, _power3(_divD18(newTotalShares, totalShares)));\\n        return capital - newCapital;\\n    }\\n\\n}\",\"keccak256\":\"0xf8837bf6022bdfa20f1b4acd3b4fbfc52abfc5e9c8170d374bd06f0b22225748\",\"license\":\"MIT\"},\"contracts/Frankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Equity.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\nimport \\\"./IFrankencoin.sol\\\";\\n\\ncontract Frankencoin is ERC20, IFrankencoin {\\n\\n   uint256 public constant MIN_FEE = 1000 * (10**18);\\n   uint256 public constant MIN_APPLICATION_PERIOD = 10 days;\\n\\n   IReserve override public immutable reserve;\\n   uint256 public minterReserve;\\n\\n   mapping (address => uint256) public minters;\\n   mapping (address => address) public positions;\\n   address positionFactory;\\n\\n   event MinterApplied(address indexed minter, uint256 applicationPeriod, uint256 applicationFee, string message);\\n   event MinterDenied(address indexed minter, string message);\\n\\n   constructor() ERC20(18){\\n      reserve = new Equity(this);\\n   }\\n\\n   function name() override external pure returns (string memory){\\n      return \\\"Frankencoin V1\\\";\\n   }\\n\\n   function symbol() override external pure returns (string memory){\\n      return \\\"ZCHF\\\";\\n   }\\n\\n   function setPositionFactory(address _factory) external {\\n      require(totalSupply() == 0, \\\"set at genesis only\\\");\\n      positionFactory = _factory;\\n   }\\n\\n   \\n   /**\\n    * @notice Minting is suggested either by (1) person applying for a new original position,\\n    * or (2) by the minting hub when cloning a position. The minting hub has the priviledge\\n    * to call with zero application fee and period.\\n    * @param _minter             address of the position want to add to the minters\\n    * @param _applicationPeriod  application period in seconds\\n    * @param _applicationFee     application fee in parts per million\\n    * @param _message            message string\\n    */\\n   function suggestMinter(address _minter, uint256 _applicationPeriod, \\n      uint256 _applicationFee, string calldata _message) override external \\n   {\\n      require(_applicationPeriod >= MIN_APPLICATION_PERIOD || totalSupply() == 0 || msg.sender==positionFactory, \\\"period too short\\\");\\n      require(_applicationFee >= MIN_FEE || totalSupply() == 0 || msg.sender==positionFactory, \\\"fee too low\\\");\\n      require(minters[_minter] == 0, \\\"already registered\\\");\\n      _transfer(msg.sender, address(reserve), _applicationFee);\\n      minters[_minter] = block.timestamp + _applicationPeriod;\\n      emit MinterApplied(_minter, _applicationPeriod, _applicationFee, _message);\\n   }\\n\\n   function registerPosition(address _position) override external {\\n      require(isMinter(msg.sender), \\\"not minter\\\");\\n      positions[_position] = msg.sender;\\n   }\\n\\n   /**\\n    * @notice Get reserve balance (amount of ZCHF)\\n    * @return ZCHF in dec18 format\\n    */\\n   function equity() public view returns (uint256) {\\n      uint256 balance = balanceOf(address(reserve));\\n      if (balance <= minterReserve){\\n        return 0;\\n      } else {\\n        return balance - minterReserve;\\n      }\\n    }\\n\\n   function denyMinter(address _minter, address[] calldata _helpers, string calldata _message) override external {\\n      require(block.timestamp <= minters[_minter], \\\"too late\\\");\\n      require(reserve.isQualified(msg.sender, _helpers), \\\"not qualified\\\");\\n      delete minters[_minter];\\n      emit MinterDenied(_minter, _message);\\n   }\\n\\n   /**\\n * @notice Mint amount of ZCHF for address _target\\n * @param _target       address that receives ZCHF if it's a minter\\n * @param _amount       amount ZCHF before fees and pool contribution requested\\n *                      number in dec18 format\\n * @param _reservePPM   reserve requirement in parts per million\\n * @param _feesPPM      fees in parts per million\\n */\\n   function mint(address _target, uint256 _amount, uint32 _reservePPM, uint32 _feesPPM) \\n      override external minterOnly \\n   {\\n      uint256 reserveAmount = _amount * _reservePPM;\\n      uint256 mintAmount = reserveAmount / 1000_000;\\n      uint256 fees = (_amount * _feesPPM) / 1000_000;\\n      _mint(_target, _amount - mintAmount - fees);\\n      _mint(address(reserve), mintAmount + fees);\\n      minterReserve += reserveAmount;\\n   }\\n\\n   /**\\n    * @notice Mint amount of ZCHF for address _target\\n    * @param _target   address that receives ZCHF if it's a minter\\n    * @param _amount   amount in dec18 format\\n    */\\n   function mint(address _target, uint256 _amount) override external minterOnly {\\n      _mint(_target, _amount);\\n   }\\n\\n   function burn(uint256 _amount) external {\\n      _burn(msg.sender, _amount);\\n   }\\n\\n   function burn(uint256 amount, uint32 reservePPM) external override minterOnly {\\n      _burn(msg.sender, amount);\\n      minterReserve -= amount * reservePPM / 1000000;\\n   }\\n\\n   function burnWithReserve(uint256 _amountExcludingReserve, uint32 _reservePPM) \\n      external override minterOnly returns (uint256) \\n   {\\n      _burn(msg.sender, _amountExcludingReserve); // 41\\n      uint256 currentReserve = balanceOf(address(reserve)); // 18\\n      uint256 adjustedReservePPM = currentReserve < minterReserve ? _reservePPM * currentReserve / minterReserve : _reservePPM; // 18%\\n      uint256 freedAmount = adjustedReservePPM * _amountExcludingReserve / (1000000 - adjustedReservePPM); // 41/0.82 = 50\\n      uint256 freedReserve = _reservePPM * freedAmount / 1000000; // 10\\n      minterReserve -= freedReserve; // reduce reserve requirements by original increment\\n      _burn(address(reserve), adjustedReservePPM * freedAmount / 1000000); // only burn the share of the reserve that is still there\\n      assert (freedAmount == _amountExcludingReserve + adjustedReservePPM * freedAmount / 1000000); // TODO: probably subject to rounding errors\\n      return freedAmount;\\n   }\\n\\n   function burn(address _owner, uint256 _amount) override external minterOnly {\\n      _burn(_owner, _amount);\\n   }\\n\\n   modifier minterOnly() {\\n      require(isMinter(msg.sender) || isMinter(positions[msg.sender]), \\\"not approved minter\\\");\\n      _;\\n   }\\n\\n   function notifyLoss(uint256 _amount) override external minterOnly {\\n      uint256 reserveLeft = balanceOf(address(reserve));\\n      if (reserveLeft >= _amount){\\n         _transfer(address(reserve), msg.sender, _amount);\\n      } else {\\n         _transfer(address(reserve), msg.sender, reserveLeft);\\n         _mint(msg.sender, _amount - reserveLeft);\\n      }\\n   }\\n   function isMinter(address _minter) override public view returns (bool){\\n      return minters[_minter]!=0 && block.timestamp >= minters[_minter];\\n   }\\n\\n   function isPosition(address _position) override public view returns (address){\\n      return positions[_position];\\n   }\\n\\n}\\n\\n\",\"keccak256\":\"0xd0355bc30904afbc3faa683cb62e8d8a99f560665716628f79858868cd0319aa\",\"license\":\"MIT\"},\"contracts/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0xca95e6b6324b1c92dca4759b3da5fc251053691de885f2e23021eb5abdddea9c\",\"license\":\"MIT\"},\"contracts/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC677Receiver {\\n    \\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\n\\n}\",\"keccak256\":\"0x40703acdfa2126286b117ad0cca84c0a4ca2d3b18586765186c9bdd8ad5cf744\",\"license\":\"MIT\"},\"contracts/IFrankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\n\\ninterface IFrankencoin is IERC20 {\\n\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, \\n      uint256 _applicationFee, string calldata _message) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function isPosition(address position) external view returns (address);\\n    \\n    function mint(address target, uint256 amount) external;\\n\\n    function mint(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burn(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n    function burn(address target, uint256 amount) external;\\n\\n    function notifyLoss(uint256 amount) external;\\n\\n}\",\"keccak256\":\"0x37f4fd61a80655878619a90aa41af56bcbe711477fd84d9b5d1efc13e78afce9\",\"license\":\"MIT\"},\"contracts/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReserve {\\n   function isQualified(address sender, address[] calldata helpers) external view returns (bool);\\n}\",\"keccak256\":\"0x0fe637cc8a87dd12b7a236a86c15d52990ea3224413a1ec0e776b093b44eca0d\",\"license\":\"MIT\"},\"contracts/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/** \\n * @title Functions for share valuation\\n */\\ncontract MathUtil {\\n\\n    uint256 internal constant ONE_DEC18 = 10**18;\\n    uint256 internal constant THRESH_DEC18 =  10000000000000000;//0.01\\n    /**\\n     * @notice Cubic root with Halley approximation\\n     *         Number 1e18 decimal\\n     * @param _v     number for which we calculate x**(1/3)\\n     * @return returns _v**(1/3)\\n     */\\n    function _cubicRoot(uint256 _v) internal pure returns (uint256) {\\n        uint256 x = ONE_DEC18;\\n        uint256 xOld;\\n        bool cond;\\n        do {\\n            xOld = x;\\n            uint256 powX3 = _mulD18(_mulD18(x, x), x);\\n            x = _mulD18(x, _divD18( (powX3 + 2 * _v) , (2 * powX3 + _v)));\\n            cond = xOld > x ? xOld - x > THRESH_DEC18 : x - xOld > THRESH_DEC18;\\n        } while ( cond );\\n        return x;\\n    }\\n\\n    function _mulD18(uint256 _a, uint256 _b) internal pure returns(uint256) {\\n        return _a * _b / ONE_DEC18;\\n    }\\n\\n    function _divD18(uint256 _a, uint256 _b) internal pure returns(uint256) {\\n        return (_a * ONE_DEC18) / _b ;\\n    }\\n\\n    function _power3(uint256 _x) internal pure returns(uint256) {\\n        return _mulD18(_mulD18(_x, _x), _x);\\n    }\\n\\n}\",\"keccak256\":\"0xb5d4f2e9e32e67daec5e87f2953a5f59b4a871d1feca79ca8703a61757215dce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506012608052604051309061002490610062565b6001600160a01b039091168152602001604051809103906000f080158015610050573d6000803e3d6000fd5b506001600160a01b031660a05261006f565b611785806118d983390190565b60805160a0516118066100d360003960008181610472015281816107130152818161075601528181610781015281816107c40152818161088101528181610adc01528181610ba701528181610df40152610f6b015260006102b601526118066000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806395d89b4111610104578063b52c696d116100a2578063d1a15ff111610071578063d1a15ff114610494578063d38bb009146104a7578063dd62ed3e146104b0578063f46eccc4146104e957600080fd5b8063b52c696d14610434578063b8f8c13314610447578063cbca628e1461045a578063cd3293de1461046d57600080fd5b80639dc29fac116100de5780639dc29fac146103e8578063a47d75ad146103fb578063a9059cbb1461040e578063aa271e1a1461042157600080fd5b806395d89b41146103a25780639b404da6146103c25780639cc06358146103d557600080fd5b80634000aea01161017c57806361f3d1101161014b57806361f3d1101461034e57806370a082311461036157806376c7a3c71461038a57806391a0ac6a1461039a57600080fd5b80634000aea0146102ea57806340c10f19146102fd57806342966c681461031257806355f575101461032557600080fd5b80631a46c7e9116101b85780631a46c7e91461025057806323b872dd1461025a5780632748913b1461026d578063313ce567146102b157600080fd5b806306fdde03146101df578063095ea7b31461021b57806318160ddd1461023e575b600080fd5b60408051808201909152600e81526d4672616e6b656e636f696e20563160901b60208201525b604051610212919061127f565b60405180910390f35b61022e6102293660046112f0565b610509565b6040519015158152602001610212565b6002545b604051908152602001610212565b610242620d2f0081565b61022e61026836600461131a565b61051f565b61029961027b366004611356565b6001600160a01b039081166000908152600560205260409020541690565b6040516001600160a01b039091168152602001610212565b6102d87f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610212565b61022e6102f83660046113c1565b6105c6565b61031061030b3660046112f0565b61065c565b005b61031061032036600461141b565b6106b7565b610299610333366004611356565b6005602052600090815260409020546001600160a01b031681565b61031061035c36600461141b565b6106c4565b61024261036f366004611356565b6001600160a01b031660009081526020819052604090205490565b610242683635c9adc5dea0000081565b6102426107ba565b6040805180820190915260048152632d21a42360e11b6020820152610205565b6103106103d0366004611434565b610817565b6103106103e33660046114fa565b610993565b6103106103f63660046112f0565b610a22565b6102426104093660046114fa565b610a79565b61022e61041c3660046112f0565b610c1d565b61022e61042f366004611356565b610c2a565b610310610442366004611356565b610c6f565b610310610455366004611356565b610cda565b610310610468366004611526565b610d42565b6102997f000000000000000000000000000000000000000000000000000000000000000081565b6103106104a2366004611573565b610e3d565b61024260035481565b6102426104be3660046115ca565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102426104f7366004611356565b60046020526000908152604090205481565b6000610516338484610fed565b50600192915050565b600061052c84848461104f565b6001600160a01b0384166000908152600160209081526040808320338452909152902054600160ff1b8110156105bb57828110156105a75760405162461bcd60e51b81526020600482015260136024820152720c2e0e0e4deecc2d840dcdee840cadcdeeaced606b1b60448201526064015b60405180910390fd5b6105bb85336105b6868561160a565b610fed565b506001949350505050565b6000806105d38686610c1d565b9050801561065357604051635260769b60e11b81526001600160a01b0387169063a4c0ed369061060d90339089908990899060040161164a565b6020604051808303816000875af115801561062c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610650919061167c565b90505b95945050505050565b61066533610c2a565b8061068d57503360009081526005602052604090205461068d906001600160a01b0316610c2a565b6106a95760405162461bcd60e51b815260040161059e9061169e565b6106b38282611160565b5050565b6106c133826111fd565b50565b6106cd33610c2a565b806106f55750336000908152600560205260409020546106f5906001600160a01b0316610c2a565b6107115760405162461bcd60e51b815260040161059e9061169e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660009081526020819052604090205481811061077c576106b37f0000000000000000000000000000000000000000000000000000000000000000338461104f565b6107a77f0000000000000000000000000000000000000000000000000000000000000000338361104f565b6106b3336107b5838561160a565b611160565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600090815260208190526040812054600354811161080457600091505090565b600354610811908261160a565b91505090565b6001600160a01b03851660009081526004602052604090205442111561086a5760405162461bcd60e51b8152602060048201526008602482015267746f6f206c61746560c01b604482015260640161059e565b604051635e1121cf60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635e1121cf906108ba903390889088906004016116cb565b602060405180830381865afa1580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb919061167c565b6109375760405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081c5d585b1a599a5959609a1b604482015260640161059e565b6001600160a01b03851660008181526004602052604080822091909155517fd60c86e83346fdbe3124cb7d1cba32973a9f62d05c4ec801bfe6c09d10380381906109849085908590611725565b60405180910390a25050505050565b61099c33610c2a565b806109c45750336000908152600560205260409020546109c4906001600160a01b0316610c2a565b6109e05760405162461bcd60e51b815260040161059e9061169e565b6109ea33836111fd565b620f42406109fe63ffffffff831684611741565b610a089190611760565b60036000828254610a19919061160a565b90915550505050565b610a2b33610c2a565b80610a53575033600090815260056020526040902054610a53906001600160a01b0316610c2a565b610a6f5760405162461bcd60e51b815260040161059e9061169e565b6106b382826111fd565b6000610a8433610c2a565b80610aac575033600090815260056020526040902054610aac906001600160a01b0316610c2a565b610ac85760405162461bcd60e51b815260040161059e9061169e565b610ad233846111fd565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600090815260208190526040812054905060006003548210610b24578363ffffffff16610b41565b600354610b378363ffffffff8716611741565b610b419190611760565b90506000610b5282620f424061160a565b610b5c8784611741565b610b669190611760565b90506000620f4240610b7e8363ffffffff8916611741565b610b889190611760565b90508060036000828254610b9c919061160a565b90915550610be390507f0000000000000000000000000000000000000000000000000000000000000000620f4240610bd48587611741565b610bde9190611760565b6111fd565b620f4240610bf18385611741565b610bfb9190611760565b610c059088611782565b8214610c1357610c1361179a565b5095945050505050565b600061051633848461104f565b6001600160a01b03811660009081526004602052604081205415801590610c6957506001600160a01b0382166000908152600460205260409020544210155b92915050565b610c7833610c2a565b610cb15760405162461bcd60e51b815260206004820152600a6024820152693737ba1036b4b73a32b960b11b604482015260640161059e565b6001600160a01b0316600090815260056020526040902080546001600160a01b03191633179055565b60025415610d205760405162461bcd60e51b81526020600482015260136024820152727365742061742067656e65736973206f6e6c7960681b604482015260640161059e565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b610d4b33610c2a565b80610d73575033600090815260056020526040902054610d73906001600160a01b0316610c2a565b610d8f5760405162461bcd60e51b815260040161059e9061169e565b6000610da163ffffffff841685611741565b90506000610db2620f424083611760565b90506000620f4240610dca63ffffffff861688611741565b610dd49190611760565b9050610def8782610de5858a61160a565b6107b5919061160a565b610e1d7f00000000000000000000000000000000000000000000000000000000000000006107b58385611782565b8260036000828254610e2f9190611782565b909155505050505050505050565b620d2f0084101580610e4f5750600254155b80610e6457506006546001600160a01b031633145b610ea35760405162461bcd60e51b815260206004820152601060248201526f1c195c9a5bd9081d1bdbc81cda1bdc9d60821b604482015260640161059e565b683635c9adc5dea0000083101580610ebb5750600254155b80610ed057506006546001600160a01b031633145b610f0a5760405162461bcd60e51b815260206004820152600b60248201526a66656520746f6f206c6f7760a81b604482015260640161059e565b6001600160a01b03851660009081526004602052604090205415610f655760405162461bcd60e51b8152602060048201526012602482015271185b1c9958591e481c9959da5cdd195c995960721b604482015260640161059e565b610f90337f00000000000000000000000000000000000000000000000000000000000000008561104f565b610f9a8442611782565b6001600160a01b038616600081815260046020526040908190209290925590517f97326258efdae63280617ca33884e507791c2abeed7b82acd77f1853394ef94b906109849087908790879087906117b0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03821661106257600080fd5b6001600160a01b0383166000908152602081905260409020548111156110bf5760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b604482015260640161059e565b6001600160a01b038316600090815260208190526040812080548392906110e790849061160a565b90915550506001600160a01b03821660009081526020819052604081208054839290611114908490611782565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161104291815260200190565b6001600160a01b03821661117357600080fd5b80600260008282546111859190611782565b90915550506001600160a01b038216600090815260208190526040812080548392906111b2908490611782565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b806002600082825461120f919061160a565b90915550506001600160a01b0382166000908152602081905260408120805483929061123c90849061160a565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016111f1565b600060208083528351808285015260005b818110156112ac57858101830151858201604001528201611290565b818111156112be576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146112eb57600080fd5b919050565b6000806040838503121561130357600080fd5b61130c836112d4565b946020939093013593505050565b60008060006060848603121561132f57600080fd5b611338846112d4565b9250611346602085016112d4565b9150604084013590509250925092565b60006020828403121561136857600080fd5b611371826112d4565b9392505050565b60008083601f84011261138a57600080fd5b50813567ffffffffffffffff8111156113a257600080fd5b6020830191508360208285010111156113ba57600080fd5b9250929050565b600080600080606085870312156113d757600080fd5b6113e0856112d4565b935060208501359250604085013567ffffffffffffffff81111561140357600080fd5b61140f87828801611378565b95989497509550505050565b60006020828403121561142d57600080fd5b5035919050565b60008060008060006060868803121561144c57600080fd5b611455866112d4565b9450602086013567ffffffffffffffff8082111561147257600080fd5b818801915088601f83011261148657600080fd5b81358181111561149557600080fd5b8960208260051b85010111156114aa57600080fd5b6020830196508095505060408801359150808211156114c857600080fd5b506114d588828901611378565b969995985093965092949392505050565b803563ffffffff811681146112eb57600080fd5b6000806040838503121561150d57600080fd5b8235915061151d602084016114e6565b90509250929050565b6000806000806080858703121561153c57600080fd5b611545856112d4565b93506020850135925061155a604086016114e6565b9150611568606086016114e6565b905092959194509250565b60008060008060006080868803121561158b57600080fd5b611594866112d4565b94506020860135935060408601359250606086013567ffffffffffffffff8111156115be57600080fd5b6114d588828901611378565b600080604083850312156115dd57600080fd5b6115e6836112d4565b915061151d602084016112d4565b634e487b7160e01b600052601160045260246000fd5b60008282101561161c5761161c6115f4565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b0385168152836020820152606060408201526000611672606083018486611621565b9695505050505050565b60006020828403121561168e57600080fd5b8151801515811461137157600080fd5b6020808252601390820152723737ba1030b8383937bb32b21036b4b73a32b960691b604082015260600190565b6001600160a01b03848116825260406020808401829052908301849052600091859160608501845b878110156117185783611705866112d4565b16825293820193908201906001016116f3565b5098975050505050505050565b602081526000611739602083018486611621565b949350505050565b600081600019048311821515161561175b5761175b6115f4565b500290565b60008261177d57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611795576117956115f4565b500190565b634e487b7160e01b600052600160045260246000fd5b84815283602082015260606040820152600061167260608301848661162156fea264697066735822122066c0a3892a32ce510e601e21638721cd294bd5191d62c06fb1df2eb2485b079e64736f6c634300080d003360c060405234801561001057600080fd5b5060405161178538038061178583398101604081905261002f91610045565b60126080526001600160a01b031660a052610075565b60006020828403121561005757600080fd5b81516001600160a01b038116811461006e57600080fd5b9392505050565b60805160a0516116c16100c4600039600081816103df0152818161053d015281816106c60152818161097f01528181610a2101528181610b170152610c1e0152600061027301526116c16000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80635e1121cf116100de578063a9059cbb11610097578063c4d4803a11610071578063c4d4803a146103da578063d8bff5a514610401578063dd62ed3e14610414578063f97ed5091461044d57600080fd5b8063a9059cbb146103ac578063ad08ce5b146103bf578063b0c2bf06146103d257600080fd5b80635e1121cf1461032157806370a082311461033457806395d89b411461035d5780639823004f1461037c578063a035b1fe14610391578063a4c0ed361461039957600080fd5b806323b872dd1161014b5780633c835ab0116101255780633c835ab0146102a75780633ec16194146102ba5780634000aea0146102cd578063587cde1e146102e057600080fd5b806323b872dd1461023e578063250f25f414610251578063313ce5671461026e57600080fd5b806306fdde0314610193578063095ea7b3146101d75780630d15fd77146101fa578063151535b91461021057806318160ddd146102235780631e9a69501461022b575b600080fd5b6040805180820190915260168152754672616e6b656e636f696e20506f6f6c20536861726560501b60208201525b6040516101ce91906112ec565b60405180910390f35b6101ea6101e536600461135d565b610455565b60405190151581526020016101ce565b61020261046c565b6040519081526020016101ce565b6101ea61021e366004611387565b6104b5565b600254610202565b61020261023936600461135d565b6104ec565b6101ea61024c3660046113a2565b6105b2565b610259600381565b60405163ffffffff90911681526020016101ce565b6102957f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016101ce565b6101ea6102b53660046113de565b610659565b6102026102c8366004611411565b6106bf565b6101ea6102db36600461142a565b61074c565b6103096102ee366004611387565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101ce565b6101ea61032f3660046114b1565b6107e2565b610202610342366004611387565b6001600160a01b031660009081526020819052604090205490565b60408051808201909152600381526246505360e81b60208201526101c1565b61038f61038a366004611387565b61091b565b005b610202610972565b6101ea6103a736600461142a565b610a14565b6101ea6103ba36600461135d565b610bff565b6102026103cd366004611411565b610c0c565b610202600581565b6103097f000000000000000000000000000000000000000000000000000000000000000081565b61020261040f366004611387565b610d33565b6102026104223660046113de565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101ea610d83565b6000610462338484610d8e565b5060015b92915050565b6003546000906104869067ffffffffffffffff164361154d565b6002546104939190611564565b6003546104b09190600160401b90046001600160c01b0316611583565b905090565b6001600160a01b03811660009081526005602081905260408220546104e49067ffffffffffffffff164361154d565b101592915050565b60006104f7336104b5565b61050057600080fd5b600061050b83610c0c565b90506105173384610df0565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105aa919061159b565b509392505050565b60006105bf848484610e86565b6001600160a01b0384166000908152600160209081526040808320338452909152902054600160ff1b81101561064e578281101561063a5760405162461bcd60e51b81526020600482015260136024820152720c2e0e0e4deecc2d840dcdee840cadcdeeaced606b1b60448201526064015b60405180910390fd5b61064e8533610649868561154d565b610d8e565b506001949350505050565b6000826001600160a01b0316826001600160a01b03160361067c57506001610466565b6001600160a01b03821661069257506000610466565b6001600160a01b038083166000908152600460205260409020546106b891859116610659565b9050610466565b60006104667f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a0ac6a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610722573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074691906115bd565b83610fa2565b6000806107598686610bff565b905080156107d957604051635260769b60e11b81526001600160a01b0387169063a4c0ed36906107939033908990899089906004016115d6565b6020604051808303816000875af11580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d6919061159b565b90505b95945050505050565b6000806107ee85610d33565b905060005b838110156108ef57600085858381811061080f5761080f61161e565b90506020020160208101906108249190611387565b9050866001600160a01b0316816001600160a01b03160361084457600080fd5b61084e8782610659565b61085757600080fd5b6000610864836001611583565b90505b858110156108c5578686828181106108815761088161161e565b90506020020160208101906108969190611387565b6001600160a01b0316826001600160a01b0316036108b357600080fd5b806108bd81611634565b915050610867565b506108cf81610d33565b6108d99084611583565b92505080806108e790611634565b9150506107f3565b506108f861046c565b6109049061012c611564565b61091082612710611564565b101595945050505050565b3360008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590519092917fd000f39f92c3ed77f890f16b6ced1555e0ab2cdf470522d2210de67d8c83d45b91a350565b600061097d60025490565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a0ac6a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ff91906115bd565b610a0a906003611564565b6104b09190611663565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a845760405162461bcd60e51b815260206004820152601360248201527231b0b63632b91036bab9ba103132903d31b43360691b6044820152606401610631565b600254600003610b0d57670de0b6b3a7640000841015610ae65760405162461bcd60e51b815260206004820152601960248201527f696e697469616c206465706f736974206d757374203e3d2031000000000000006044820152606401610631565b610af885670de0b6b3a7640000610fdd565b610b0a670de0b6b3a76400008561154d565b93505b610bac85610ba7867f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a0ac6a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9791906115bd565b610ba1919061154d565b87610fa2565b610fdd565b6001605a1b610bba60025490565b1061064e5760405162461bcd60e51b81526020600482015260156024820152741d1bdd185b081cdd5c1c1b1e48195e18d959591959605a1b6044820152606401610631565b6000610462338484610e86565b600080610c1860025490565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a0ac6a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9e91906115bd565b905081610cb3670de0b6b3a764000086611583565b10610cf25760405162461bcd60e51b815260206004820152600f60248201526e746f6f206d616e792073686172657360881b6044820152606401610631565b6000610cfe858461154d565b90506000610d1d83610d18610d13858861107e565b6110a4565b6110b5565b9050610d29818461154d565b9695505050505050565b6001600160a01b038116600090815260056020526040812054610d609067ffffffffffffffff164361154d565b6001600160a01b0383166000908152602081905260409020546104669190611564565b60006104b0336104b5565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b610dfc826000836110ca565b8060026000828254610e0e919061154d565b90915550506001600160a01b03821660009081526020819052604081208054839290610e3b90849061154d565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6001600160a01b038216610e9957600080fd5b610ea48383836110ca565b6001600160a01b038316600090815260208190526040902054811115610f015760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b6044820152606401610631565b6001600160a01b03831660009081526020819052604081208054839290610f2990849061154d565b90915550506001600160a01b03821660009081526020819052604081208054839290610f56908490611583565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610de391815260200190565b600080610fae60025490565b90506000610fd182610d18610fcc610fc6888a611583565b8961107e565b6110f0565b90506107d9828261154d565b6001600160a01b038216610ff057600080fd5b610ffc600083836110ca565b806002600082825461100e9190611583565b90915550506001600160a01b0382166000908152602081905260408120805483929061103b908490611583565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610e7a565b600081611093670de0b6b3a764000085611564565b61109d9190611663565b9392505050565b60006104666110b383846110b5565b835b6000670de0b6b3a76400006110938385611564565b80156110eb5760006110dc8383611195565b90506110e9848383611248565b505b505050565b6000670de0b6b3a764000081805b829150600061111661111085866110b5565b856110b5565b905061114f84610d1861112a896002611564565b6111349085611583565b89611140866002611564565b61114a9190611583565b61107e565b935083831161117057662386f26fc1000061116a848661154d565b11611184565b662386f26fc10000611182858561154d565b115b915050806110fe5750909392505050565b60006001600160a01b038316156112405760006111b184610d33565b90506000836111d5866001600160a01b031660009081526020819052604090205490565b6111df9190611583565b90506111eb8183611663565b6111f5904361154d565b6001600160a01b0386166000908152600560205260409020805467ffffffffffffffff191667ffffffffffffffff929092169190911790556112378183611677565b92505050610466565b506000610466565b60006001600160a01b03841615611297576001600160a01b03841660009081526005602052604090205483906112889067ffffffffffffffff164361154d565b6112929190611564565b61129a565b60005b905080826112a661046c565b6112b0919061154d565b6112ba919061154d565b4367ffffffffffffffff166001600160c01b0391909116600160401b0267ffffffffffffffff19161760035550505050565b600060208083528351808285015260005b81811015611319578581018301518582016040015282016112fd565b8181111561132b576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461135857600080fd5b919050565b6000806040838503121561137057600080fd5b61137983611341565b946020939093013593505050565b60006020828403121561139957600080fd5b61109d82611341565b6000806000606084860312156113b757600080fd5b6113c084611341565b92506113ce60208501611341565b9150604084013590509250925092565b600080604083850312156113f157600080fd5b6113fa83611341565b915061140860208401611341565b90509250929050565b60006020828403121561142357600080fd5b5035919050565b6000806000806060858703121561144057600080fd5b61144985611341565b935060208501359250604085013567ffffffffffffffff8082111561146d57600080fd5b818701915087601f83011261148157600080fd5b81358181111561149057600080fd5b8860208285010111156114a257600080fd5b95989497505060200194505050565b6000806000604084860312156114c657600080fd5b6114cf84611341565b9250602084013567ffffffffffffffff808211156114ec57600080fd5b818601915086601f83011261150057600080fd5b81358181111561150f57600080fd5b8760208260051b850101111561152457600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052601160045260246000fd5b60008282101561155f5761155f611537565b500390565b600081600019048311821515161561157e5761157e611537565b500290565b6000821982111561159657611596611537565b500190565b6000602082840312156115ad57600080fd5b8151801515811461109d57600080fd5b6000602082840312156115cf57600080fd5b5051919050565b6001600160a01b0385168152602081018490526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161164657611646611537565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826116725761167261164d565b500490565b6000826116865761168661164d565b50069056fea26469706673582212204511f0fa9142d50aa38e81b0eadfdc4722b42925bdc9b8146f383f6aa390b85364736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806395d89b4111610104578063b52c696d116100a2578063d1a15ff111610071578063d1a15ff114610494578063d38bb009146104a7578063dd62ed3e146104b0578063f46eccc4146104e957600080fd5b8063b52c696d14610434578063b8f8c13314610447578063cbca628e1461045a578063cd3293de1461046d57600080fd5b80639dc29fac116100de5780639dc29fac146103e8578063a47d75ad146103fb578063a9059cbb1461040e578063aa271e1a1461042157600080fd5b806395d89b41146103a25780639b404da6146103c25780639cc06358146103d557600080fd5b80634000aea01161017c57806361f3d1101161014b57806361f3d1101461034e57806370a082311461036157806376c7a3c71461038a57806391a0ac6a1461039a57600080fd5b80634000aea0146102ea57806340c10f19146102fd57806342966c681461031257806355f575101461032557600080fd5b80631a46c7e9116101b85780631a46c7e91461025057806323b872dd1461025a5780632748913b1461026d578063313ce567146102b157600080fd5b806306fdde03146101df578063095ea7b31461021b57806318160ddd1461023e575b600080fd5b60408051808201909152600e81526d4672616e6b656e636f696e20563160901b60208201525b604051610212919061127f565b60405180910390f35b61022e6102293660046112f0565b610509565b6040519015158152602001610212565b6002545b604051908152602001610212565b610242620d2f0081565b61022e61026836600461131a565b61051f565b61029961027b366004611356565b6001600160a01b039081166000908152600560205260409020541690565b6040516001600160a01b039091168152602001610212565b6102d87f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610212565b61022e6102f83660046113c1565b6105c6565b61031061030b3660046112f0565b61065c565b005b61031061032036600461141b565b6106b7565b610299610333366004611356565b6005602052600090815260409020546001600160a01b031681565b61031061035c36600461141b565b6106c4565b61024261036f366004611356565b6001600160a01b031660009081526020819052604090205490565b610242683635c9adc5dea0000081565b6102426107ba565b6040805180820190915260048152632d21a42360e11b6020820152610205565b6103106103d0366004611434565b610817565b6103106103e33660046114fa565b610993565b6103106103f63660046112f0565b610a22565b6102426104093660046114fa565b610a79565b61022e61041c3660046112f0565b610c1d565b61022e61042f366004611356565b610c2a565b610310610442366004611356565b610c6f565b610310610455366004611356565b610cda565b610310610468366004611526565b610d42565b6102997f000000000000000000000000000000000000000000000000000000000000000081565b6103106104a2366004611573565b610e3d565b61024260035481565b6102426104be3660046115ca565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102426104f7366004611356565b60046020526000908152604090205481565b6000610516338484610fed565b50600192915050565b600061052c84848461104f565b6001600160a01b0384166000908152600160209081526040808320338452909152902054600160ff1b8110156105bb57828110156105a75760405162461bcd60e51b81526020600482015260136024820152720c2e0e0e4deecc2d840dcdee840cadcdeeaced606b1b60448201526064015b60405180910390fd5b6105bb85336105b6868561160a565b610fed565b506001949350505050565b6000806105d38686610c1d565b9050801561065357604051635260769b60e11b81526001600160a01b0387169063a4c0ed369061060d90339089908990899060040161164a565b6020604051808303816000875af115801561062c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610650919061167c565b90505b95945050505050565b61066533610c2a565b8061068d57503360009081526005602052604090205461068d906001600160a01b0316610c2a565b6106a95760405162461bcd60e51b815260040161059e9061169e565b6106b38282611160565b5050565b6106c133826111fd565b50565b6106cd33610c2a565b806106f55750336000908152600560205260409020546106f5906001600160a01b0316610c2a565b6107115760405162461bcd60e51b815260040161059e9061169e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660009081526020819052604090205481811061077c576106b37f0000000000000000000000000000000000000000000000000000000000000000338461104f565b6107a77f0000000000000000000000000000000000000000000000000000000000000000338361104f565b6106b3336107b5838561160a565b611160565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600090815260208190526040812054600354811161080457600091505090565b600354610811908261160a565b91505090565b6001600160a01b03851660009081526004602052604090205442111561086a5760405162461bcd60e51b8152602060048201526008602482015267746f6f206c61746560c01b604482015260640161059e565b604051635e1121cf60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635e1121cf906108ba903390889088906004016116cb565b602060405180830381865afa1580156108d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fb919061167c565b6109375760405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081c5d585b1a599a5959609a1b604482015260640161059e565b6001600160a01b03851660008181526004602052604080822091909155517fd60c86e83346fdbe3124cb7d1cba32973a9f62d05c4ec801bfe6c09d10380381906109849085908590611725565b60405180910390a25050505050565b61099c33610c2a565b806109c45750336000908152600560205260409020546109c4906001600160a01b0316610c2a565b6109e05760405162461bcd60e51b815260040161059e9061169e565b6109ea33836111fd565b620f42406109fe63ffffffff831684611741565b610a089190611760565b60036000828254610a19919061160a565b90915550505050565b610a2b33610c2a565b80610a53575033600090815260056020526040902054610a53906001600160a01b0316610c2a565b610a6f5760405162461bcd60e51b815260040161059e9061169e565b6106b382826111fd565b6000610a8433610c2a565b80610aac575033600090815260056020526040902054610aac906001600160a01b0316610c2a565b610ac85760405162461bcd60e51b815260040161059e9061169e565b610ad233846111fd565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600090815260208190526040812054905060006003548210610b24578363ffffffff16610b41565b600354610b378363ffffffff8716611741565b610b419190611760565b90506000610b5282620f424061160a565b610b5c8784611741565b610b669190611760565b90506000620f4240610b7e8363ffffffff8916611741565b610b889190611760565b90508060036000828254610b9c919061160a565b90915550610be390507f0000000000000000000000000000000000000000000000000000000000000000620f4240610bd48587611741565b610bde9190611760565b6111fd565b620f4240610bf18385611741565b610bfb9190611760565b610c059088611782565b8214610c1357610c1361179a565b5095945050505050565b600061051633848461104f565b6001600160a01b03811660009081526004602052604081205415801590610c6957506001600160a01b0382166000908152600460205260409020544210155b92915050565b610c7833610c2a565b610cb15760405162461bcd60e51b815260206004820152600a6024820152693737ba1036b4b73a32b960b11b604482015260640161059e565b6001600160a01b0316600090815260056020526040902080546001600160a01b03191633179055565b60025415610d205760405162461bcd60e51b81526020600482015260136024820152727365742061742067656e65736973206f6e6c7960681b604482015260640161059e565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b610d4b33610c2a565b80610d73575033600090815260056020526040902054610d73906001600160a01b0316610c2a565b610d8f5760405162461bcd60e51b815260040161059e9061169e565b6000610da163ffffffff841685611741565b90506000610db2620f424083611760565b90506000620f4240610dca63ffffffff861688611741565b610dd49190611760565b9050610def8782610de5858a61160a565b6107b5919061160a565b610e1d7f00000000000000000000000000000000000000000000000000000000000000006107b58385611782565b8260036000828254610e2f9190611782565b909155505050505050505050565b620d2f0084101580610e4f5750600254155b80610e6457506006546001600160a01b031633145b610ea35760405162461bcd60e51b815260206004820152601060248201526f1c195c9a5bd9081d1bdbc81cda1bdc9d60821b604482015260640161059e565b683635c9adc5dea0000083101580610ebb5750600254155b80610ed057506006546001600160a01b031633145b610f0a5760405162461bcd60e51b815260206004820152600b60248201526a66656520746f6f206c6f7760a81b604482015260640161059e565b6001600160a01b03851660009081526004602052604090205415610f655760405162461bcd60e51b8152602060048201526012602482015271185b1c9958591e481c9959da5cdd195c995960721b604482015260640161059e565b610f90337f00000000000000000000000000000000000000000000000000000000000000008561104f565b610f9a8442611782565b6001600160a01b038616600081815260046020526040908190209290925590517f97326258efdae63280617ca33884e507791c2abeed7b82acd77f1853394ef94b906109849087908790879087906117b0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03821661106257600080fd5b6001600160a01b0383166000908152602081905260409020548111156110bf5760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b604482015260640161059e565b6001600160a01b038316600090815260208190526040812080548392906110e790849061160a565b90915550506001600160a01b03821660009081526020819052604081208054839290611114908490611782565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161104291815260200190565b6001600160a01b03821661117357600080fd5b80600260008282546111859190611782565b90915550506001600160a01b038216600090815260208190526040812080548392906111b2908490611782565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b806002600082825461120f919061160a565b90915550506001600160a01b0382166000908152602081905260408120805483929061123c90849061160a565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016111f1565b600060208083528351808285015260005b818110156112ac57858101830151858201604001528201611290565b818111156112be576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146112eb57600080fd5b919050565b6000806040838503121561130357600080fd5b61130c836112d4565b946020939093013593505050565b60008060006060848603121561132f57600080fd5b611338846112d4565b9250611346602085016112d4565b9150604084013590509250925092565b60006020828403121561136857600080fd5b611371826112d4565b9392505050565b60008083601f84011261138a57600080fd5b50813567ffffffffffffffff8111156113a257600080fd5b6020830191508360208285010111156113ba57600080fd5b9250929050565b600080600080606085870312156113d757600080fd5b6113e0856112d4565b935060208501359250604085013567ffffffffffffffff81111561140357600080fd5b61140f87828801611378565b95989497509550505050565b60006020828403121561142d57600080fd5b5035919050565b60008060008060006060868803121561144c57600080fd5b611455866112d4565b9450602086013567ffffffffffffffff8082111561147257600080fd5b818801915088601f83011261148657600080fd5b81358181111561149557600080fd5b8960208260051b85010111156114aa57600080fd5b6020830196508095505060408801359150808211156114c857600080fd5b506114d588828901611378565b969995985093965092949392505050565b803563ffffffff811681146112eb57600080fd5b6000806040838503121561150d57600080fd5b8235915061151d602084016114e6565b90509250929050565b6000806000806080858703121561153c57600080fd5b611545856112d4565b93506020850135925061155a604086016114e6565b9150611568606086016114e6565b905092959194509250565b60008060008060006080868803121561158b57600080fd5b611594866112d4565b94506020860135935060408601359250606086013567ffffffffffffffff8111156115be57600080fd5b6114d588828901611378565b600080604083850312156115dd57600080fd5b6115e6836112d4565b915061151d602084016112d4565b634e487b7160e01b600052601160045260246000fd5b60008282101561161c5761161c6115f4565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b0385168152836020820152606060408201526000611672606083018486611621565b9695505050505050565b60006020828403121561168e57600080fd5b8151801515811461137157600080fd5b6020808252601390820152723737ba1030b8383937bb32b21036b4b73a32b960691b604082015260600190565b6001600160a01b03848116825260406020808401829052908301849052600091859160608501845b878110156117185783611705866112d4565b16825293820193908201906001016116f3565b5098975050505050505050565b602081526000611739602083018486611621565b949350505050565b600081600019048311821515161561175b5761175b6115f4565b500290565b60008261177d57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115611795576117956115f4565b500190565b634e487b7160e01b600052600160045260246000fd5b84815283602082015260606040820152600061167260608301848661162156fea264697066735822122066c0a3892a32ce510e601e21638721cd294bd5191d62c06fb1df2eb2485b079e64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See `IERC20.allowance`."
      },
      "approve(address,uint256)": {
        "details": "See `IERC20.approve`. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See `IERC20.balanceOf`."
      },
      "equity()": {
        "returns": {
          "_0": "ZCHF in dec18 format"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "_amount": "amount in dec18 format",
          "_target": "address that receives ZCHF if it's a minter"
        }
      },
      "mint(address,uint256,uint32,uint32)": {
        "params": {
          "_amount": "amount ZCHF before fees and pool contribution requested                      number in dec18 format",
          "_feesPPM": "fees in parts per million",
          "_reservePPM": "reserve requirement in parts per million",
          "_target": "address that receives ZCHF if it's a minter"
        }
      },
      "suggestMinter(address,uint256,uint256,string)": {
        "params": {
          "_applicationFee": "application fee in parts per million",
          "_applicationPeriod": "application period in seconds",
          "_message": "message string",
          "_minter": "address of the position want to add to the minters"
        }
      },
      "totalSupply()": {
        "details": "See `IERC20.totalSupply`."
      },
      "transfer(address,uint256)": {
        "details": "See `IERC20.transfer`. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See `IERC20.transferFrom`. Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "equity()": {
        "notice": "Get reserve balance (amount of ZCHF)"
      },
      "mint(address,uint256)": {
        "notice": "Mint amount of ZCHF for address _target"
      },
      "mint(address,uint256,uint32,uint32)": {
        "notice": "Mint amount of ZCHF for address _target"
      },
      "suggestMinter(address,uint256,uint256,string)": {
        "notice": "Minting is suggested either by (1) person applying for a new original position, or (2) by the minting hub when cloning a position. The minting hub has the priviledge to call with zero application fee and period."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 35,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 37,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1078,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "minterReserve",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1082,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "minters",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1086,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "positions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1088,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "positionFactory",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
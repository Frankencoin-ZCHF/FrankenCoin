{
  "address": "0xC578aC4f81112a87FD6eec13aE6e2C4d17129D4a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minApplicationPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applicationPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "applicationFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "MinterApplied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "MinterDenied",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_APPLICATION_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "reservePPM",
          "type": "uint32"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountExcludingReserve",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reservePPM",
          "type": "uint32"
        }
      ],
      "name": "burnWithReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_helpers",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "denyMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "equity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_position",
          "type": "address"
        }
      ],
      "name": "isPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reservePPM",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_feesPPM",
          "type": "uint32"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minterReserve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "notifyLoss",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_position",
          "type": "address"
        }
      ],
      "name": "registerPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "contract IReserve",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "name": "setPositionFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_applicationPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_applicationFee",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_message",
          "type": "string"
        }
      ],
      "name": "suggestMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "transferAndCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf76a35e7f8e14699466a27c08635517ab769b0f98cb893cf0b6c93453542404",
  "receipt": {
    "to": null,
    "from": "0x0aB6527027EcFF1144dEc3d78154fce309ac838c",
    "contractAddress": "0xC578aC4f81112a87FD6eec13aE6e2C4d17129D4a",
    "transactionIndex": 4,
    "gasUsed": "2687860",
    "logsBloom": "0x
    "blockHash": "0x2085d359b93da4c47188018515acad29470c68a0096c707e1602a63632ef670b",
    "transactionHash": "0xbf76a35e7f8e14699466a27c08635517ab769b0f98cb893cf0b6c93453542404",
    "logs": [],
    "blockNumber": 1953400,
    "cumulativeGasUsed": "2771860",
    "status": 1,
    "byzantium": true
  },
  "args": [
    900
  ],
  "numDeployments": 1,
  "solcInputHash": "74fc618b3c683e5474ab42d58485e09c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minApplicationPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applicationPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"applicationFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MinterApplied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"MinterDenied\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_APPLICATION_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"reservePPM\",\"type\":\"uint32\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountExcludingReserve\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reservePPM\",\"type\":\"uint32\"}],\"name\":\"burnWithReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_helpers\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"denyMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"equity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_position\",\"type\":\"address\"}],\"name\":\"isPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reservePPM\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_feesPPM\",\"type\":\"uint32\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minterReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyLoss\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_position\",\"type\":\"address\"}],\"name\":\"registerPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract IReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"setPositionFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_applicationPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_applicationFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"suggestMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See `IERC20.allowance`.\"},\"approve(address,uint256)\":{\"details\":\"See `IERC20.approve`. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See `IERC20.balanceOf`.\"},\"equity()\":{\"returns\":{\"_0\":\"ZCHF in dec18 format\"}},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"amount in dec18 format\",\"_target\":\"address that receives ZCHF if it's a minter\"}},\"mint(address,uint256,uint32,uint32)\":{\"params\":{\"_amount\":\"amount ZCHF before fees and pool contribution requested                      number in dec18 format\",\"_feesPPM\":\"fees in parts per million\",\"_reservePPM\":\"reserve requirement in parts per million\",\"_target\":\"address that receives ZCHF if it's a minter\"}},\"suggestMinter(address,uint256,uint256,string)\":{\"params\":{\"_applicationFee\":\"application fee in parts per million\",\"_applicationPeriod\":\"application period in seconds\",\"_message\":\"message string\",\"_minter\":\"address of the position want to add to the minters\"}},\"totalSupply()\":{\"details\":\"See `IERC20.totalSupply`.\"},\"transfer(address,uint256)\":{\"details\":\"See `IERC20.transfer`. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See `IERC20.transferFrom`. Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"equity()\":{\"notice\":\"Get reserve balance (amount of ZCHF)\"},\"mint(address,uint256)\":{\"notice\":\"Mint amount of ZCHF for address _target\"},\"mint(address,uint256,uint32,uint32)\":{\"notice\":\"Mint amount of ZCHF for address _target\"},\"suggestMinter(address,uint256,uint256,string)\":{\"notice\":\"Minting is suggested either by (1) person applying for a new original position, or (2) by the minting hub when cloning a position. The minting hub has the priviledge to call with zero application fee and period.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Frankencoin.sol\":\"Frankencoin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copied and adjusted from OpenZeppelin\\n// Adjustments:\\n// - modifications to support ERC-677\\n// - removed require messages to save space\\n// - removed unnecessary require statements\\n// - removed GSN Context\\n// - upgraded to 0.8 to drop SafeMath\\n// - let name() and symbol() be implemented by subclass\\n// - infinite allowance support, with 2^255 and above considered infinite\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC677Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the `IERC20` interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using `_mint`.\\n * For a generic mechanism see `ERC20Mintable`.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See `IERC20.approve`.\\n */\\n\\nabstract contract ERC20 is IERC20 {\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    uint8 public immutable override decimals;\\n\\n    constructor(uint8 _decimals) {\\n        decimals = _decimals;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.totalSupply`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.balanceOf`.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transfer`.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.allowance`.\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See `IERC20.approve`.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) external override returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See `IERC20.transferFrom`.\\n     *\\n     * Emits an `Approval` event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of `ERC20`;\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `value`.\\n     * - the caller must have allowance for `sender`'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        uint256 currentAllowance = _allowances[sender][msg.sender];\\n        if (currentAllowance < (1 << 255)){\\n            // Only decrease the allowance if it was not set to 'infinite'\\n            // Documented in /doc/infiniteallowance.md\\n            require(currentAllowance >= amount, \\\"approval not enough\\\");\\n            _approve(sender, msg.sender, currentAllowance - amount);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to `transfer`, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a `Transfer` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(recipient != address(0));\\n        \\n        _beforeTokenTransfer(sender, recipient, amount);\\n        require(_balances[sender]>=amount, \\\"balance not enough\\\");\\n        _balances[sender] -= amount;\\n        _balances[recipient] += amount;\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    // ERC-677 functionality, can be useful for swapping and wrapping tokens\\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external override returns (bool) {\\n        bool success = transfer(recipient, amount);\\n        if (success){\\n            success = IERC677Receiver(recipient).onTokenTransfer(msg.sender, amount, data);\\n        }\\n        return success;\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a `Transfer` event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address recipient, uint256 amount) internal virtual {\\n        require(recipient != address(0));\\n\\n        _beforeTokenTransfer(address(0), recipient, amount);\\n\\n        _totalSupply += amount;\\n        _balances[recipient] += amount;\\n        emit Transfer(address(0), recipient, amount);\\n    }\\n\\n     /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a `Transfer` event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _totalSupply -= amount;\\n        _balances[account] -= amount;\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\\n     *\\n     * This is internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an `Approval` event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) virtual internal {\\n    }\\n}\",\"keccak256\":\"0x14ea8f1a8ce94f6e364e65b67bf9378e34f0ff1c3adc5ff38240e170c4ab30e8\",\"license\":\"MIT\"},\"contracts/Equity.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"./Frankencoin.sol\\\";\\nimport \\\"./IERC677Receiver.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./MathUtil.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\n\\n/** \\n * @title Reserve pool for the Frankencoin\\n */\\ncontract Equity is ERC20, MathUtil, IReserve {\\n\\n    uint32 public constant VALUATION_FACTOR = 3;\\n    uint256 public constant MIN_HOLDING_DURATION = 5; // TEMP!!! 90 * 24 * 60 * 5; // about 90 days\\n    uint32 private constant QUORUM = 300;\\n\\n    Frankencoin immutable public zchf;\\n\\n    // should hopefully be grouped into one storage slot\\n    uint64 private totalVotesAnchorTime;\\n    uint192 private totalVotesAtAnchor;\\n\\n\\n    mapping (address => address) public delegates;\\n    mapping (address => uint64) private voteAnchor;\\n\\n    event Delegation(address indexed from, address indexed to);\\n\\n    constructor(Frankencoin zchf_) ERC20(18) {\\n        zchf = zchf_;\\n    }\\n\\n    function name() override external pure returns (string memory) {\\n        return \\\"Frankencoin Pool Share\\\";\\n    }\\n\\n    function symbol() override external pure returns (string memory) {\\n        return \\\"FPS\\\";\\n    }\\n\\n    function price() public view returns (uint256){\\n        return VALUATION_FACTOR * zchf.equity() * ONE_DEC18 / totalSupply();\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) override internal {\\n        super._beforeTokenTransfer(from, to, amount);\\n        if (amount > 0){\\n            uint256 roundingLoss = adjustRecipientVoteAnchor(to, amount);\\n            adjustTotalVotes(from, amount, roundingLoss);\\n        }\\n    }\\n\\n    function canRedeem() external view returns (bool){\\n        return canRedeem(msg.sender);\\n    }\\n\\n    function canRedeem(address owner) public view returns (bool) {\\n        return block.number - voteAnchor[owner] >= MIN_HOLDING_DURATION;\\n    }\\n\\n     /**\\n     * @notice Decrease the total votes anchor when tokens lose their voting power due to being moved\\n     * @param from      sender\\n     * @param amount    amount to be sent\\n     */\\n    function adjustTotalVotes(address from, uint256 amount, uint256 roundingLoss) internal {\\n        uint256 lostVotes = from == address(0x0) ? 0 : (block.number - voteAnchor[from]) * amount;\\n        totalVotesAtAnchor = uint192(totalVotes() - roundingLoss - lostVotes);\\n        totalVotesAnchorTime = uint64(block.number);\\n    }\\n\\n    /**\\n     * @notice the vote anchor of the recipient is moved forward such that the number of calculated\\n     * votes does not change despite the higher balance.\\n     * @param to        receiver address\\n     * @param amount    amount to be received\\n     * @return the number of votes lost due to rounding errors\\n     */\\n    function adjustRecipientVoteAnchor(address to, uint256 amount) internal returns (uint256){\\n        if (to != address(0x0)) {\\n            uint256 recipientVotes = votes(to); // for example 21 if 7 shares were held for 3 blocks\\n            uint256 newbalance = balanceOf(to) + amount; // for example 11 if 4 shares are added\\n            voteAnchor[to] = uint64(block.number - recipientVotes / newbalance); // new example anchor is only 21 / 11 = 1 block in the past\\n            return recipientVotes % newbalance; // we have lost 21 % 11 = 10 votes\\n        } else {\\n            // optimization for burn, vote anchor of null address does not matter\\n            return 0;\\n        }\\n    }\\n\\n    function votes(address holder) public view returns (uint256) {\\n        return balanceOf(holder) * (block.number - voteAnchor[holder]);\\n    }\\n\\n    function totalVotes() public view returns (uint256) {\\n        return totalVotesAtAnchor + totalSupply() * (block.number - totalVotesAnchorTime);\\n    }\\n\\n    function isQualified(address sender, address[] calldata helpers) external override view returns (bool) {\\n        uint256 _votes = votes(sender);\\n        for (uint i=0; i<helpers.length; i++){\\n            address current = helpers[i];\\n            require(current != sender);\\n            require(canVoteFor(sender, current));\\n            for (uint j=i+1; j<helpers.length; j++){\\n                require(current != helpers[j]);\\n            }\\n            _votes += votes(current);\\n        }\\n        return _votes * 10000 >= QUORUM * totalVotes();\\n    }\\n\\n    function delegateVoteTo(address delegate) external {\\n        delegates[msg.sender] = delegate;\\n        emit Delegation(msg.sender, delegate);\\n    }\\n\\n    function canVoteFor(address delegate, address owner) public view returns (bool) {\\n        if (owner == delegate){\\n            return true;\\n        } else if (owner == address(0x0)){\\n            return false;\\n        } else {\\n            return canVoteFor(delegate, delegates[owner]);\\n        }\\n    }\\n\\n    function onTokenTransfer(address from, uint256 amount, bytes calldata) external returns (bool) {\\n        require(msg.sender == address(zchf), \\\"caller must be zchf\\\");\\n        if (totalSupply() == 0){\\n            require(amount >= ONE_DEC18, \\\"initial deposit must >= 1\\\");\\n            // initialize with 1 share\\n            _mint(from, 1 * 10**18);\\n            amount -= ONE_DEC18;\\n        } \\n        _mint(from, calculateSharesInternal(zchf.equity() - amount, amount));\\n        require(totalSupply() < 2**90, \\\"total supply exceeded\\\");\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Calculate shares received when depositing ZCHF\\n     * @dev this function is called after the transfer of ZCHF happens\\n     * @param investment ZCHF invested, in dec18 format\\n     * @return amount of shares received for the ZCHF invested\\n     */\\n    function calculateShares(uint256 investment) public view returns (uint256) {\\n        return calculateSharesInternal(zchf.equity(), investment);\\n    }\\n\\n    function calculateSharesInternal(uint256 capitalBefore, uint256 investment) internal view returns (uint256) {\\n        uint256 totalShares = totalSupply();\\n        uint256 newTotalShares = _mulD18(totalShares, _cubicRoot(_divD18(capitalBefore + investment, capitalBefore)));\\n        return newTotalShares - totalShares;\\n    }\\n\\n    function redeem(address target, uint256 shares) public returns (uint256) {\\n        require(canRedeem(msg.sender));\\n        uint256 proceeds = calculateProceeds(shares);\\n        _burn(msg.sender, shares);\\n        zchf.transfer(target, proceeds);\\n        return proceeds;\\n    }\\n\\n    /**\\n     * @notice Calculate ZCHF received when depositing shares\\n     * @dev this function is called before any transfer happens\\n     * @param shares number of shares we want to exchange for ZCHF,\\n     *               in dec18 format\\n     * @return amount of ZCHF received for the shares\\n     */\\n    function calculateProceeds(uint256 shares) public view returns (uint256) {\\n        uint256 totalShares = totalSupply();\\n        uint256 capital = zchf.equity();\\n        require(shares + ONE_DEC18 < totalShares, \\\"too many shares\\\"); // make sure there is always at least one share\\n        uint256 newTotalShares = totalShares - shares;\\n        uint256 newCapital = _mulD18(capital, _power3(_divD18(newTotalShares, totalShares)));\\n        return capital - newCapital;\\n    }\\n\\n}\",\"keccak256\":\"0x4057aef6b64e0b0e0a3b8f1e31296cbd0a50fd7ba916480b3c257906f7a8231b\",\"license\":\"MIT\"},\"contracts/Frankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"./Equity.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\nimport \\\"./IFrankencoin.sol\\\";\\n\\ncontract Frankencoin is ERC20, IFrankencoin {\\n\\n   uint256 public constant MIN_FEE = 1000 * (10**18);\\n   uint256 public immutable MIN_APPLICATION_PERIOD; //10 days;\\n\\n   IReserve override public immutable reserve;\\n   uint256 public minterReserve;\\n\\n   mapping (address => uint256) public minters;\\n   mapping (address => address) public positions;\\n   address positionFactory;\\n\\n   event MinterApplied(address indexed minter, uint256 applicationPeriod, uint256 applicationFee, string message);\\n   event MinterDenied(address indexed minter, string message);\\n\\n   constructor(uint256 _minApplicationPeriod) ERC20(18){\\n      MIN_APPLICATION_PERIOD = _minApplicationPeriod;\\n      reserve = new Equity(this);\\n   }\\n\\n   function name() override external pure returns (string memory){\\n      return \\\"Frankencoin V1\\\";\\n   }\\n\\n   function symbol() override external pure returns (string memory){\\n      return \\\"ZCHF\\\";\\n   }\\n\\n   function setPositionFactory(address _factory) external {\\n      require(totalSupply() == 0, \\\"set at genesis only\\\");\\n      positionFactory = _factory;\\n   }\\n\\n   \\n   /**\\n    * @notice Minting is suggested either by (1) person applying for a new original position,\\n    * or (2) by the minting hub when cloning a position. The minting hub has the priviledge\\n    * to call with zero application fee and period.\\n    * @param _minter             address of the position want to add to the minters\\n    * @param _applicationPeriod  application period in seconds\\n    * @param _applicationFee     application fee in parts per million\\n    * @param _message            message string\\n    */\\n   function suggestMinter(address _minter, uint256 _applicationPeriod, \\n      uint256 _applicationFee, string calldata _message) override external \\n   {\\n      require(_applicationPeriod >= MIN_APPLICATION_PERIOD || totalSupply() == 0 || msg.sender==positionFactory, \\\"period too short\\\");\\n      require(_applicationFee >= MIN_FEE || totalSupply() == 0 || msg.sender==positionFactory, \\\"fee too low\\\");\\n      require(minters[_minter] == 0, \\\"already registered\\\");\\n      _transfer(msg.sender, address(reserve), _applicationFee);\\n      minters[_minter] = block.timestamp + _applicationPeriod;\\n      emit MinterApplied(_minter, _applicationPeriod, _applicationFee, _message);\\n   }\\n\\n   function registerPosition(address _position) override external {\\n      require(isMinter(msg.sender), \\\"not minter\\\");\\n      positions[_position] = msg.sender;\\n   }\\n\\n   /**\\n    * @notice Get reserve balance (amount of ZCHF)\\n    * @return ZCHF in dec18 format\\n    */\\n   function equity() public view returns (uint256) {\\n      uint256 balance = balanceOf(address(reserve));\\n      if (balance <= minterReserve){\\n        return 0;\\n      } else {\\n        return balance - minterReserve;\\n      }\\n    }\\n\\n   function denyMinter(address _minter, address[] calldata _helpers, string calldata _message) override external {\\n      require(block.timestamp <= minters[_minter], \\\"too late\\\");\\n      require(reserve.isQualified(msg.sender, _helpers), \\\"not qualified\\\");\\n      delete minters[_minter];\\n      emit MinterDenied(_minter, _message);\\n   }\\n\\n   /**\\n * @notice Mint amount of ZCHF for address _target\\n * @param _target       address that receives ZCHF if it's a minter\\n * @param _amount       amount ZCHF before fees and pool contribution requested\\n *                      number in dec18 format\\n * @param _reservePPM   reserve requirement in parts per million\\n * @param _feesPPM      fees in parts per million\\n */\\n   function mint(address _target, uint256 _amount, uint32 _reservePPM, uint32 _feesPPM) \\n      override external minterOnly \\n   {\\n      uint256 reserveAmount = _amount * _reservePPM;\\n      uint256 mintAmount = reserveAmount / 1000_000;\\n      uint256 fees = (_amount * _feesPPM) / 1000_000;\\n      _mint(_target, _amount - mintAmount - fees);\\n      _mint(address(reserve), mintAmount + fees);\\n      minterReserve += reserveAmount;\\n   }\\n\\n   /**\\n    * @notice Mint amount of ZCHF for address _target\\n    * @param _target   address that receives ZCHF if it's a minter\\n    * @param _amount   amount in dec18 format\\n    */\\n   function mint(address _target, uint256 _amount) override external minterOnly {\\n      _mint(_target, _amount);\\n   }\\n\\n   function burn(uint256 _amount) external {\\n      _burn(msg.sender, _amount);\\n   }\\n\\n   function burn(uint256 amount, uint32 reservePPM) external override minterOnly {\\n      _burn(msg.sender, amount);\\n      minterReserve -= amount * reservePPM / 1000000;\\n   }\\n\\n   function burnWithReserve(uint256 _amountExcludingReserve, uint32 _reservePPM) \\n      external override minterOnly returns (uint256) \\n   {\\n      _burn(msg.sender, _amountExcludingReserve); // 41\\n      uint256 currentReserve = balanceOf(address(reserve)); // 18\\n      uint256 adjustedReservePPM = currentReserve < minterReserve ? _reservePPM * currentReserve / minterReserve : _reservePPM; // 18%\\n      uint256 freedAmount = adjustedReservePPM * _amountExcludingReserve / (1000000 - adjustedReservePPM); // 41/0.82 = 50\\n      uint256 freedReserve = _reservePPM * freedAmount / 1000000; // 10\\n      minterReserve -= freedReserve; // reduce reserve requirements by original increment\\n      _burn(address(reserve), adjustedReservePPM * freedAmount / 1000000); // only burn the share of the reserve that is still there\\n      assert (freedAmount == _amountExcludingReserve + adjustedReservePPM * freedAmount / 1000000); // TODO: probably subject to rounding errors\\n      return freedAmount;\\n   }\\n\\n   function burn(address _owner, uint256 _amount) override external minterOnly {\\n      _burn(_owner, _amount);\\n   }\\n\\n   modifier minterOnly() {\\n      require(isMinter(msg.sender) || isMinter(positions[msg.sender]), \\\"not approved minter\\\");\\n      _;\\n   }\\n\\n   function notifyLoss(uint256 _amount) override external minterOnly {\\n      uint256 reserveLeft = balanceOf(address(reserve));\\n      if (reserveLeft >= _amount){\\n         _transfer(address(reserve), msg.sender, _amount);\\n      } else {\\n         _transfer(address(reserve), msg.sender, reserveLeft);\\n         _mint(msg.sender, _amount - reserveLeft);\\n      }\\n   }\\n   function isMinter(address _minter) override public view returns (bool){\\n      return minters[_minter]!=0 && block.timestamp >= minters[_minter];\\n   }\\n\\n   function isPosition(address _position) override public view returns (address){\\n      return positions[_position];\\n   }\\n\\n}\\n\\n\",\"keccak256\":\"0x5348f03753e1dad515fba466a02d4b848d21b7829b906cc54ae1ab70d10d74a8\",\"license\":\"MIT\"},\"contracts/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0xca95e6b6324b1c92dca4759b3da5fc251053691de885f2e23021eb5abdddea9c\",\"license\":\"MIT\"},\"contracts/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC677Receiver {\\n    \\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\n\\n}\",\"keccak256\":\"0x40703acdfa2126286b117ad0cca84c0a4ca2d3b18586765186c9bdd8ad5cf744\",\"license\":\"MIT\"},\"contracts/IFrankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\n\\ninterface IFrankencoin is IERC20 {\\n\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, \\n      uint256 _applicationFee, string calldata _message) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function isPosition(address position) external view returns (address);\\n    \\n    function mint(address target, uint256 amount) external;\\n\\n    function mint(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burn(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n    function burn(address target, uint256 amount) external;\\n\\n    function notifyLoss(uint256 amount) external;\\n\\n}\",\"keccak256\":\"0x37f4fd61a80655878619a90aa41af56bcbe711477fd84d9b5d1efc13e78afce9\",\"license\":\"MIT\"},\"contracts/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReserve {\\n   function isQualified(address sender, address[] calldata helpers) external view returns (bool);\\n}\",\"keccak256\":\"0x0fe637cc8a87dd12b7a236a86c15d52990ea3224413a1ec0e776b093b44eca0d\",\"license\":\"MIT\"},\"contracts/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/** \\n * @title Functions for share valuation\\n */\\ncontract MathUtil {\\n\\n    uint256 internal constant ONE_DEC18 = 10**18;\\n    uint256 internal constant THRESH_DEC18 =  10000000000000000;//0.01\\n    /**\\n     * @notice Cubic root with Halley approximation\\n     *         Number 1e18 decimal\\n     * @param _v     number for which we calculate x**(1/3)\\n     * @return returns _v**(1/3)\\n     */\\n    function _cubicRoot(uint256 _v) internal pure returns (uint256) {\\n        uint256 x = ONE_DEC18;\\n        uint256 xOld;\\n        bool cond;\\n        do {\\n            xOld = x;\\n            uint256 powX3 = _mulD18(_mulD18(x, x), x);\\n            x = _mulD18(x, _divD18( (powX3 + 2 * _v) , (2 * powX3 + _v)));\\n            cond = xOld > x ? xOld - x > THRESH_DEC18 : x - xOld > THRESH_DEC18;\\n        } while ( cond );\\n        return x;\\n    }\\n\\n    function _mulD18(uint256 _a, uint256 _b) internal pure returns(uint256) {\\n        return _a * _b / ONE_DEC18;\\n    }\\n\\n    function _divD18(uint256 _a, uint256 _b) internal pure returns(uint256) {\\n        return (_a * ONE_DEC18) / _b ;\\n    }\\n\\n    function _power3(uint256 _x) internal pure returns(uint256) {\\n        return _mulD18(_mulD18(_x, _x), _x);\\n    }\\n\\n}\",\"keccak256\":\"0xb5d4f2e9e32e67daec5e87f2953a5f59b4a871d1feca79ca8703a61757215dce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b50604051620030fd380380620030fd83398101604081905261003191610096565b601260805260a0819052604051309061004990610088565b6001600160a01b039091168152602001604051809103906000f080158015610075573d6000803e3d6000fd5b506001600160a01b031660c052506100af565b611798806200196583390190565b6000602082840312156100a857600080fd5b5051919050565b60805160a05160c051611840620001256000396000818161048f01528181610730015281816107730152818161079e015281816107e10152818161089e01528181610af901528181610bc401528181610e110152610fa50152600081816102550152610e5c015260006102d301526118406000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806395d89b4111610104578063b52c696d116100a2578063d1a15ff111610071578063d1a15ff1146104b1578063d38bb009146104c4578063dd62ed3e146104cd578063f46eccc41461050657600080fd5b8063b52c696d14610451578063b8f8c13314610464578063cbca628e14610477578063cd3293de1461048a57600080fd5b80639dc29fac116100de5780639dc29fac14610405578063a47d75ad14610418578063a9059cbb1461042b578063aa271e1a1461043e57600080fd5b806395d89b41146103bf5780639b404da6146103df5780639cc06358146103f257600080fd5b80634000aea01161017c57806361f3d1101161014b57806361f3d1101461036b57806370a082311461037e57806376c7a3c7146103a757806391a0ac6a146103b757600080fd5b80634000aea01461030757806340c10f191461031a57806342966c681461032f57806355f575101461034257600080fd5b80631a46c7e9116101b85780631a46c7e91461025057806323b872dd146102775780632748913b1461028a578063313ce567146102ce57600080fd5b806306fdde03146101df578063095ea7b31461021b57806318160ddd1461023e575b600080fd5b60408051808201909152600e81526d4672616e6b656e636f696e20563160901b60208201525b60405161021291906112b9565b60405180910390f35b61022e61022936600461132a565b610526565b6040519015158152602001610212565b6002545b604051908152602001610212565b6102427f000000000000000000000000000000000000000000000000000000000000000081565b61022e610285366004611354565b61053c565b6102b6610298366004611390565b6001600160a01b039081166000908152600560205260409020541690565b6040516001600160a01b039091168152602001610212565b6102f57f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610212565b61022e6103153660046113fb565b6105e3565b61032d61032836600461132a565b610679565b005b61032d61033d366004611455565b6106d4565b6102b6610350366004611390565b6005602052600090815260409020546001600160a01b031681565b61032d610379366004611455565b6106e1565b61024261038c366004611390565b6001600160a01b031660009081526020819052604090205490565b610242683635c9adc5dea0000081565b6102426107d7565b6040805180820190915260048152632d21a42360e11b6020820152610205565b61032d6103ed36600461146e565b610834565b61032d610400366004611534565b6109b0565b61032d61041336600461132a565b610a3f565b610242610426366004611534565b610a96565b61022e61043936600461132a565b610c3a565b61022e61044c366004611390565b610c47565b61032d61045f366004611390565b610c8c565b61032d610472366004611390565b610cf7565b61032d610485366004611560565b610d5f565b6102b67f000000000000000000000000000000000000000000000000000000000000000081565b61032d6104bf3660046115ad565b610e5a565b61024260035481565b6102426104db366004611604565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610242610514366004611390565b60046020526000908152604090205481565b6000610533338484611027565b50600192915050565b6000610549848484611089565b6001600160a01b0384166000908152600160209081526040808320338452909152902054600160ff1b8110156105d857828110156105c45760405162461bcd60e51b81526020600482015260136024820152720c2e0e0e4deecc2d840dcdee840cadcdeeaced606b1b60448201526064015b60405180910390fd5b6105d885336105d38685611644565b611027565b506001949350505050565b6000806105f08686610c3a565b9050801561067057604051635260769b60e11b81526001600160a01b0387169063a4c0ed369061062a903390899089908990600401611684565b6020604051808303816000875af1158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d91906116b6565b90505b95945050505050565b61068233610c47565b806106aa5750336000908152600560205260409020546106aa906001600160a01b0316610c47565b6106c65760405162461bcd60e51b81526004016105bb906116d8565b6106d0828261119a565b5050565b6106de3382611237565b50565b6106ea33610c47565b80610712575033600090815260056020526040902054610712906001600160a01b0316610c47565b61072e5760405162461bcd60e51b81526004016105bb906116d8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600090815260208190526040902054818110610799576106d07f00000000000000000000000000000000000000000000000000000000000000003384611089565b6107c47f00000000000000000000000000000000000000000000000000000000000000003383611089565b6106d0336107d28385611644565b61119a565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600090815260208190526040812054600354811161082157600091505090565b60035461082e9082611644565b91505090565b6001600160a01b0385166000908152600460205260409020544211156108875760405162461bcd60e51b8152602060048201526008602482015267746f6f206c61746560c01b60448201526064016105bb565b604051635e1121cf60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635e1121cf906108d790339088908890600401611705565b602060405180830381865afa1580156108f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091891906116b6565b6109545760405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081c5d585b1a599a5959609a1b60448201526064016105bb565b6001600160a01b03851660008181526004602052604080822091909155517fd60c86e83346fdbe3124cb7d1cba32973a9f62d05c4ec801bfe6c09d10380381906109a1908590859061175f565b60405180910390a25050505050565b6109b933610c47565b806109e15750336000908152600560205260409020546109e1906001600160a01b0316610c47565b6109fd5760405162461bcd60e51b81526004016105bb906116d8565b610a073383611237565b620f4240610a1b63ffffffff83168461177b565b610a25919061179a565b60036000828254610a369190611644565b90915550505050565b610a4833610c47565b80610a70575033600090815260056020526040902054610a70906001600160a01b0316610c47565b610a8c5760405162461bcd60e51b81526004016105bb906116d8565b6106d08282611237565b6000610aa133610c47565b80610ac9575033600090815260056020526040902054610ac9906001600160a01b0316610c47565b610ae55760405162461bcd60e51b81526004016105bb906116d8565b610aef3384611237565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600090815260208190526040812054905060006003548210610b41578363ffffffff16610b5e565b600354610b548363ffffffff871661177b565b610b5e919061179a565b90506000610b6f82620f4240611644565b610b79878461177b565b610b83919061179a565b90506000620f4240610b9b8363ffffffff891661177b565b610ba5919061179a565b90508060036000828254610bb99190611644565b90915550610c0090507f0000000000000000000000000000000000000000000000000000000000000000620f4240610bf1858761177b565b610bfb919061179a565b611237565b620f4240610c0e838561177b565b610c18919061179a565b610c2290886117bc565b8214610c3057610c306117d4565b5095945050505050565b6000610533338484611089565b6001600160a01b03811660009081526004602052604081205415801590610c8657506001600160a01b0382166000908152600460205260409020544210155b92915050565b610c9533610c47565b610cce5760405162461bcd60e51b815260206004820152600a6024820152693737ba1036b4b73a32b960b11b60448201526064016105bb565b6001600160a01b0316600090815260056020526040902080546001600160a01b03191633179055565b60025415610d3d5760405162461bcd60e51b81526020600482015260136024820152727365742061742067656e65736973206f6e6c7960681b60448201526064016105bb565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b610d6833610c47565b80610d90575033600090815260056020526040902054610d90906001600160a01b0316610c47565b610dac5760405162461bcd60e51b81526004016105bb906116d8565b6000610dbe63ffffffff84168561177b565b90506000610dcf620f42408361179a565b90506000620f4240610de763ffffffff86168861177b565b610df1919061179a565b9050610e0c8782610e02858a611644565b6107d29190611644565b610e3a7f00000000000000000000000000000000000000000000000000000000000000006107d283856117bc565b8260036000828254610e4c91906117bc565b909155505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000084101580610e895750600254155b80610e9e57506006546001600160a01b031633145b610edd5760405162461bcd60e51b815260206004820152601060248201526f1c195c9a5bd9081d1bdbc81cda1bdc9d60821b60448201526064016105bb565b683635c9adc5dea0000083101580610ef55750600254155b80610f0a57506006546001600160a01b031633145b610f445760405162461bcd60e51b815260206004820152600b60248201526a66656520746f6f206c6f7760a81b60448201526064016105bb565b6001600160a01b03851660009081526004602052604090205415610f9f5760405162461bcd60e51b8152602060048201526012602482015271185b1c9958591e481c9959da5cdd195c995960721b60448201526064016105bb565b610fca337f000000000000000000000000000000000000000000000000000000000000000085611089565b610fd484426117bc565b6001600160a01b038616600081815260046020526040908190209290925590517f97326258efdae63280617ca33884e507791c2abeed7b82acd77f1853394ef94b906109a19087908790879087906117ea565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03821661109c57600080fd5b6001600160a01b0383166000908152602081905260409020548111156110f95760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b60448201526064016105bb565b6001600160a01b03831660009081526020819052604081208054839290611121908490611644565b90915550506001600160a01b0382166000908152602081905260408120805483929061114e9084906117bc565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161107c91815260200190565b6001600160a01b0382166111ad57600080fd5b80600260008282546111bf91906117bc565b90915550506001600160a01b038216600090815260208190526040812080548392906111ec9084906117bc565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b80600260008282546112499190611644565b90915550506001600160a01b03821660009081526020819052604081208054839290611276908490611644565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161122b565b600060208083528351808285015260005b818110156112e6578581018301518582016040015282016112ca565b818111156112f8576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461132557600080fd5b919050565b6000806040838503121561133d57600080fd5b6113468361130e565b946020939093013593505050565b60008060006060848603121561136957600080fd5b6113728461130e565b92506113806020850161130e565b9150604084013590509250925092565b6000602082840312156113a257600080fd5b6113ab8261130e565b9392505050565b60008083601f8401126113c457600080fd5b50813567ffffffffffffffff8111156113dc57600080fd5b6020830191508360208285010111156113f457600080fd5b9250929050565b6000806000806060858703121561141157600080fd5b61141a8561130e565b935060208501359250604085013567ffffffffffffffff81111561143d57600080fd5b611449878288016113b2565b95989497509550505050565b60006020828403121561146757600080fd5b5035919050565b60008060008060006060868803121561148657600080fd5b61148f8661130e565b9450602086013567ffffffffffffffff808211156114ac57600080fd5b818801915088601f8301126114c057600080fd5b8135818111156114cf57600080fd5b8960208260051b85010111156114e457600080fd5b60208301965080955050604088013591508082111561150257600080fd5b5061150f888289016113b2565b969995985093965092949392505050565b803563ffffffff8116811461132557600080fd5b6000806040838503121561154757600080fd5b8235915061155760208401611520565b90509250929050565b6000806000806080858703121561157657600080fd5b61157f8561130e565b93506020850135925061159460408601611520565b91506115a260608601611520565b905092959194509250565b6000806000806000608086880312156115c557600080fd5b6115ce8661130e565b94506020860135935060408601359250606086013567ffffffffffffffff8111156115f857600080fd5b61150f888289016113b2565b6000806040838503121561161757600080fd5b6116208361130e565b91506115576020840161130e565b634e487b7160e01b600052601160045260246000fd5b6000828210156116565761165661162e565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b03851681528360208201526060604082015260006116ac60608301848661165b565b9695505050505050565b6000602082840312156116c857600080fd5b815180151581146113ab57600080fd5b6020808252601390820152723737ba1030b8383937bb32b21036b4b73a32b960691b604082015260600190565b6001600160a01b03848116825260406020808401829052908301849052600091859160608501845b87811015611752578361173f8661130e565b168252938201939082019060010161172d565b5098975050505050505050565b60208152600061177360208301848661165b565b949350505050565b60008160001904831182151516156117955761179561162e565b500290565b6000826117b757634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156117cf576117cf61162e565b500190565b634e487b7160e01b600052600160045260246000fd5b8481528360208201526060604082015260006116ac60608301848661165b56fea2646970667358221220220febafd2d17c13a1f87ecedafa4a83ac5d4d95cd621bba0662b9d1359ac79664736f6c634300080d003360c060405234801561001057600080fd5b5060405161179838038061179883398101604081905261002f91610045565b60126080526001600160a01b031660a052610075565b60006020828403121561005757600080fd5b81516001600160a01b038116811461006e57600080fd5b9392505050565b60805160a0516116d46100c4600039600081816103df0152818161053d015281816106c60152818161098801528181610a3401528181610b2a0152610c310152600061027301526116d46000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80635e1121cf116100de578063a9059cbb11610097578063c4d4803a11610071578063c4d4803a146103da578063d8bff5a514610401578063dd62ed3e14610414578063f97ed5091461044d57600080fd5b8063a9059cbb146103ac578063ad08ce5b146103bf578063b0c2bf06146103d257600080fd5b80635e1121cf1461032157806370a082311461033457806395d89b411461035d5780639823004f1461037c578063a035b1fe14610391578063a4c0ed361461039957600080fd5b806323b872dd1161014b5780633c835ab0116101255780633c835ab0146102a75780633ec16194146102ba5780634000aea0146102cd578063587cde1e146102e057600080fd5b806323b872dd1461023e578063250f25f414610251578063313ce5671461026e57600080fd5b806306fdde0314610193578063095ea7b3146101d75780630d15fd77146101fa578063151535b91461021057806318160ddd146102235780631e9a69501461022b575b600080fd5b6040805180820190915260168152754672616e6b656e636f696e20506f6f6c20536861726560501b60208201525b6040516101ce91906112ff565b60405180910390f35b6101ea6101e5366004611370565b610455565b60405190151581526020016101ce565b61020261046c565b6040519081526020016101ce565b6101ea61021e36600461139a565b6104b5565b600254610202565b610202610239366004611370565b6104ec565b6101ea61024c3660046113b5565b6105b2565b610259600381565b60405163ffffffff90911681526020016101ce565b6102957f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016101ce565b6101ea6102b53660046113f1565b610659565b6102026102c8366004611424565b6106bf565b6101ea6102db36600461143d565b61074c565b6103096102ee36600461139a565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101ce565b6101ea61032f3660046114c4565b6107e2565b61020261034236600461139a565b6001600160a01b031660009081526020819052604090205490565b60408051808201909152600381526246505360e81b60208201526101c1565b61038f61038a36600461139a565b61091b565b005b610202610972565b6101ea6103a736600461143d565b610a27565b6101ea6103ba366004611370565b610c12565b6102026103cd366004611424565b610c1f565b610202600581565b6103097f000000000000000000000000000000000000000000000000000000000000000081565b61020261040f36600461139a565b610d46565b6102026104223660046113f1565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6101ea610d96565b6000610462338484610da1565b5060015b92915050565b6003546000906104869067ffffffffffffffff1643611560565b6002546104939190611577565b6003546104b09190600160401b90046001600160c01b0316611596565b905090565b6001600160a01b03811660009081526005602081905260408220546104e49067ffffffffffffffff1643611560565b101592915050565b60006104f7336104b5565b61050057600080fd5b600061050b83610c1f565b90506105173384610e03565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610586573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105aa91906115ae565b509392505050565b60006105bf848484610e99565b6001600160a01b0384166000908152600160209081526040808320338452909152902054600160ff1b81101561064e578281101561063a5760405162461bcd60e51b81526020600482015260136024820152720c2e0e0e4deecc2d840dcdee840cadcdeeaced606b1b60448201526064015b60405180910390fd5b61064e85336106498685611560565b610da1565b506001949350505050565b6000826001600160a01b0316826001600160a01b03160361067c57506001610466565b6001600160a01b03821661069257506000610466565b6001600160a01b038083166000908152600460205260409020546106b891859116610659565b9050610466565b60006104667f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a0ac6a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610722573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074691906115d0565b83610fb5565b6000806107598686610c12565b905080156107d957604051635260769b60e11b81526001600160a01b0387169063a4c0ed36906107939033908990899089906004016115e9565b6020604051808303816000875af11580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d691906115ae565b90505b95945050505050565b6000806107ee85610d46565b905060005b838110156108ef57600085858381811061080f5761080f611631565b9050602002016020810190610824919061139a565b9050866001600160a01b0316816001600160a01b03160361084457600080fd5b61084e8782610659565b61085757600080fd5b6000610864836001611596565b90505b858110156108c55786868281811061088157610881611631565b9050602002016020810190610896919061139a565b6001600160a01b0316826001600160a01b0316036108b357600080fd5b806108bd81611647565b915050610867565b506108cf81610d46565b6108d99084611596565b92505080806108e790611647565b9150506107f3565b506108f861046c565b6109049061012c611577565b61091082612710611577565b101595945050505050565b3360008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590519092917fd000f39f92c3ed77f890f16b6ced1555e0ab2cdf470522d2210de67d8c83d45b91a350565b600061097d60025490565b670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a0ac6a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0891906115d0565b610a13906003611577565b610a1d9190611577565b6104b09190611676565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a975760405162461bcd60e51b815260206004820152601360248201527231b0b63632b91036bab9ba103132903d31b43360691b6044820152606401610631565b600254600003610b2057670de0b6b3a7640000841015610af95760405162461bcd60e51b815260206004820152601960248201527f696e697469616c206465706f736974206d757374203e3d2031000000000000006044820152606401610631565b610b0b85670de0b6b3a7640000610ff0565b610b1d670de0b6b3a764000085611560565b93505b610bbf85610bba867f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a0ac6a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baa91906115d0565b610bb49190611560565b87610fb5565b610ff0565b6001605a1b610bcd60025490565b1061064e5760405162461bcd60e51b81526020600482015260156024820152741d1bdd185b081cdd5c1c1b1e48195e18d959591959605a1b6044820152606401610631565b6000610462338484610e99565b600080610c2b60025490565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391a0ac6a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb191906115d0565b905081610cc6670de0b6b3a764000086611596565b10610d055760405162461bcd60e51b815260206004820152600f60248201526e746f6f206d616e792073686172657360881b6044820152606401610631565b6000610d118584611560565b90506000610d3083610d2b610d268588611091565b6110b7565b6110c8565b9050610d3c8184611560565b9695505050505050565b6001600160a01b038116600090815260056020526040812054610d739067ffffffffffffffff1643611560565b6001600160a01b0383166000908152602081905260409020546104669190611577565b60006104b0336104b5565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b610e0f826000836110dd565b8060026000828254610e219190611560565b90915550506001600160a01b03821660009081526020819052604081208054839290610e4e908490611560565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6001600160a01b038216610eac57600080fd5b610eb78383836110dd565b6001600160a01b038316600090815260208190526040902054811115610f145760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b6044820152606401610631565b6001600160a01b03831660009081526020819052604081208054839290610f3c908490611560565b90915550506001600160a01b03821660009081526020819052604081208054839290610f69908490611596565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610df691815260200190565b600080610fc160025490565b90506000610fe482610d2b610fdf610fd9888a611596565b89611091565b611103565b90506107d98282611560565b6001600160a01b03821661100357600080fd5b61100f600083836110dd565b80600260008282546110219190611596565b90915550506001600160a01b0382166000908152602081905260408120805483929061104e908490611596565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610e8d565b6000816110a6670de0b6b3a764000085611577565b6110b09190611676565b9392505050565b60006104666110c683846110c8565b835b6000670de0b6b3a76400006110a68385611577565b80156110fe5760006110ef83836111a8565b90506110fc84838361125b565b505b505050565b6000670de0b6b3a764000081805b829150600061112961112385866110c8565b856110c8565b905061116284610d2b61113d896002611577565b6111479085611596565b89611153866002611577565b61115d9190611596565b611091565b935083831161118357662386f26fc1000061117d8486611560565b11611197565b662386f26fc100006111958585611560565b115b915050806111115750909392505050565b60006001600160a01b038316156112535760006111c484610d46565b90506000836111e8866001600160a01b031660009081526020819052604090205490565b6111f29190611596565b90506111fe8183611676565b6112089043611560565b6001600160a01b0386166000908152600560205260409020805467ffffffffffffffff191667ffffffffffffffff9290921691909117905561124a818361168a565b92505050610466565b506000610466565b60006001600160a01b038416156112aa576001600160a01b038416600090815260056020526040902054839061129b9067ffffffffffffffff1643611560565b6112a59190611577565b6112ad565b60005b905080826112b961046c565b6112c39190611560565b6112cd9190611560565b4367ffffffffffffffff166001600160c01b0391909116600160401b0267ffffffffffffffff19161760035550505050565b600060208083528351808285015260005b8181101561132c57858101830151858201604001528201611310565b8181111561133e576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461136b57600080fd5b919050565b6000806040838503121561138357600080fd5b61138c83611354565b946020939093013593505050565b6000602082840312156113ac57600080fd5b6110b082611354565b6000806000606084860312156113ca57600080fd5b6113d384611354565b92506113e160208501611354565b9150604084013590509250925092565b6000806040838503121561140457600080fd5b61140d83611354565b915061141b60208401611354565b90509250929050565b60006020828403121561143657600080fd5b5035919050565b6000806000806060858703121561145357600080fd5b61145c85611354565b935060208501359250604085013567ffffffffffffffff8082111561148057600080fd5b818701915087601f83011261149457600080fd5b8135818111156114a357600080fd5b8860208285010111156114b557600080fd5b95989497505060200194505050565b6000806000604084860312156114d957600080fd5b6114e284611354565b9250602084013567ffffffffffffffff808211156114ff57600080fd5b818601915086601f83011261151357600080fd5b81358181111561152257600080fd5b8760208260051b850101111561153757600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052601160045260246000fd5b6000828210156115725761157261154a565b500390565b60008160001904831182151516156115915761159161154a565b500290565b600082198211156115a9576115a961154a565b500190565b6000602082840312156115c057600080fd5b815180151581146110b057600080fd5b6000602082840312156115e257600080fd5b5051919050565b6001600160a01b0385168152602081018490526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016116595761165961154a565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261168557611685611660565b500490565b60008261169957611699611660565b50069056fea2646970667358221220ad0f54db1cb1a0627947d9dcab7868ea7f87853b2f18d6cbb2f1fbe4692bd5e364736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806395d89b4111610104578063b52c696d116100a2578063d1a15ff111610071578063d1a15ff1146104b1578063d38bb009146104c4578063dd62ed3e146104cd578063f46eccc41461050657600080fd5b8063b52c696d14610451578063b8f8c13314610464578063cbca628e14610477578063cd3293de1461048a57600080fd5b80639dc29fac116100de5780639dc29fac14610405578063a47d75ad14610418578063a9059cbb1461042b578063aa271e1a1461043e57600080fd5b806395d89b41146103bf5780639b404da6146103df5780639cc06358146103f257600080fd5b80634000aea01161017c57806361f3d1101161014b57806361f3d1101461036b57806370a082311461037e57806376c7a3c7146103a757806391a0ac6a146103b757600080fd5b80634000aea01461030757806340c10f191461031a57806342966c681461032f57806355f575101461034257600080fd5b80631a46c7e9116101b85780631a46c7e91461025057806323b872dd146102775780632748913b1461028a578063313ce567146102ce57600080fd5b806306fdde03146101df578063095ea7b31461021b57806318160ddd1461023e575b600080fd5b60408051808201909152600e81526d4672616e6b656e636f696e20563160901b60208201525b60405161021291906112b9565b60405180910390f35b61022e61022936600461132a565b610526565b6040519015158152602001610212565b6002545b604051908152602001610212565b6102427f000000000000000000000000000000000000000000000000000000000000000081565b61022e610285366004611354565b61053c565b6102b6610298366004611390565b6001600160a01b039081166000908152600560205260409020541690565b6040516001600160a01b039091168152602001610212565b6102f57f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610212565b61022e6103153660046113fb565b6105e3565b61032d61032836600461132a565b610679565b005b61032d61033d366004611455565b6106d4565b6102b6610350366004611390565b6005602052600090815260409020546001600160a01b031681565b61032d610379366004611455565b6106e1565b61024261038c366004611390565b6001600160a01b031660009081526020819052604090205490565b610242683635c9adc5dea0000081565b6102426107d7565b6040805180820190915260048152632d21a42360e11b6020820152610205565b61032d6103ed36600461146e565b610834565b61032d610400366004611534565b6109b0565b61032d61041336600461132a565b610a3f565b610242610426366004611534565b610a96565b61022e61043936600461132a565b610c3a565b61022e61044c366004611390565b610c47565b61032d61045f366004611390565b610c8c565b61032d610472366004611390565b610cf7565b61032d610485366004611560565b610d5f565b6102b67f000000000000000000000000000000000000000000000000000000000000000081565b61032d6104bf3660046115ad565b610e5a565b61024260035481565b6102426104db366004611604565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610242610514366004611390565b60046020526000908152604090205481565b6000610533338484611027565b50600192915050565b6000610549848484611089565b6001600160a01b0384166000908152600160209081526040808320338452909152902054600160ff1b8110156105d857828110156105c45760405162461bcd60e51b81526020600482015260136024820152720c2e0e0e4deecc2d840dcdee840cadcdeeaced606b1b60448201526064015b60405180910390fd5b6105d885336105d38685611644565b611027565b506001949350505050565b6000806105f08686610c3a565b9050801561067057604051635260769b60e11b81526001600160a01b0387169063a4c0ed369061062a903390899089908990600401611684565b6020604051808303816000875af1158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d91906116b6565b90505b95945050505050565b61068233610c47565b806106aa5750336000908152600560205260409020546106aa906001600160a01b0316610c47565b6106c65760405162461bcd60e51b81526004016105bb906116d8565b6106d0828261119a565b5050565b6106de3382611237565b50565b6106ea33610c47565b80610712575033600090815260056020526040902054610712906001600160a01b0316610c47565b61072e5760405162461bcd60e51b81526004016105bb906116d8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600090815260208190526040902054818110610799576106d07f00000000000000000000000000000000000000000000000000000000000000003384611089565b6107c47f00000000000000000000000000000000000000000000000000000000000000003383611089565b6106d0336107d28385611644565b61119a565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600090815260208190526040812054600354811161082157600091505090565b60035461082e9082611644565b91505090565b6001600160a01b0385166000908152600460205260409020544211156108875760405162461bcd60e51b8152602060048201526008602482015267746f6f206c61746560c01b60448201526064016105bb565b604051635e1121cf60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635e1121cf906108d790339088908890600401611705565b602060405180830381865afa1580156108f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091891906116b6565b6109545760405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081c5d585b1a599a5959609a1b60448201526064016105bb565b6001600160a01b03851660008181526004602052604080822091909155517fd60c86e83346fdbe3124cb7d1cba32973a9f62d05c4ec801bfe6c09d10380381906109a1908590859061175f565b60405180910390a25050505050565b6109b933610c47565b806109e15750336000908152600560205260409020546109e1906001600160a01b0316610c47565b6109fd5760405162461bcd60e51b81526004016105bb906116d8565b610a073383611237565b620f4240610a1b63ffffffff83168461177b565b610a25919061179a565b60036000828254610a369190611644565b90915550505050565b610a4833610c47565b80610a70575033600090815260056020526040902054610a70906001600160a01b0316610c47565b610a8c5760405162461bcd60e51b81526004016105bb906116d8565b6106d08282611237565b6000610aa133610c47565b80610ac9575033600090815260056020526040902054610ac9906001600160a01b0316610c47565b610ae55760405162461bcd60e51b81526004016105bb906116d8565b610aef3384611237565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600090815260208190526040812054905060006003548210610b41578363ffffffff16610b5e565b600354610b548363ffffffff871661177b565b610b5e919061179a565b90506000610b6f82620f4240611644565b610b79878461177b565b610b83919061179a565b90506000620f4240610b9b8363ffffffff891661177b565b610ba5919061179a565b90508060036000828254610bb99190611644565b90915550610c0090507f0000000000000000000000000000000000000000000000000000000000000000620f4240610bf1858761177b565b610bfb919061179a565b611237565b620f4240610c0e838561177b565b610c18919061179a565b610c2290886117bc565b8214610c3057610c306117d4565b5095945050505050565b6000610533338484611089565b6001600160a01b03811660009081526004602052604081205415801590610c8657506001600160a01b0382166000908152600460205260409020544210155b92915050565b610c9533610c47565b610cce5760405162461bcd60e51b815260206004820152600a6024820152693737ba1036b4b73a32b960b11b60448201526064016105bb565b6001600160a01b0316600090815260056020526040902080546001600160a01b03191633179055565b60025415610d3d5760405162461bcd60e51b81526020600482015260136024820152727365742061742067656e65736973206f6e6c7960681b60448201526064016105bb565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b610d6833610c47565b80610d90575033600090815260056020526040902054610d90906001600160a01b0316610c47565b610dac5760405162461bcd60e51b81526004016105bb906116d8565b6000610dbe63ffffffff84168561177b565b90506000610dcf620f42408361179a565b90506000620f4240610de763ffffffff86168861177b565b610df1919061179a565b9050610e0c8782610e02858a611644565b6107d29190611644565b610e3a7f00000000000000000000000000000000000000000000000000000000000000006107d283856117bc565b8260036000828254610e4c91906117bc565b909155505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000084101580610e895750600254155b80610e9e57506006546001600160a01b031633145b610edd5760405162461bcd60e51b815260206004820152601060248201526f1c195c9a5bd9081d1bdbc81cda1bdc9d60821b60448201526064016105bb565b683635c9adc5dea0000083101580610ef55750600254155b80610f0a57506006546001600160a01b031633145b610f445760405162461bcd60e51b815260206004820152600b60248201526a66656520746f6f206c6f7760a81b60448201526064016105bb565b6001600160a01b03851660009081526004602052604090205415610f9f5760405162461bcd60e51b8152602060048201526012602482015271185b1c9958591e481c9959da5cdd195c995960721b60448201526064016105bb565b610fca337f000000000000000000000000000000000000000000000000000000000000000085611089565b610fd484426117bc565b6001600160a01b038616600081815260046020526040908190209290925590517f97326258efdae63280617ca33884e507791c2abeed7b82acd77f1853394ef94b906109a19087908790879087906117ea565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03821661109c57600080fd5b6001600160a01b0383166000908152602081905260409020548111156110f95760405162461bcd60e51b81526020600482015260126024820152710c4c2d8c2dcc6ca40dcdee840cadcdeeaced60731b60448201526064016105bb565b6001600160a01b03831660009081526020819052604081208054839290611121908490611644565b90915550506001600160a01b0382166000908152602081905260408120805483929061114e9084906117bc565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161107c91815260200190565b6001600160a01b0382166111ad57600080fd5b80600260008282546111bf91906117bc565b90915550506001600160a01b038216600090815260208190526040812080548392906111ec9084906117bc565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b80600260008282546112499190611644565b90915550506001600160a01b03821660009081526020819052604081208054839290611276908490611644565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161122b565b600060208083528351808285015260005b818110156112e6578581018301518582016040015282016112ca565b818111156112f8576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461132557600080fd5b919050565b6000806040838503121561133d57600080fd5b6113468361130e565b946020939093013593505050565b60008060006060848603121561136957600080fd5b6113728461130e565b92506113806020850161130e565b9150604084013590509250925092565b6000602082840312156113a257600080fd5b6113ab8261130e565b9392505050565b60008083601f8401126113c457600080fd5b50813567ffffffffffffffff8111156113dc57600080fd5b6020830191508360208285010111156113f457600080fd5b9250929050565b6000806000806060858703121561141157600080fd5b61141a8561130e565b935060208501359250604085013567ffffffffffffffff81111561143d57600080fd5b611449878288016113b2565b95989497509550505050565b60006020828403121561146757600080fd5b5035919050565b60008060008060006060868803121561148657600080fd5b61148f8661130e565b9450602086013567ffffffffffffffff808211156114ac57600080fd5b818801915088601f8301126114c057600080fd5b8135818111156114cf57600080fd5b8960208260051b85010111156114e457600080fd5b60208301965080955050604088013591508082111561150257600080fd5b5061150f888289016113b2565b969995985093965092949392505050565b803563ffffffff8116811461132557600080fd5b6000806040838503121561154757600080fd5b8235915061155760208401611520565b90509250929050565b6000806000806080858703121561157657600080fd5b61157f8561130e565b93506020850135925061159460408601611520565b91506115a260608601611520565b905092959194509250565b6000806000806000608086880312156115c557600080fd5b6115ce8661130e565b94506020860135935060408601359250606086013567ffffffffffffffff8111156115f857600080fd5b61150f888289016113b2565b6000806040838503121561161757600080fd5b6116208361130e565b91506115576020840161130e565b634e487b7160e01b600052601160045260246000fd5b6000828210156116565761165661162e565b500390565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60018060a01b03851681528360208201526060604082015260006116ac60608301848661165b565b9695505050505050565b6000602082840312156116c857600080fd5b815180151581146113ab57600080fd5b6020808252601390820152723737ba1030b8383937bb32b21036b4b73a32b960691b604082015260600190565b6001600160a01b03848116825260406020808401829052908301849052600091859160608501845b87811015611752578361173f8661130e565b168252938201939082019060010161172d565b5098975050505050505050565b60208152600061177360208301848661165b565b949350505050565b60008160001904831182151516156117955761179561162e565b500290565b6000826117b757634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156117cf576117cf61162e565b500190565b634e487b7160e01b600052600160045260246000fd5b8481528360208201526060604082015260006116ac60608301848661165b56fea2646970667358221220220febafd2d17c13a1f87ecedafa4a83ac5d4d95cd621bba0662b9d1359ac79664736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See `IERC20.allowance`."
      },
      "approve(address,uint256)": {
        "details": "See `IERC20.approve`. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See `IERC20.balanceOf`."
      },
      "equity()": {
        "returns": {
          "_0": "ZCHF in dec18 format"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "_amount": "amount in dec18 format",
          "_target": "address that receives ZCHF if it's a minter"
        }
      },
      "mint(address,uint256,uint32,uint32)": {
        "params": {
          "_amount": "amount ZCHF before fees and pool contribution requested                      number in dec18 format",
          "_feesPPM": "fees in parts per million",
          "_reservePPM": "reserve requirement in parts per million",
          "_target": "address that receives ZCHF if it's a minter"
        }
      },
      "suggestMinter(address,uint256,uint256,string)": {
        "params": {
          "_applicationFee": "application fee in parts per million",
          "_applicationPeriod": "application period in seconds",
          "_message": "message string",
          "_minter": "address of the position want to add to the minters"
        }
      },
      "totalSupply()": {
        "details": "See `IERC20.totalSupply`."
      },
      "transfer(address,uint256)": {
        "details": "See `IERC20.transfer`. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See `IERC20.transferFrom`. Emits an `Approval` event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of `ERC20`; Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `value`. - the caller must have allowance for `sender`'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "equity()": {
        "notice": "Get reserve balance (amount of ZCHF)"
      },
      "mint(address,uint256)": {
        "notice": "Mint amount of ZCHF for address _target"
      },
      "mint(address,uint256,uint32,uint32)": {
        "notice": "Mint amount of ZCHF for address _target"
      },
      "suggestMinter(address,uint256,uint256,string)": {
        "notice": "Minting is suggested either by (1) person applying for a new original position, or (2) by the minting hub when cloning a position. The minting hub has the priviledge to call with zero application fee and period."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 18,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1060,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "minterReserve",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1064,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "minters",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1068,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "positions",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1070,
        "contract": "contracts/Frankencoin.sol:Frankencoin",
        "label": "positionFactory",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x82E105E10045E875429fD77C76Ac54bF029Ac14d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_zchf",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "ChallengeAverted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "position",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "ChallengeStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "ChallengeSucceeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengedId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "NewBid",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CHALLENGER_REWARD",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPENING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidAmountZCHF",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedSize",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "challenges",
      "outputs": [
        {
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "internalType": "contract IPosition",
          "name": "position",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "position",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialMint",
          "type": "uint256"
        }
      ],
      "name": "clonePosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeNumber",
          "type": "uint256"
        }
      ],
      "name": "end",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "launchChallenge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challenge",
          "type": "uint256"
        }
      ],
      "name": "minBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_fees",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_liqPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reserve",
          "type": "uint32"
        }
      ],
      "name": "openPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "contract IReserve",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "splitOffAmount",
          "type": "uint256"
        }
      ],
      "name": "splitChallenge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zchf",
      "outputs": [
        {
          "internalType": "contract IFrankencoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf49130a76e64981dbca62d3bfe8752ff25630a22ae73ed9f7a29aebc754a1ad1",
  "receipt": {
    "to": null,
    "from": "0x0aB6527027EcFF1144dEc3d78154fce309ac838c",
    "contractAddress": "0x82E105E10045E875429fD77C76Ac54bF029Ac14d",
    "transactionIndex": 4,
    "gasUsed": "1697455",
    "logsBloom": "0x
    "blockHash": "0x82d5e26d67bcb48241f6895da89002bae17f6aae223b670790e412197b2dec4c",
    "transactionHash": "0xf49130a76e64981dbca62d3bfe8752ff25630a22ae73ed9f7a29aebc754a1ad1",
    "logs": [],
    "blockNumber": 2341745,
    "cumulativeGasUsed": "2399551",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdCecE71551661557536CD7AE1A1b664723B0868c",
    "0xE3d245a6B6d5e792f84E078Be0122139346439C3"
  ],
  "numDeployments": 1,
  "solcInputHash": "23f3044768f8f95e181e4d95b88161f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zchf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"ChallengeAverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"ChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"ChallengeSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CHALLENGER_REWARD\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPENING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidAmountZCHF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedSize\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"contract IPosition\",\"name\":\"position\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialMint\",\"type\":\"uint256\"}],\"name\":\"clonePosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeNumber\",\"type\":\"uint256\"}],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"}],\"name\":\"launchChallenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challenge\",\"type\":\"uint256\"}],\"name\":\"minBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_fees\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_liqPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reserve\",\"type\":\"uint32\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"contract IReserve\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"splitOffAmount\",\"type\":\"uint256\"}],\"name\":\"splitChallenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zchf\",\"outputs\":[{\"internalType\":\"contract IFrankencoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bid(uint256,uint256,uint256)\":{\"params\":{\"_bidAmountZCHF\":\"how much to bid for the collateral of this challenge (dec 18)\",\"_challengeNumber\":\"index of the challenge in the challenges array\"}},\"end(uint256)\":{\"params\":{\"_challengeNumber\":\"number of the challenge in challenge-array\"}},\"launchChallenge(address,uint256)\":{\"params\":{\"_collateralAmount\":\"size of the collateral we want to challenge (dec 18)\",\"_positionAddr\":\"address of the position we want to challenge\"},\"returns\":{\"_0\":\"index of the challenge in challenge-array\"}},\"openPosition(address,uint256,uint256,uint256,uint256,uint256,uint32,uint256,uint32)\":{\"params\":{\"_challengePeriod\":\"challenge period. Longer for less liquid collateral.\",\"_collateral\":\"address of collateral token\",\"_duration\":\"position tenor in unit of timestamp (seconds) from 'now'\",\"_fees\":\"percentage minting fee that will be added to reserve,                           basis 1000_000\",\"_initialCollateral\":\"amount of initial collateral to be deposited\",\"_initialLimit\":\"maximal amount of ZCHF that can be minted by the position owner\",\"_liqPrice\":\"Liquidation price (dec18) that together with the reserve and                           fees determines the minimal collateralization ratio\",\"_minCollateral\":\"minimum collateral required to prevent dust amounts\",\"_reserve\":\"percentage reserve amount that is added as the                           borrower's stake into reserve, basis 1000_000\"},\"returns\":{\"_0\":\"address of resulting position\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bid(uint256,uint256,uint256)\":{\"notice\":\"Post a bid (ZCHF amount) for an existing challenge (given collateral amount)\"},\"end(uint256)\":{\"notice\":\"Ends a challenge successfully after the auction period ended. Example: A challenged position had 1000 ABC tokens as collateral with a minting limit of 200,000 ZCHF, out of which 60,000 have been minted and thereof 15,000 used to buy reserve tokens. The challenger auctioned off 400 ABC tokens, challenging 40% of the position. The highest bid was 75,000 ZCHF, below the 40% * 200,000 = 80,000 ZCHF needed to avert the challenge. The reserve ratio of the position is 25%. Now, the following happens when calling this method: - 400 ABC from the position owner are transferred to the bidder - The challenger's 400 ABC are returned to the challenger - 40% of the reserve bought with the 15,000 ZCHF is sold off (approximately), yielding e.g. 5,600 ZCHF - 40% * 60,000 = 24,000 ZCHF are burned - 80,000 * 2% = 1600 ZCHF are given to the challenger as a reward - 40% * (100%-25%) * (200,000 - 60,000) = 42,000 are given to the position owner for selling off unused collateral - The remaining 75,000 + 5,600 - 1,600 - 24,000 - 42,000 = 13,000 ZCHF are sent to the reserve pool If the highest bid was only 60,000 ZCHF, then we would have had a shortfall of 2,000 ZCHF that would in the first priority be covered by the reserve and in the second priority by minting unbacked ZCHF, triggering a balance alert.\"},\"launchChallenge(address,uint256)\":{\"notice\":\"Launch a challenge on a position\"},\"openPosition(address,uint256,uint256,uint256,uint256,uint256,uint32,uint256,uint32)\":{\"notice\":\"open a collateralized loan position\"}},\"notice\":\"A hub for creating collateralized minting positions for a given collateral.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintingHub.sol\":\"MintingHub\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0xca95e6b6324b1c92dca4759b3da5fc251053691de885f2e23021eb5abdddea9c\",\"license\":\"MIT\"},\"contracts/IFrankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\n\\ninterface IFrankencoin is IERC20 {\\n\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, \\n      uint256 _applicationFee, string calldata _message) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function isPosition(address position) external view returns (address);\\n    \\n    function mint(address target, uint256 amount) external;\\n\\n    function mint(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burn(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnFrom(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external returns (uint256);\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n    function burn(address target, uint256 amount) external;\\n\\n    function notifyLoss(uint256 amount) external;\\n\\n}\",\"keccak256\":\"0xabb33542d10c4922e9df1e5c64ef6e6c780a6deadd029488aebe5d6c374b39a3\",\"license\":\"MIT\"},\"contracts/IPosition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\nimport \\\"./IFrankencoin.sol\\\";\\n\\ninterface IPosition {\\n\\n    function collateral() external returns (IERC20);\\n\\n    function minimumCollateral() external returns (uint256);\\n\\n    function challengePeriod() external returns (uint256);\\n\\n    function price() external returns (uint256);\\n\\n    function initializeClone(address owner, uint256 _price, uint256 _limit, uint256 _coll, uint256 _mint) external;\\n\\n    function deny(address[] calldata helpers, string calldata message) external;\\n\\n    function notifyChallengeStarted(uint256 size) external;\\n\\n    function tryAvertChallenge(uint256 size, uint256 bid) external returns (bool);\\n\\n    function notifyChallengeSucceeded(address bidder, uint256 bid, uint256 size) external returns (uint256, uint256, uint32);\\n\\n}\",\"keccak256\":\"0x765cc70014a619739d7447c7d5849bf272c970d362f37b1ced175392774a63a1\",\"license\":\"MIT\"},\"contracts/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReserve {\\n   function isQualified(address sender, address[] calldata helpers) external view returns (bool);\\n}\",\"keccak256\":\"0x0fe637cc8a87dd12b7a236a86c15d52990ea3224413a1ec0e776b093b44eca0d\",\"license\":\"MIT\"},\"contracts/MintingHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\nimport \\\"./IFrankencoin.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IPosition.sol\\\";\\n\\n/**\\n * A hub for creating collateralized minting positions for a given collateral.\\n */\\ncontract MintingHub {\\n    uint256 public constant OPENING_FEE = 1000 * 10**18;\\n\\n    uint32 public constant BASE = 1000_000;\\n    uint32 public constant CHALLENGER_REWARD = 20000; // 2%\\n\\n    IPositionFactory private immutable POSITION_FACTORY; // position contract to clone\\n\\n    IFrankencoin public immutable zchf; // currency\\n    Challenge[] public challenges;\\n\\n    struct Challenge {\\n        address challenger;\\n        IPosition position;\\n        uint256 size;\\n        uint256 end;\\n        address bidder;\\n        uint256 bid;\\n    }\\n\\n    event ChallengeStarted(address indexed challenger, address position, uint256 size, uint256 number);\\n    event ChallengeAverted(uint256 number);\\n    event ChallengeSucceeded(uint256 number);\\n    event NewBid(uint256 challengedId, uint256 bidAmount, address bidder);\\n\\n    constructor(address _zchf, address factory) {\\n        zchf = IFrankencoin(_zchf);\\n        POSITION_FACTORY = IPositionFactory(factory);\\n    }\\n\\n    /**\\n     * @notice open a collateralized loan position\\n     * @param _collateral        address of collateral token\\n     * @param _minCollateral     minimum collateral required to prevent dust amounts\\n     * @param _initialCollateral amount of initial collateral to be deposited\\n     * @param _initialLimit      maximal amount of ZCHF that can be minted by the position owner\\n     * @param _duration          position tenor in unit of timestamp (seconds) from 'now'\\n     * @param _challengePeriod   challenge period. Longer for less liquid collateral.\\n     * @param _fees              percentage minting fee that will be added to reserve,\\n     *                           basis 1000_000\\n     * @param _liqPrice          Liquidation price (dec18) that together with the reserve and\\n     *                           fees determines the minimal collateralization ratio\\n     * @param _reserve           percentage reserve amount that is added as the\\n     *                           borrower's stake into reserve, basis 1000_000\\n     * @return address of resulting position\\n     */\\n    function openPosition(\\n        address _collateral,\\n        uint256 _minCollateral,\\n        uint256 _initialCollateral,\\n        uint256 _initialLimit,\\n        uint256 _duration,\\n        uint256 _challengePeriod,\\n        uint32 _fees,\\n        uint256 _liqPrice,\\n        uint32 _reserve\\n    ) public returns (address) {\\n        IPosition pos = IPosition(\\n            POSITION_FACTORY.createNewPosition(\\n                msg.sender,\\n                address(zchf),\\n                _collateral,\\n                _minCollateral,\\n                _initialCollateral,\\n                _initialLimit,\\n                _duration,\\n                _challengePeriod,\\n                _fees,\\n                _liqPrice,\\n                _reserve\\n            )\\n        );\\n        zchf.registerPosition(address(pos));\\n        zchf.transferFrom(msg.sender, address(zchf.reserve()), OPENING_FEE);\\n        IERC20(_collateral).transferFrom(msg.sender, address(pos), _initialCollateral);\\n\\n        return address(pos);\\n    }\\n\\n    function clonePosition(\\n        address position,\\n        uint256 _initialCollateral,\\n        uint256 _initialMint\\n    ) public returns (address) {\\n        require(zchf.isPosition(position) == address(this), \\\"not our pos\\\");\\n        IPosition pos = IPosition(POSITION_FACTORY.clonePosition(position, address(zchf), msg.sender, _initialCollateral, _initialMint));\\n        zchf.registerPosition(address(pos));\\n        pos.collateral().transferFrom(msg.sender, address(pos), _initialCollateral);\\n        return address(pos);\\n    }\\n\\n    function reserve() external view returns (IReserve) {\\n        return IReserve(zchf.reserve());\\n    }\\n\\n    /**\\n     * @notice Launch a challenge on a position\\n     * @param _positionAddr      address of the position we want to challenge\\n     * @param _collateralAmount  size of the collateral we want to challenge (dec 18)\\n     * @return index of the challenge in challenge-array\\n     */\\n    function launchChallenge(address _positionAddr, uint256 _collateralAmount) external returns (uint256) {\\n        IPosition position = IPosition(_positionAddr);\\n        IERC20(position.collateral()).transferFrom(msg.sender, address(this), _collateralAmount);\\n        uint256 pos = challenges.length;\\n        /*\\n        struct Challenge {address challenger;IPosition position;uint256 size;uint256 end;address bidder;uint256 bid;\\n        */\\n        challenges.push(Challenge(msg.sender, position, _collateralAmount, block.timestamp + position.challengePeriod(), address(0x0), 0));\\n        position.notifyChallengeStarted(_collateralAmount);\\n        emit ChallengeStarted(msg.sender, address(position), _collateralAmount, pos);\\n        return pos;\\n    }\\n\\n    function splitChallenge(uint256 _challengeNumber, uint256 splitOffAmount) external returns (uint256) {\\n        Challenge storage challenge = challenges[_challengeNumber];\\n        require(challenge.challenger != address(0x0));\\n        Challenge memory copy = Challenge(\\n            challenge.challenger,\\n            challenge.position,\\n            splitOffAmount,\\n            challenge.end,\\n            challenge.bidder,\\n            (challenge.bid * splitOffAmount) / challenge.size\\n        );\\n        challenge.bid -= copy.bid;\\n        challenge.size -= copy.size;\\n\\n        uint256 min = IPosition(challenge.position).minimumCollateral();\\n        require(challenge.size >= min);\\n        require(copy.size >= min);\\n\\n        uint256 pos = challenges.length;\\n        challenges.push(copy);\\n        emit ChallengeStarted(copy.challenger, address(copy.position), copy.size, pos);\\n        return pos;\\n    }\\n\\n    function minBid(uint256 challenge) public view returns (uint256) {\\n        return minBid(challenges[challenge]);\\n    }\\n\\n    function minBid(Challenge storage challenge) internal view returns (uint256) {\\n        return (challenge.bid * 1005) / 1000; // should be at least 0.5% higher\\n    }\\n\\n    /**\\n     * @notice Post a bid (ZCHF amount) for an existing challenge (given collateral amount)\\n     * @param _challengeNumber   index of the challenge in the challenges array\\n     * @param _bidAmountZCHF     how much to bid for the collateral of this challenge (dec 18)\\n     */\\n    function bid(\\n        uint256 _challengeNumber,\\n        uint256 _bidAmountZCHF,\\n        uint256 expectedSize\\n    ) external {\\n        Challenge storage challenge = challenges[_challengeNumber];\\n        if (block.timestamp >= challenge.end) {\\n            // if bid is too late, the transaction ends the challenge\\n            _end(_challengeNumber);\\n        } else {\\n            require(expectedSize == challenge.size, \\\"s\\\");\\n            if (challenge.bid > 0) {\\n                zchf.transfer(challenge.bidder, challenge.bid); // return old bid\\n            }\\n            emit NewBid(_challengeNumber, _bidAmountZCHF, msg.sender);\\n            if (challenge.position.tryAvertChallenge(challenge.size, _bidAmountZCHF)) {\\n                // bid above Z_B/C_C >= (1+h)Z_M/C_M, challenge averted, end immediately by selling challenger collateral to bidder\\n                zchf.transferFrom(msg.sender, challenge.challenger, _bidAmountZCHF);\\n                IERC20(challenge.position.collateral()).transfer(msg.sender, challenge.size);\\n                emit ChallengeAverted(_challengeNumber);\\n                delete challenges[_challengeNumber];\\n            } else {\\n                require(_bidAmountZCHF >= minBid(challenge), \\\"below min bid\\\");\\n                uint256 earliestEnd = block.timestamp + 30 minutes;\\n                if (earliestEnd >= challenge.end) {\\n                    // bump remaining time to 10 minutes if we are near the end of the challenge\\n                    challenge.end = earliestEnd;\\n                }\\n                require(challenge.size * challenge.position.price() > _bidAmountZCHF * 10**18, \\\"whot\\\");\\n                zchf.transferFrom(msg.sender, address(this), _bidAmountZCHF);\\n                challenge.bid = _bidAmountZCHF;\\n                challenge.bidder = msg.sender;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice\\n     * Ends a challenge successfully after the auction period ended.\\n     *\\n     * Example: A challenged position had 1000 ABC tokens as collateral with a minting limit of 200,000 ZCHF, out\\n     * of which 60,000 have been minted and thereof 15,000 used to buy reserve tokens. The challenger auctioned off\\n     * 400 ABC tokens, challenging 40% of the position. The highest bid was 75,000 ZCHF, below the\\n     * 40% * 200,000 = 80,000 ZCHF needed to avert the challenge. The reserve ratio of the position is 25%.\\n     *\\n     * Now, the following happens when calling this method:\\n     * - 400 ABC from the position owner are transferred to the bidder\\n     * - The challenger's 400 ABC are returned to the challenger\\n     * - 40% of the reserve bought with the 15,000 ZCHF is sold off (approximately), yielding e.g. 5,600 ZCHF\\n     * - 40% * 60,000 = 24,000 ZCHF are burned\\n     * - 80,000 * 2% = 1600 ZCHF are given to the challenger as a reward\\n     * - 40% * (100%-25%) * (200,000 - 60,000) = 42,000 are given to the position owner for selling off unused collateral\\n     * - The remaining 75,000 + 5,600 - 1,600 - 24,000 - 42,000 = 13,000 ZCHF are sent to the reserve pool\\n     *\\n     * If the highest bid was only 60,000 ZCHF, then we would have had a shortfall of 2,000 ZCHF that would in the\\n     * first priority be covered by the reserve and in the second priority by minting unbacked ZCHF, triggering a\\n     * balance alert.\\n     * @param _challengeNumber  number of the challenge in challenge-array\\n     */\\n    function end(uint256 _challengeNumber) external {\\n        _end(_challengeNumber);\\n    }\\n\\n    /**\\n     * @dev internal end function\\n     * @param _challengeNumber  number of the challenge in challenge-array\\n     */\\n    function _end(uint256 _challengeNumber) internal {\\n        Challenge storage challenge = challenges[_challengeNumber];\\n        IERC20 collateral = challenge.position.collateral();\\n        require(block.timestamp >= challenge.end, \\\"period has not ended\\\");\\n        // challenge must have been successful, because otherwise it would have immediately ended on placing the winning bid\\n        collateral.transfer(challenge.challenger, challenge.size); // return the challenger's collateral\\n        // notify the position that will send the collateral to the bidder. If there is no bid, send the collateral to msg.sender\\n        address recipient = challenge.bidder == address(0x0) ? msg.sender : challenge.bidder;\\n        (uint256 effectiveBid, uint256 volume, uint32 reservePPM) = challenge.position.notifyChallengeSucceeded(recipient, challenge.bid, challenge.size);\\n        if (effectiveBid < challenge.bid) {\\n            // overbid, return excess amount\\n            IERC20(zchf).transfer(challenge.bidder, challenge.bid - effectiveBid);\\n        }\\n        uint256 reward = (volume * CHALLENGER_REWARD) / BASE;\\n        zchf.notifyLoss(reward + volume - effectiveBid); // ensure we have enough to pay everything\\n        zchf.transfer(challenge.challenger, reward); // pay out the challenger reward\\n        zchf.burn(volume, reservePPM); // Repay the challenged part\\n        emit ChallengeSucceeded(_challengeNumber);\\n        delete challenges[_challengeNumber];\\n    }\\n}\\n\\ninterface IPositionFactory {\\n    function createNewPosition(\\n        address _owner,\\n        address _zchf,\\n        address _collateral,\\n        uint256 _minCollateral,\\n        uint256 _initialCollateral,\\n        uint256 _initialLimit,\\n        uint256 _duration,\\n        uint256 _challengePeriod,\\n        uint32 _mintingFeePPM,\\n        uint256 _liqPrice,\\n        uint32 _reserve\\n    ) external returns (address);\\n\\n    function clonePosition(\\n        address _existing,\\n        address _zchf,\\n        address _owner,\\n        uint256 _initialCol,\\n        uint256 _initialMint\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x2d7607de9432310b70a2f9bb336df8136bf9f12656762fa9e9732b394bc132a3\",\"license\":\"MIT\"},\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n// - Extracted interface\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor (address initialOwner) {\\n        require(initialOwner != address(0), \\\"0x0\\\");\\n        owner = initialOwner;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) virtual public onlyOwner {\\n        require(newOwner != address(0), \\\"0x0\\\");\\n        owner = newOwner;\\n        emit OwnershipTransferred(owner, newOwner);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender || owner == address(0x0), \\\"not owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0xeffc1aaff0fe8713402464c0d37d7f37a3e17025d40f088a6bd0f13ab321f1c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001efd38038062001efd833981016040819052620000349162000069565b6001600160a01b0391821660a05216608052620000a1565b80516001600160a01b03811681146200006457600080fd5b919050565b600080604083850312156200007d57600080fd5b62000088836200004c565b915062000098602084016200004c565b90509250929050565b60805160a051611dc662000137600039600081816101f8015281816102ff0152818161044e015281816107a60152818161086301528181610969015281816109c9015281816109f901528181610b8b01528181610c5901528181610d29015281816114ba0152818161178f0152818161185e0152818161190e01526119a20152600081816108d90152610c980152611dc66000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638f1d37761161008c578063c4d4803a11610066578063c4d4803a146101f3578063c53602271461021a578063cd3293de1461022d578063ec342ad01461023557600080fd5b80638f1d377614610170578063af5806b6146101c2578063be747fd5146101e057600080fd5b80630ad24528146100d45780632ac9bf09146100e95780632bf78dd8146100fc5780633611a3b71461011f57806374362a251461014a5780637b7da10e1461015d575b600080fd5b6100e76100e2366004611ac3565b61023f565b005b6100e76100f7366004611adc565b61024b565b61010c683635c9adc5dea0000081565b6040519081526020015b60405180910390f35b61013261012d366004611b2f565b610846565b6040516001600160a01b039091168152602001610116565b610132610158366004611bb5565b610b67565b61010c61016b366004611bea565b610e66565b61018361017e366004611ac3565b611127565b604080516001600160a01b03978816815295871660208701528501939093526060840191909152909216608082015260a081019190915260c001610116565b6101cb614e2081565b60405163ffffffff9091168152602001610116565b61010c6101ee366004611c16565b61117e565b6101327f000000000000000000000000000000000000000000000000000000000000000081565b61010c610228366004611ac3565b611485565b6101326114b6565b6101cb620f424081565b6102488161153f565b50565b600080848154811061025f5761025f611c38565b9060005260206000209060060201905080600301544210610288576102838461153f565b610840565b806002015482146102c45760405162461bcd60e51b81526020600482015260016024820152607360f81b60448201526064015b60405180910390fd5b60058101541561036e57600481810154600583015460405163a9059cbb60e01b81526001600160a01b039283169381019390935260248301527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036c9190611c4e565b505b6040805185815260208101859052338183015290517f0b946a7d9cbd47da0dd592970ef1259349c40f44b231f11da4babeb56c07dd2d9181900360600190a160018101546002820154604051631f4a712160e11b81526001600160a01b0390921691633e94e242916103ed918790600401918252602082015260400190565b6020604051808303816000875af115801561040c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104309190611c4e565b156106525780546040516323b872dd60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926323b872dd9261048892339216908890600401611c77565b6020604051808303816000875af11580156104a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cb9190611c4e565b508060010160009054906101000a90046001600160a01b03166001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610523573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105479190611c9b565b600282015460405163a9059cbb60e01b815233600482015260248101919091526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af115801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c09190611c4e565b506040518481527f3505429b87a031d0988af558339ac48cce30340b782fd716405bf21bc07408c09060200160405180910390a16000848154811061060757610607611c38565b60009182526020822060069091020180546001600160a01b03199081168255600182018054821690556002820183905560038201839055600482018054909116905560050155610840565b61065b81611aa2565b83101561069a5760405162461bcd60e51b815260206004820152600d60248201526c18995b1bddc81b5a5b88189a59609a1b60448201526064016102bb565b60006106a842610708611cce565b9050816003015481106106bd57600382018190555b6106cf84670de0b6b3a7640000611ce6565b8260010160009054906101000a90046001600160a01b03166001600160a01b031663a035b1fe6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a9190611d05565b83600201546107599190611ce6565b1161078f5760405162461bcd60e51b81526004016102bb906020808252600490820152631dda1bdd60e21b604082015260600190565b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906107df90339030908990600401611c77565b6020604051808303816000875af11580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190611c4e565b5050600581018390556004810180546001600160a01b031916331790555b50505050565b6040516353af180760e01b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301528a81166044830152606482018a90526084820189905260a4820188905260c4820187905260e4820186905263ffffffff8581166101048401526101248301859052831661014483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906353af180790610164016020604051808303816000875af1158015610923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109479190611c9b565b60405163b52c696d60e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063b52c696d90602401600060405180830381600087803b1580156109af57600080fd5b505af11580156109c3573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a799190611c9b565b683635c9adc5dea000006040518463ffffffff1660e01b8152600401610aa193929190611c77565b6020604051808303816000875af1158015610ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae49190611c4e565b506040516323b872dd60e01b81526001600160a01b038c16906323b872dd90610b1590339085908e90600401611c77565b6020604051808303816000875af1158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b589190611c4e565b509a9950505050505050505050565b604051632748913b60e01b81526001600160a01b03848116600483015260009130917f00000000000000000000000000000000000000000000000000000000000000001690632748913b90602401602060405180830381865afa158015610bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf69190611c9b565b6001600160a01b031614610c3a5760405162461bcd60e51b815260206004820152600b60248201526a6e6f74206f757220706f7360a81b60448201526064016102bb565b604051632e292e8d60e01b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015233604483015260648201859052608482018490526000917f000000000000000000000000000000000000000000000000000000000000000090911690632e292e8d9060a4016020604051808303816000875af1158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d079190611c9b565b60405163b52c696d60e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063b52c696d90602401600060405180830381600087803b158015610d6f57600080fd5b505af1158015610d83573d6000803e3d6000fd5b50505050806001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb9190611c9b565b6001600160a01b03166323b872dd3383876040518463ffffffff1660e01b8152600401610e1a93929190611c77565b6020604051808303816000875af1158015610e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5d9190611c4e565b50949350505050565b600080839050806001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610eac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed09190611c9b565b6001600160a01b03166323b872dd3330866040518463ffffffff1660e01b8152600401610eff93929190611c77565b6020604051808303816000875af1158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f429190611c4e565b5060008080549050905060006040518060c00160405280336001600160a01b03168152602001846001600160a01b03168152602001868152602001846001600160a01b031663f3f480d96040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe19190611d05565b610feb9042611cce565b815260006020808301829052604092830182905284546001808201875595835291819020845160069093020180546001600160a01b03199081166001600160a01b03948516178255918501519581018054831696841696909617909555838301516002860155606084015160038601556080840151600480870180549093169184169190911790915560a090930151600590940193909355516342d0204160e01b8152908101869052908316906342d0204190602401600060405180830381600087803b1580156110bb57600080fd5b505af11580156110cf573d6000803e3d6000fd5b5050604080516001600160a01b0386168152602081018890529081018490523392507fc4b384b2c5ca32c8e77081f4083be594a1ea9ba34f208a9f9a458f70608585f5915060600160405180910390a2949350505050565b6000818154811061113757600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b039485169650928416949193909291169086565b6000806000848154811061119457611194611c38565b6000918252602090912060069091020180549091506001600160a01b03166111bb57600080fd5b6040805160c08101825282546001600160a01b0390811682526001840154811660208301529181018590526003830154606082015260048301549091166080820152600282015460058301546000929160a083019161121b908890611ce6565b6112259190611d1e565b81525090508060a001518260050160008282546112429190611d40565b90915550506040810151600283018054600090611260908490611d40565b9091555050600182015460408051632eaf9f1d60e21b815290516000926001600160a01b03169163babe7c74916004808301926020929190829003018187875af11580156112b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d69190611d05565b905080836002015410156112e957600080fd5b80826040015110156112fa57600080fd5b600080546001810182559080528251600682027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039384166001600160a01b031991821681179092556020808801517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56485018054918716918416821790556040808a01517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56587018190556060808c01517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56689015560808c01517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5678901805491909a1696169590951790975560a08a01517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56890960195909555845190815290810194909452918301849052917fc4b384b2c5ca32c8e77081f4083be594a1ea9ba34f208a9f9a458f70608585f5910160405180910390a29695505050505050565b60006114b06000838154811061149d5761149d611c38565b9060005260206000209060060201611aa2565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153a9190611c9b565b905090565b600080828154811061155357611553611c38565b9060005260206000209060060201905060008160010160009054906101000a90046001600160a01b03166001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303816000875af11580156115bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e09190611c9b565b9050816003015442101561162d5760405162461bcd60e51b81526020600482015260146024820152731c195c9a5bd9081a185cc81b9bdd08195b99195960621b60448201526064016102bb565b8154600283015460405163a9059cbb60e01b81526001600160a01b03928316600482015260248101919091529082169063a9059cbb906044016020604051808303816000875af1158015611685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a99190611c4e565b5060048201546000906001600160a01b0316156116d35760048301546001600160a01b03166116d5565b335b60018401546005850154600286015460405163707271b160e01b81526001600160a01b0380861660048301526024820193909352604481019190915292935060009283928392169063707271b1906064016060604051808303816000875af1158015611745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117699190611d57565b925092509250856005015483101561183657600486015460058701546001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263a9059cbb929116906117c5908790611d40565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118349190611c4e565b505b6000620f4240611848614e2085611ce6565b6118529190611d1e565b90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166361f3d1108561188e8685611cce565b6118989190611d40565b6040518263ffffffff1660e01b81526004016118b691815260200190565b600060405180830381600087803b1580156118d057600080fd5b505af11580156118e4573d6000803e3d6000fd5b5050885460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018590527f0000000000000000000000000000000000000000000000000000000000000000909116925063a9059cbb91506044016020604051808303816000875af115801561195b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197f9190611c4e565b506040516313980c6b60e31b81526004810184905263ffffffff831660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639cc0635890604401600060405180830381600087803b1580156119ee57600080fd5b505af1158015611a02573d6000803e3d6000fd5b505050507f05f9cc3345665aee5729d9564c27530d8b2ad3b4eb7e5d2503b15dc98498e72688604051611a3791815260200190565b60405180910390a160008881548110611a5257611a52611c38565b60009182526020822060069091020180546001600160a01b031990811682556001820180548216905560028201839055600382018390556004820180549091169055600501555050505050505050565b60006103e882600501546103ed611ab99190611ce6565b6114b09190611d1e565b600060208284031215611ad557600080fd5b5035919050565b600080600060608486031215611af157600080fd5b505081359360208301359350604090920135919050565b6001600160a01b038116811461024857600080fd5b63ffffffff8116811461024857600080fd5b60008060008060008060008060006101208a8c031215611b4e57600080fd5b8935611b5981611b08565b985060208a0135975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a0135611b8c81611b1d565b925060e08a013591506101008a0135611ba481611b1d565b809150509295985092959850929598565b600080600060608486031215611bca57600080fd5b8335611bd581611b08565b95602085013595506040909401359392505050565b60008060408385031215611bfd57600080fd5b8235611c0881611b08565b946020939093013593505050565b60008060408385031215611c2957600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611c6057600080fd5b81518015158114611c7057600080fd5b9392505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215611cad57600080fd5b8151611c7081611b08565b634e487b7160e01b600052601160045260246000fd5b60008219821115611ce157611ce1611cb8565b500190565b6000816000190483118215151615611d0057611d00611cb8565b500290565b600060208284031215611d1757600080fd5b5051919050565b600082611d3b57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611d5257611d52611cb8565b500390565b600080600060608486031215611d6c57600080fd5b83519250602084015191506040840151611d8581611b1d565b80915050925092509256fea26469706673582212200463d412e935714783e81bae48cbf7a6a438a0dc1c990655506a840f603ef78564736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638f1d37761161008c578063c4d4803a11610066578063c4d4803a146101f3578063c53602271461021a578063cd3293de1461022d578063ec342ad01461023557600080fd5b80638f1d377614610170578063af5806b6146101c2578063be747fd5146101e057600080fd5b80630ad24528146100d45780632ac9bf09146100e95780632bf78dd8146100fc5780633611a3b71461011f57806374362a251461014a5780637b7da10e1461015d575b600080fd5b6100e76100e2366004611ac3565b61023f565b005b6100e76100f7366004611adc565b61024b565b61010c683635c9adc5dea0000081565b6040519081526020015b60405180910390f35b61013261012d366004611b2f565b610846565b6040516001600160a01b039091168152602001610116565b610132610158366004611bb5565b610b67565b61010c61016b366004611bea565b610e66565b61018361017e366004611ac3565b611127565b604080516001600160a01b03978816815295871660208701528501939093526060840191909152909216608082015260a081019190915260c001610116565b6101cb614e2081565b60405163ffffffff9091168152602001610116565b61010c6101ee366004611c16565b61117e565b6101327f000000000000000000000000000000000000000000000000000000000000000081565b61010c610228366004611ac3565b611485565b6101326114b6565b6101cb620f424081565b6102488161153f565b50565b600080848154811061025f5761025f611c38565b9060005260206000209060060201905080600301544210610288576102838461153f565b610840565b806002015482146102c45760405162461bcd60e51b81526020600482015260016024820152607360f81b60448201526064015b60405180910390fd5b60058101541561036e57600481810154600583015460405163a9059cbb60e01b81526001600160a01b039283169381019390935260248301527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036c9190611c4e565b505b6040805185815260208101859052338183015290517f0b946a7d9cbd47da0dd592970ef1259349c40f44b231f11da4babeb56c07dd2d9181900360600190a160018101546002820154604051631f4a712160e11b81526001600160a01b0390921691633e94e242916103ed918790600401918252602082015260400190565b6020604051808303816000875af115801561040c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104309190611c4e565b156106525780546040516323b872dd60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926323b872dd9261048892339216908890600401611c77565b6020604051808303816000875af11580156104a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cb9190611c4e565b508060010160009054906101000a90046001600160a01b03166001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610523573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105479190611c9b565b600282015460405163a9059cbb60e01b815233600482015260248101919091526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af115801561059c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c09190611c4e565b506040518481527f3505429b87a031d0988af558339ac48cce30340b782fd716405bf21bc07408c09060200160405180910390a16000848154811061060757610607611c38565b60009182526020822060069091020180546001600160a01b03199081168255600182018054821690556002820183905560038201839055600482018054909116905560050155610840565b61065b81611aa2565b83101561069a5760405162461bcd60e51b815260206004820152600d60248201526c18995b1bddc81b5a5b88189a59609a1b60448201526064016102bb565b60006106a842610708611cce565b9050816003015481106106bd57600382018190555b6106cf84670de0b6b3a7640000611ce6565b8260010160009054906101000a90046001600160a01b03166001600160a01b031663a035b1fe6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a9190611d05565b83600201546107599190611ce6565b1161078f5760405162461bcd60e51b81526004016102bb906020808252600490820152631dda1bdd60e21b604082015260600190565b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906107df90339030908990600401611c77565b6020604051808303816000875af11580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190611c4e565b5050600581018390556004810180546001600160a01b031916331790555b50505050565b6040516353af180760e01b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301528a81166044830152606482018a90526084820189905260a4820188905260c4820187905260e4820186905263ffffffff8581166101048401526101248301859052831661014483015260009182917f000000000000000000000000000000000000000000000000000000000000000016906353af180790610164016020604051808303816000875af1158015610923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109479190611c9b565b60405163b52c696d60e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063b52c696d90602401600060405180830381600087803b1580156109af57600080fd5b505af11580156109c3573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a799190611c9b565b683635c9adc5dea000006040518463ffffffff1660e01b8152600401610aa193929190611c77565b6020604051808303816000875af1158015610ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae49190611c4e565b506040516323b872dd60e01b81526001600160a01b038c16906323b872dd90610b1590339085908e90600401611c77565b6020604051808303816000875af1158015610b34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b589190611c4e565b509a9950505050505050505050565b604051632748913b60e01b81526001600160a01b03848116600483015260009130917f00000000000000000000000000000000000000000000000000000000000000001690632748913b90602401602060405180830381865afa158015610bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf69190611c9b565b6001600160a01b031614610c3a5760405162461bcd60e51b815260206004820152600b60248201526a6e6f74206f757220706f7360a81b60448201526064016102bb565b604051632e292e8d60e01b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000008116602483015233604483015260648201859052608482018490526000917f000000000000000000000000000000000000000000000000000000000000000090911690632e292e8d9060a4016020604051808303816000875af1158015610ce3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d079190611c9b565b60405163b52c696d60e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063b52c696d90602401600060405180830381600087803b158015610d6f57600080fd5b505af1158015610d83573d6000803e3d6000fd5b50505050806001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb9190611c9b565b6001600160a01b03166323b872dd3383876040518463ffffffff1660e01b8152600401610e1a93929190611c77565b6020604051808303816000875af1158015610e39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5d9190611c4e565b50949350505050565b600080839050806001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610eac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed09190611c9b565b6001600160a01b03166323b872dd3330866040518463ffffffff1660e01b8152600401610eff93929190611c77565b6020604051808303816000875af1158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f429190611c4e565b5060008080549050905060006040518060c00160405280336001600160a01b03168152602001846001600160a01b03168152602001868152602001846001600160a01b031663f3f480d96040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe19190611d05565b610feb9042611cce565b815260006020808301829052604092830182905284546001808201875595835291819020845160069093020180546001600160a01b03199081166001600160a01b03948516178255918501519581018054831696841696909617909555838301516002860155606084015160038601556080840151600480870180549093169184169190911790915560a090930151600590940193909355516342d0204160e01b8152908101869052908316906342d0204190602401600060405180830381600087803b1580156110bb57600080fd5b505af11580156110cf573d6000803e3d6000fd5b5050604080516001600160a01b0386168152602081018890529081018490523392507fc4b384b2c5ca32c8e77081f4083be594a1ea9ba34f208a9f9a458f70608585f5915060600160405180910390a2949350505050565b6000818154811061113757600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b039485169650928416949193909291169086565b6000806000848154811061119457611194611c38565b6000918252602090912060069091020180549091506001600160a01b03166111bb57600080fd5b6040805160c08101825282546001600160a01b0390811682526001840154811660208301529181018590526003830154606082015260048301549091166080820152600282015460058301546000929160a083019161121b908890611ce6565b6112259190611d1e565b81525090508060a001518260050160008282546112429190611d40565b90915550506040810151600283018054600090611260908490611d40565b9091555050600182015460408051632eaf9f1d60e21b815290516000926001600160a01b03169163babe7c74916004808301926020929190829003018187875af11580156112b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d69190611d05565b905080836002015410156112e957600080fd5b80826040015110156112fa57600080fd5b600080546001810182559080528251600682027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563810180546001600160a01b039384166001600160a01b031991821681179092556020808801517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56485018054918716918416821790556040808a01517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56587018190556060808c01517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56689015560808c01517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5678901805491909a1696169590951790975560a08a01517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56890960195909555845190815290810194909452918301849052917fc4b384b2c5ca32c8e77081f4083be594a1ea9ba34f208a9f9a458f70608585f5910160405180910390a29695505050505050565b60006114b06000838154811061149d5761149d611c38565b9060005260206000209060060201611aa2565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153a9190611c9b565b905090565b600080828154811061155357611553611c38565b9060005260206000209060060201905060008160010160009054906101000a90046001600160a01b03166001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303816000875af11580156115bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e09190611c9b565b9050816003015442101561162d5760405162461bcd60e51b81526020600482015260146024820152731c195c9a5bd9081a185cc81b9bdd08195b99195960621b60448201526064016102bb565b8154600283015460405163a9059cbb60e01b81526001600160a01b03928316600482015260248101919091529082169063a9059cbb906044016020604051808303816000875af1158015611685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a99190611c4e565b5060048201546000906001600160a01b0316156116d35760048301546001600160a01b03166116d5565b335b60018401546005850154600286015460405163707271b160e01b81526001600160a01b0380861660048301526024820193909352604481019190915292935060009283928392169063707271b1906064016060604051808303816000875af1158015611745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117699190611d57565b925092509250856005015483101561183657600486015460058701546001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263a9059cbb929116906117c5908790611d40565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118349190611c4e565b505b6000620f4240611848614e2085611ce6565b6118529190611d1e565b90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166361f3d1108561188e8685611cce565b6118989190611d40565b6040518263ffffffff1660e01b81526004016118b691815260200190565b600060405180830381600087803b1580156118d057600080fd5b505af11580156118e4573d6000803e3d6000fd5b5050885460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018590527f0000000000000000000000000000000000000000000000000000000000000000909116925063a9059cbb91506044016020604051808303816000875af115801561195b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197f9190611c4e565b506040516313980c6b60e31b81526004810184905263ffffffff831660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639cc0635890604401600060405180830381600087803b1580156119ee57600080fd5b505af1158015611a02573d6000803e3d6000fd5b505050507f05f9cc3345665aee5729d9564c27530d8b2ad3b4eb7e5d2503b15dc98498e72688604051611a3791815260200190565b60405180910390a160008881548110611a5257611a52611c38565b60009182526020822060069091020180546001600160a01b031990811682556001820180548216905560028201839055600382018390556004820180549091169055600501555050505050505050565b60006103e882600501546103ed611ab99190611ce6565b6114b09190611d1e565b600060208284031215611ad557600080fd5b5035919050565b600080600060608486031215611af157600080fd5b505081359360208301359350604090920135919050565b6001600160a01b038116811461024857600080fd5b63ffffffff8116811461024857600080fd5b60008060008060008060008060006101208a8c031215611b4e57600080fd5b8935611b5981611b08565b985060208a0135975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a0135611b8c81611b1d565b925060e08a013591506101008a0135611ba481611b1d565b809150509295985092959850929598565b600080600060608486031215611bca57600080fd5b8335611bd581611b08565b95602085013595506040909401359392505050565b60008060408385031215611bfd57600080fd5b8235611c0881611b08565b946020939093013593505050565b60008060408385031215611c2957600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611c6057600080fd5b81518015158114611c7057600080fd5b9392505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215611cad57600080fd5b8151611c7081611b08565b634e487b7160e01b600052601160045260246000fd5b60008219821115611ce157611ce1611cb8565b500190565b6000816000190483118215151615611d0057611d00611cb8565b500290565b600060208284031215611d1757600080fd5b5051919050565b600082611d3b57634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611d5257611d52611cb8565b500390565b600080600060608486031215611d6c57600080fd5b83519250602084015191506040840151611d8581611b1d565b80915050925092509256fea26469706673582212200463d412e935714783e81bae48cbf7a6a438a0dc1c990655506a840f603ef78564736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bid(uint256,uint256,uint256)": {
        "params": {
          "_bidAmountZCHF": "how much to bid for the collateral of this challenge (dec 18)",
          "_challengeNumber": "index of the challenge in the challenges array"
        }
      },
      "end(uint256)": {
        "params": {
          "_challengeNumber": "number of the challenge in challenge-array"
        }
      },
      "launchChallenge(address,uint256)": {
        "params": {
          "_collateralAmount": "size of the collateral we want to challenge (dec 18)",
          "_positionAddr": "address of the position we want to challenge"
        },
        "returns": {
          "_0": "index of the challenge in challenge-array"
        }
      },
      "openPosition(address,uint256,uint256,uint256,uint256,uint256,uint32,uint256,uint32)": {
        "params": {
          "_challengePeriod": "challenge period. Longer for less liquid collateral.",
          "_collateral": "address of collateral token",
          "_duration": "position tenor in unit of timestamp (seconds) from 'now'",
          "_fees": "percentage minting fee that will be added to reserve,                           basis 1000_000",
          "_initialCollateral": "amount of initial collateral to be deposited",
          "_initialLimit": "maximal amount of ZCHF that can be minted by the position owner",
          "_liqPrice": "Liquidation price (dec18) that together with the reserve and                           fees determines the minimal collateralization ratio",
          "_minCollateral": "minimum collateral required to prevent dust amounts",
          "_reserve": "percentage reserve amount that is added as the                           borrower's stake into reserve, basis 1000_000"
        },
        "returns": {
          "_0": "address of resulting position"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "bid(uint256,uint256,uint256)": {
        "notice": "Post a bid (ZCHF amount) for an existing challenge (given collateral amount)"
      },
      "end(uint256)": {
        "notice": "Ends a challenge successfully after the auction period ended. Example: A challenged position had 1000 ABC tokens as collateral with a minting limit of 200,000 ZCHF, out of which 60,000 have been minted and thereof 15,000 used to buy reserve tokens. The challenger auctioned off 400 ABC tokens, challenging 40% of the position. The highest bid was 75,000 ZCHF, below the 40% * 200,000 = 80,000 ZCHF needed to avert the challenge. The reserve ratio of the position is 25%. Now, the following happens when calling this method: - 400 ABC from the position owner are transferred to the bidder - The challenger's 400 ABC are returned to the challenger - 40% of the reserve bought with the 15,000 ZCHF is sold off (approximately), yielding e.g. 5,600 ZCHF - 40% * 60,000 = 24,000 ZCHF are burned - 80,000 * 2% = 1600 ZCHF are given to the challenger as a reward - 40% * (100%-25%) * (200,000 - 60,000) = 42,000 are given to the position owner for selling off unused collateral - The remaining 75,000 + 5,600 - 1,600 - 24,000 - 42,000 = 13,000 ZCHF are sent to the reserve pool If the highest bid was only 60,000 ZCHF, then we would have had a shortfall of 2,000 ZCHF that would in the first priority be covered by the reserve and in the second priority by minting unbacked ZCHF, triggering a balance alert."
      },
      "launchChallenge(address,uint256)": {
        "notice": "Launch a challenge on a position"
      },
      "openPosition(address,uint256,uint256,uint256,uint256,uint256,uint32,uint256,uint32)": {
        "notice": "open a collateralized loan position"
      }
    },
    "notice": "A hub for creating collateralized minting positions for a given collateral.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2235,
        "contract": "contracts/MintingHub.sol:MintingHub",
        "label": "challenges",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Challenge)2249_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Challenge)2249_storage)dyn_storage": {
        "base": "t_struct(Challenge)2249_storage",
        "encoding": "dynamic_array",
        "label": "struct MintingHub.Challenge[]",
        "numberOfBytes": "32"
      },
      "t_contract(IPosition)2055": {
        "encoding": "inplace",
        "label": "contract IPosition",
        "numberOfBytes": "20"
      },
      "t_struct(Challenge)2249_storage": {
        "encoding": "inplace",
        "label": "struct MintingHub.Challenge",
        "members": [
          {
            "astId": 2237,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "challenger",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2240,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "position",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IPosition)2055"
          },
          {
            "astId": 2242,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "size",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2244,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "end",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2246,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "bidder",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2248,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "bid",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
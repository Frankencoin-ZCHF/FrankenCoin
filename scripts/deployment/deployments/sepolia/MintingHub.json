{
  "address": "0x4F55268895aa588557Dc3D1421Fc79068dC5537F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_zchf",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        }
      ],
      "name": "BidTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooLate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedSize",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "position",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "ChallengeAverted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "position",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "ChallengeStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "position",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "ChallengeSucceeded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengedId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bidAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "NewBid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "position",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "zchf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PositionOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PostPonedReturn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHALLENGER_REWARD",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPENING_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bidAmountZCHF",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedSize",
          "type": "uint256"
        }
      ],
      "name": "bid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "challenges",
      "outputs": [
        {
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "internalType": "contract IPosition",
          "name": "position",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "bid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "position",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialMint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "clonePosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "postponeCollateralReturn",
          "type": "bool"
        }
      ],
      "name": "end",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeNumber",
          "type": "uint256"
        }
      ],
      "name": "isChallengeOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_positionAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedPrice",
          "type": "uint256"
        }
      ],
      "name": "launchChallenge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challenge",
          "type": "uint256"
        }
      ],
      "name": "minBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintingMaximum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initPeriodSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expirationSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengeSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_yearlyInterestPPM",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_liqPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reservePPM",
          "type": "uint32"
        }
      ],
      "name": "openPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mintingMaximum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expirationSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengeSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_yearlyInterestPPM",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_liqPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reservePPM",
          "type": "uint32"
        }
      ],
      "name": "openPositionOneWeek",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "pendingReturns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "returnPostponedCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_challengeNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "splitOffAmount",
          "type": "uint256"
        }
      ],
      "name": "splitChallenge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zchf",
      "outputs": [
        {
          "internalType": "contract IFrankencoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6e84df453cb5259a8c5b55a987acacb14723342895abb672b92a41876145a11f",
  "receipt": {
    "to": null,
    "from": "0xaA770D646be470BA8Cb97566DD83662334D5D7CF",
    "contractAddress": "0x4F55268895aa588557Dc3D1421Fc79068dC5537F",
    "transactionIndex": 79,
    "gasUsed": "2101719",
    "logsBloom": "0x
    "blockHash": "0xa43b041e46a60f953366d0d20bc6ab61cc24038a431967edcdf3596436d0b7a9",
    "transactionHash": "0x6e84df453cb5259a8c5b55a987acacb14723342895abb672b92a41876145a11f",
    "logs": [],
    "blockNumber": 4058783,
    "cumulativeGasUsed": "8147988",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x304B992EFb5d140393542D072e52279A43a6EA75",
    "0x87a81A66F1716A971e1513bF2fAc7572b06bc8DD"
  ],
  "numDeployments": 2,
  "solcInputHash": "09447aacbad411411a5163007528fe30",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zchf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"BidTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooLate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedSize\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"ChallengeAverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"ChallengeStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"ChallengeSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengedId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"zchf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PositionOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PostPonedReturn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHALLENGER_REWARD\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPENING_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidAmountZCHF\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedSize\",\"type\":\"uint256\"}],\"name\":\"bid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"contract IPosition\",\"name\":\"position\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"position\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"clonePosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"postponeCollateralReturn\",\"type\":\"bool\"}],\"name\":\"end\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeNumber\",\"type\":\"uint256\"}],\"name\":\"isChallengeOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_positionAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedPrice\",\"type\":\"uint256\"}],\"name\":\"launchChallenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challenge\",\"type\":\"uint256\"}],\"name\":\"minBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initPeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expirationSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_yearlyInterestPPM\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_liqPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reservePPM\",\"type\":\"uint32\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mintingMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expirationSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_yearlyInterestPPM\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_liqPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reservePPM\",\"type\":\"uint32\"}],\"name\":\"openPositionOneWeek\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"pendingReturns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"returnPostponedCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_challengeNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"splitOffAmount\",\"type\":\"uint256\"}],\"name\":\"splitChallenge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zchf\",\"outputs\":[{\"internalType\":\"contract IFrankencoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bid(uint256,uint256,uint256)\":{\"params\":{\"_bidAmountZCHF\":\"how much to bid for the collateral of this challenge (dec 18)\",\"_challengeNumber\":\"index of the challenge as broadcast in the event\",\"expectedSize\":\"size verification to guard against frontrunners doing a split-challenge-attack\"}},\"end(uint256,bool)\":{\"params\":{\"postponeCollateralReturn\":\"Can be used to postpone the return of the collateral to the challenger. Usually false.\"}},\"launchChallenge(address,uint256,uint256)\":{\"params\":{\"_collateralAmount\":\"size of the collateral we want to challenge (dec 18)\",\"_positionAddr\":\"address of the position we want to challenge\"},\"returns\":{\"_0\":\"index of the challenge in challenge-array\"}},\"openPosition(address,uint256,uint256,uint256,uint256,uint256,uint256,uint32,uint256,uint32)\":{\"params\":{\"_challengeSeconds\":\"challenge period. Longer for less liquid collateral.\",\"_collateralAddress\":\"address of collateral token\",\"_expirationSeconds\":\"position tenor in unit of timestamp (seconds) from 'now'\",\"_initialCollateral\":\"amount of initial collateral to be deposited\",\"_liqPrice\":\"Liquidation price with (36 - token decimals) decimals,                           e.g. 18 decimals for an 18 decimal collateral, 36 decimals for a 0 decimal collateral.\",\"_minCollateral\":\"minimum collateral required to prevent dust amounts\",\"_mintingMaximum\":\"maximal amount of ZCHF that can be minted by the position owner\",\"_reservePPM\":\"ppm of minted amount that is locked as borrower's reserve, e.g. 20%\",\"_yearlyInterestPPM\":\"ppm of minted amount that is paid as fee to the equity contract for each year of duration\"},\"returns\":{\"_0\":\"address           address of created position\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CHALLENGER_REWARD()\":{\"notice\":\"The challenger reward in parts per million (ppm) relative to the challenged amount, whereas challenged amount if defined as the challenged collateral amount times the liquidation price.\"},\"OPENING_FEE()\":{\"notice\":\"Irrevocable fee in ZCHF when proposing a new position (but not when cloning an existing one).\"},\"bid(uint256,uint256,uint256)\":{\"notice\":\"Post a bid in ZCHF given an open challenge. Requires a ZCHF allowance from the caller to the minting hub.\"},\"clonePosition(address,uint256,uint256,uint256)\":{\"notice\":\"Clones an existing position and immediately tries to mint the specified amount using the given amount of collateral. This requires an allowance to be set on the collateral contract such that the minting hub can withdraw the collateral.\"},\"end(uint256,bool)\":{\"notice\":\"Ends a challenge successfully after the auction period ended, whereas successfully means that the challenger could show that the price of the collateral is too low to make the position well-collateralized. In case that the collateral cannot be transfered back to the challenger (i.e. because the collateral token has a blacklist and the challenger is on it), it is possible to postpone the return of the collateral.\"},\"launchChallenge(address,uint256,uint256)\":{\"notice\":\"Launch a challenge on a position\"},\"openPosition(address,uint256,uint256,uint256,uint256,uint256,uint256,uint32,uint256,uint32)\":{\"notice\":\"Open a collateralized loan position. See also https://docs.frankencoin.com/positions/open . For a successful call, you must set allowances for both ZCHF and the collateral token, allowing the minting hub to transfer the initial collateral amount to the newly created position and to withdraw the fees. Together, the expiration and the minting fee imply an interest rate. TODO: in future versions, it might be better to fix the interest and not the fee\"},\"pendingReturns(address,address)\":{\"notice\":\"Map to remember pending postponed collateral returns. It maps collateral => beneficiary => amount.\"},\"returnPostponedCollateral(address,address)\":{\"notice\":\"Challengers can call this method to withdraw collateral whose return was postponed.\"},\"splitChallenge(uint256,uint256)\":{\"notice\":\"Splits a challenge into two smaller challenges. This can be useful to guard an attack, where a challenger launches a challenge so big that most bidders do not have the liquidity available to bid a sufficient amount. With this function, the can split of smaller slices of the challenge and avert it piece by piece.\"}},\"notice\":\"The central hub for creating, cloning and challenging collateralized Frankencoin positions. Only one instance of this contract is required, whereas every new position comes with a new position contract. Pending challenges are stored as structs in an array.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MintingHub.sol\":\"MintingHub\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/MintingHub.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Ownable.sol\\\";\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IReserve.sol\\\";\\nimport \\\"./interface/IFrankencoin.sol\\\";\\nimport \\\"./interface/IPosition.sol\\\";\\n\\n/**\\n * The central hub for creating, cloning and challenging collateralized Frankencoin positions.\\n * Only one instance of this contract is required, whereas every new position comes with a new position\\n * contract. Pending challenges are stored as structs in an array.\\n */\\ncontract MintingHub {\\n    /**\\n     * Irrevocable fee in ZCHF when proposing a new position (but not when cloning an existing one).\\n     */\\n    uint256 public constant OPENING_FEE = 1000 * 10 ** 18;\\n\\n    /**\\n     * The challenger reward in parts per million (ppm) relative to the challenged amount, whereas\\n     * challenged amount if defined as the challenged collateral amount times the liquidation price.\\n     */\\n    uint32 public constant CHALLENGER_REWARD = 20000; // 2%\\n\\n    IPositionFactory private immutable POSITION_FACTORY; // position contract to clone\\n\\n    IFrankencoin public immutable zchf; // currency\\n    Challenge[] public challenges; // list of open challenges\\n\\n    /**\\n     * Map to remember pending postponed collateral returns.\\n     * It maps collateral => beneficiary => amount.\\n     */\\n    mapping(address collateral => mapping(address owner => uint256 amount))\\n        public pendingReturns;\\n\\n    struct Challenge {\\n        address challenger; // the address from which the challenge was initiated\\n        IPosition position; // the position that was challenged\\n        uint256 size; // how much collateral the challenger provided\\n        uint256 end; // the deadline of the challenge (block.timestamp)\\n        address bidder; // the address from which the highest bid was made, if any\\n        uint256 bid; // the highest bid in ZCHF (total amount, not price per unit)\\n    }\\n\\n    event PositionOpened(\\n        address indexed owner,\\n        address indexed position,\\n        address zchf,\\n        address collateral,\\n        uint256 price\\n    );\\n    event ChallengeStarted(\\n        address indexed challenger,\\n        address indexed position,\\n        uint256 size,\\n        uint256 number\\n    );\\n    event ChallengeAverted(address indexed position, uint256 number);\\n    event ChallengeSucceeded(\\n        address indexed position,\\n        uint256 bid,\\n        uint256 number\\n    );\\n    event NewBid(uint256 challengedId, uint256 bidAmount, address bidder);\\n    event PostPonedReturn(\\n        address collateral,\\n        address indexed beneficiary,\\n        uint256 amount\\n    );\\n\\n    constructor(address _zchf, address _factory) {\\n        zchf = IFrankencoin(_zchf);\\n        POSITION_FACTORY = IPositionFactory(_factory);\\n    }\\n\\n    function openPositionOneWeek(\\n        address _collateralAddress,\\n        uint256 _minCollateral,\\n        uint256 _initialCollateral,\\n        uint256 _mintingMaximum,\\n        uint256 _expirationSeconds,\\n        uint256 _challengeSeconds,\\n        uint32 _yearlyInterestPPM,\\n        uint256 _liqPrice,\\n        uint32 _reservePPM\\n    ) public returns (address) {\\n        return\\n            openPosition(\\n                _collateralAddress,\\n                _minCollateral,\\n                _initialCollateral,\\n                _mintingMaximum,\\n                7 days,\\n                _expirationSeconds,\\n                _challengeSeconds,\\n                _yearlyInterestPPM,\\n                _liqPrice,\\n                _reservePPM\\n            );\\n    }\\n\\n    /**\\n     * Open a collateralized loan position. See also https://docs.frankencoin.com/positions/open .\\n     * For a successful call, you must set allowances for both ZCHF and the collateral token, allowing\\n     * the minting hub to transfer the initial collateral amount to the newly created position and to\\n     * withdraw the fees.\\n     *\\n     * Together, the expiration and the minting fee imply an interest rate.\\n     * TODO: in future versions, it might be better to fix the interest and not the fee\\n     *\\n     * @param _collateralAddress        address of collateral token\\n     * @param _minCollateral     minimum collateral required to prevent dust amounts\\n     * @param _initialCollateral amount of initial collateral to be deposited\\n     * @param _mintingMaximum    maximal amount of ZCHF that can be minted by the position owner\\n     * @param _expirationSeconds position tenor in unit of timestamp (seconds) from 'now'\\n     * @param _challengeSeconds  challenge period. Longer for less liquid collateral.\\n     * @param _yearlyInterestPPM ppm of minted amount that is paid as fee to the equity contract for each year of duration\\n     * @param _liqPrice          Liquidation price with (36 - token decimals) decimals,\\n     *                           e.g. 18 decimals for an 18 decimal collateral, 36 decimals for a 0 decimal collateral.\\n     * @param _reservePPM        ppm of minted amount that is locked as borrower's reserve, e.g. 20%\\n     * @return address           address of created position\\n     */\\n    function openPosition(\\n        address _collateralAddress,\\n        uint256 _minCollateral,\\n        uint256 _initialCollateral,\\n        uint256 _mintingMaximum,\\n        uint256 _initPeriodSeconds,\\n        uint256 _expirationSeconds,\\n        uint256 _challengeSeconds,\\n        uint32 _yearlyInterestPPM,\\n        uint256 _liqPrice,\\n        uint32 _reservePPM\\n    ) public returns (address) {\\n        IPosition pos = IPosition(\\n            POSITION_FACTORY.createNewPosition(\\n                msg.sender,\\n                address(zchf),\\n                _collateralAddress,\\n                _minCollateral,\\n                _mintingMaximum,\\n                _initPeriodSeconds,\\n                _expirationSeconds,\\n                _challengeSeconds,\\n                _yearlyInterestPPM,\\n                _liqPrice,\\n                _reservePPM\\n            )\\n        );\\n        require(IERC20(_collateralAddress).decimals() <= 24); // leaves 12 digits for price\\n        require(\\n            _initialCollateral >= _minCollateral,\\n            \\\"must start with min col\\\"\\n        );\\n        require(_minCollateral * _liqPrice >= 5000 ether); // must start with at least 5000 ZCHF worth of collateral\\n        zchf.registerPosition(address(pos));\\n        zchf.transferFrom(msg.sender, address(zchf.reserve()), OPENING_FEE);\\n        IERC20(_collateralAddress).transferFrom(\\n            msg.sender,\\n            address(pos),\\n            _initialCollateral\\n        );\\n\\n        emit PositionOpened(\\n            msg.sender,\\n            address(pos),\\n            address(zchf),\\n            _collateralAddress,\\n            _liqPrice\\n        );\\n        return address(pos);\\n    }\\n\\n    modifier validPos(address position) {\\n        require(zchf.isPosition(position) == address(this), \\\"not our pos\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Clones an existing position and immediately tries to mint the specified amount using the given amount of collateral.\\n     * This requires an allowance to be set on the collateral contract such that the minting hub can withdraw the collateral.\\n     */\\n    function clonePosition(\\n        address position,\\n        uint256 _initialCollateral,\\n        uint256 _initialMint,\\n        uint256 expiration\\n    ) public validPos(position) returns (address) {\\n        IPosition existing = IPosition(position);\\n        existing.reduceLimitForClone(_initialMint, expiration);\\n        address pos = POSITION_FACTORY.clonePosition(position);\\n        zchf.registerPosition(pos);\\n        IPosition(pos).initializeClone(\\n            msg.sender,\\n            existing.price(),\\n            _initialCollateral,\\n            _initialMint,\\n            expiration\\n        );\\n        existing.collateral().transferFrom(msg.sender, pos, _initialCollateral); // At the end to guard against ERC-777 reentrancy\\n\\n        emit PositionOpened(\\n            msg.sender,\\n            address(pos),\\n            address(zchf),\\n            address(existing.collateral()),\\n            existing.price()\\n        );\\n        return address(pos);\\n    }\\n\\n    /**\\n     * Launch a challenge on a position\\n     * @param _positionAddr      address of the position we want to challenge\\n     * @param _collateralAmount  size of the collateral we want to challenge (dec 18)\\n     * @return index of the challenge in challenge-array\\n     */\\n    function launchChallenge(\\n        address _positionAddr,\\n        uint256 _collateralAmount,\\n        uint256 expectedPrice\\n    ) external validPos(_positionAddr) returns (uint256) {\\n        IPosition position = IPosition(_positionAddr);\\n        if (position.price() != expectedPrice) revert UnexpectedPrice();\\n        IERC20(position.collateral()).transferFrom(\\n            msg.sender,\\n            address(this),\\n            _collateralAmount\\n        ); // At the beginning to guard against ERC-777 reentrancy\\n        uint256 pos = challenges.length;\\n        challenges.push(\\n            Challenge(\\n                msg.sender,\\n                position,\\n                _collateralAmount,\\n                block.timestamp + position.challengePeriod(),\\n                address(0x0),\\n                0\\n            )\\n        );\\n        position.notifyChallengeStarted(_collateralAmount);\\n        emit ChallengeStarted(\\n            msg.sender,\\n            address(position),\\n            _collateralAmount,\\n            pos\\n        );\\n        return pos;\\n    }\\n\\n    error UnexpectedPrice();\\n\\n    /**\\n     * Splits a challenge into two smaller challenges.\\n     * This can be useful to guard an attack, where a challenger launches a challenge so big that most bidders do not\\n     * have the liquidity available to bid a sufficient amount. With this function, the can split of smaller slices of\\n     * the challenge and avert it piece by piece.\\n     */\\n    function splitChallenge(\\n        uint256 _challengeNumber,\\n        uint256 splitOffAmount\\n    ) external returns (uint256) {\\n        Challenge storage challenge = challenges[_challengeNumber];\\n        require(challenge.challenger != address(0x0));\\n        Challenge memory copy = Challenge(\\n            challenge.challenger,\\n            challenge.position,\\n            splitOffAmount,\\n            challenge.end,\\n            challenge.bidder,\\n            (challenge.bid * splitOffAmount) / challenge.size\\n        );\\n        challenge.bid -= copy.bid;\\n        challenge.size -= copy.size;\\n\\n        uint256 min = IPosition(challenge.position).minimumCollateral();\\n        require(challenge.size >= min);\\n        require(copy.size >= min);\\n\\n        uint256 pos = challenges.length;\\n        challenges.push(copy);\\n        emit ChallengeStarted(\\n            challenge.challenger,\\n            address(challenge.position),\\n            challenge.size,\\n            _challengeNumber\\n        );\\n        emit ChallengeStarted(\\n            copy.challenger,\\n            address(copy.position),\\n            copy.size,\\n            pos\\n        );\\n        return pos;\\n    }\\n\\n    function minBid(uint256 challenge) public view returns (uint256) {\\n        return _minBid(challenges[challenge]);\\n    }\\n\\n    /**\\n     * The minimum bid size for the next bid. It must be 0.5% higher than the previous bid.\\n     */\\n    function _minBid(\\n        Challenge storage challenge\\n    ) internal view returns (uint256) {\\n        return (challenge.bid * 1005) / 1000;\\n    }\\n\\n    /**\\n     * Post a bid in ZCHF given an open challenge. Requires a ZCHF allowance from the caller to the minting hub.\\n     *\\n     * @param _challengeNumber   index of the challenge as broadcast in the event\\n     * @param _bidAmountZCHF     how much to bid for the collateral of this challenge (dec 18)\\n     * @param expectedSize       size verification to guard against frontrunners doing a split-challenge-attack\\n     */\\n    function bid(\\n        uint256 _challengeNumber,\\n        uint256 _bidAmountZCHF,\\n        uint256 expectedSize\\n    ) external {\\n        Challenge storage challenge = challenges[_challengeNumber];\\n\\n        // Deactivated: if (block.timestamp >= challenge.end) revert TooLate();\\n        // Reason: in case the bidder got blacklisted by the collateral issuer, it should be possible to bid even higher\\n\\n        if (expectedSize != challenge.size) revert UnexpectedSize();\\n        if (challenge.bid > 0) {\\n            zchf.transfer(challenge.bidder, challenge.bid); // return old bid\\n        }\\n        emit NewBid(_challengeNumber, _bidAmountZCHF, msg.sender);\\n        IPosition pos = challenge.position;\\n        uint256 size_ = challenge.size;\\n        uint256 endTime = challenge.end;\\n        // ask position if the bid was high enough to avert the challenge\\n        if (pos.tryAvertChallenge(size_, _bidAmountZCHF, endTime)) {\\n            // bid was high enough, let bidder buy collateral from challenger\\n            emit ChallengeAverted(address(pos), _challengeNumber);\\n            zchf.transferFrom(msg.sender, challenge.challenger, _bidAmountZCHF);\\n            delete challenges[_challengeNumber]; // delete challenge before transferring collateral to avoid ERC777 re-entrency\\n            pos.collateral().transfer(msg.sender, size_);\\n        } else {\\n            // challenge is not averted, update bid\\n            if (_bidAmountZCHF < _minBid(challenge))\\n                revert BidTooLow(_bidAmountZCHF, _minBid(challenge));\\n            uint256 earliestEnd = block.timestamp + 30 minutes;\\n            if (earliestEnd >= endTime && block.timestamp < endTime) {\\n                // bump remaining time like ebay does when last minute bids come in\\n                // An attacker trying to postpone the challenge forever must increase the bid by 0.5%\\n                // every 30 minutes, or double it every three days, making the attack hard to sustain\\n                // for a prolonged period of time.\\n                challenge.end = earliestEnd;\\n            }\\n            zchf.transferFrom(msg.sender, address(this), _bidAmountZCHF);\\n            challenge.bid = _bidAmountZCHF;\\n            challenge.bidder = msg.sender;\\n        }\\n    }\\n\\n    error TooLate();\\n    error UnexpectedSize();\\n    error BidTooLow(uint256 bid, uint256 min);\\n\\n    function isChallengeOpen(\\n        uint256 _challengeNumber\\n    ) external view returns (bool) {\\n        return challenges[_challengeNumber].end > block.timestamp;\\n    }\\n\\n    /**\\n     * Ends a challenge successfully after the auction period ended, whereas successfully means that the challenger\\n     * could show that the price of the collateral is too low to make the position well-collateralized.\\n     *\\n     * In case that the collateral cannot be transfered back to the challenger (i.e. because the collateral token has a blacklist and the\\n     * challenger is on it), it is possible to postpone the return of the collateral.\\n     *\\n     * @param postponeCollateralReturn Can be used to postpone the return of the collateral to the challenger. Usually false.\\n     */\\n    function end(\\n        uint256 _challengeNumber,\\n        bool postponeCollateralReturn\\n    ) public {\\n        Challenge memory challenge = challenges[_challengeNumber];\\n        require(challenge.challenger != address(0x0));\\n        require(block.timestamp >= challenge.end, \\\"period has not ended\\\");\\n        delete challenges[_challengeNumber]; // delete first to avoid reentrancy with ERC-777 tokens\\n\\n        // challenge must have been successful, because otherwise it would have immediately ended on placing the winning bid\\n\\n        // notify the position that will send the collateral to the bidder. If there is no bid, send the collateral to msg.sender\\n        address recipient = challenge.bidder == address(0x0)\\n            ? msg.sender\\n            : challenge.bidder;\\n        (\\n            address owner,\\n            uint256 effectiveBid,\\n            uint256 repayment,\\n            uint32 reservePPM\\n        ) = challenge.position.notifyChallengeSucceeded(\\n                recipient,\\n                challenge.bid,\\n                challenge.size\\n            );\\n        if (effectiveBid < challenge.bid) {\\n            // overbid, return excess amount\\n            IERC20(zchf).transfer(recipient, challenge.bid - effectiveBid);\\n        }\\n        uint256 reward = (effectiveBid * CHALLENGER_REWARD) / 1000_000;\\n        uint256 fundsNeeded = reward + repayment;\\n        if (effectiveBid > fundsNeeded) {\\n            zchf.transfer(owner, effectiveBid - fundsNeeded);\\n        } else if (effectiveBid < fundsNeeded) {\\n            zchf.notifyLoss(fundsNeeded - effectiveBid); // ensure we have enough to pay everything\\n        }\\n        zchf.transfer(challenge.challenger, reward); // pay out the challenger reward\\n        zchf.burnWithourReserve(repayment, reservePPM); // Repay the challenged part\\n        _returnCollateral(\\n            challenge.position.collateral(),\\n            challenge.challenger,\\n            challenge.size,\\n            postponeCollateralReturn\\n        );\\n        emit ChallengeSucceeded(\\n            address(challenge.position),\\n            challenge.bid,\\n            _challengeNumber\\n        );\\n    }\\n\\n    /**\\n     * Challengers can call this method to withdraw collateral whose return was postponed.\\n     */\\n    function returnPostponedCollateral(\\n        address collateral,\\n        address target\\n    ) external {\\n        uint256 amount = pendingReturns[collateral][msg.sender];\\n        delete pendingReturns[collateral][msg.sender];\\n        IERC20(collateral).transfer(target, amount);\\n    }\\n\\n    function _returnCollateral(\\n        IERC20 collateral,\\n        address recipient,\\n        uint256 amount,\\n        bool postpone\\n    ) internal {\\n        if (postpone) {\\n            // Postponing helps in case the challenger was blacklisted on the collateral token or otherwise cannot receive it at the moment.\\n            pendingReturns[address(collateral)][recipient] += amount;\\n            emit PostPonedReturn(address(collateral), recipient, amount);\\n        } else {\\n            collateral.transfer(recipient, amount); // return the challenger's collateral\\n        }\\n    }\\n}\\n\\ninterface IPositionFactory {\\n    function createNewPosition(\\n        address _owner,\\n        address _zchf,\\n        address _collateral,\\n        uint256 _minCollateral,\\n        uint256 _initialLimit,\\n        uint256 _initPeriodSeconds,\\n        uint256 _duration,\\n        uint256 _challengePeriod,\\n        uint32 _yearlyInterestPPM,\\n        uint256 _liqPrice,\\n        uint32 _reserve\\n    ) external returns (address);\\n\\n    function clonePosition(address _existing) external returns (address);\\n}\\n\",\"keccak256\":\"0x89a61d79bfdf7fde5dee60d4644012d478cf975b4da3e1e165c6bf52a836155a\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0xca95e6b6324b1c92dca4759b3da5fc251053691de885f2e23021eb5abdddea9c\",\"license\":\"MIT\"},\"contracts/interface/IFrankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\n\\ninterface IFrankencoin is IERC20 {\\n    function suggestMinter(\\n        address _minter,\\n        uint256 _applicationPeriod,\\n        uint256 _applicationFee,\\n        string calldata _message\\n    ) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(\\n        address minter,\\n        address[] calldata helpers,\\n        string calldata message\\n    ) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function minterReserve() external view returns (uint256);\\n\\n    function calculateAssignedReserve(\\n        uint256 mintedAmount,\\n        uint32 _reservePPM\\n    ) external view returns (uint256);\\n\\n    function equity() external view returns (uint256);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function isPosition(address position) external view returns (address);\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function mintWithReserve(\\n        address target,\\n        uint256 amount,\\n        uint32 reservePPM,\\n        uint32 feePPM\\n    ) external;\\n\\n    function burnFrom(address target, uint256 amount) external;\\n\\n    function burnWithourReserve(\\n        uint256 amountIncludingReserve,\\n        uint32 reservePPM\\n    ) external;\\n\\n    function burnFromWithReserve(\\n        address payer,\\n        uint256 targetTotalBurnAmount,\\n        uint32 _reservePPM\\n    ) external returns (uint256);\\n\\n    function burnWithReserve(\\n        uint256 amountExcludingReserve,\\n        uint32 reservePPM\\n    ) external returns (uint256);\\n\\n    function notifyLoss(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x480b5b0995e5018f73dc18c6fee19497e2ea8b549a0cdec3dc09832bdaf85b12\",\"license\":\"MIT\"},\"contracts/interface/IPosition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\nimport \\\"./IFrankencoin.sol\\\";\\n\\ninterface IPosition {\\n\\n    function collateral() external returns (IERC20);\\n\\n    function minimumCollateral() external returns (uint256);\\n\\n    function challengePeriod() external returns (uint256);\\n\\n    function expiration() external returns (uint256);\\n\\n    function price() external returns (uint256);\\n\\n    function reduceLimitForClone(uint256 amount, uint256 expiration) external;\\n\\n    function initializeClone(address owner, uint256 _price, uint256 _coll, uint256 _mint, uint256 expiration) external;\\n\\n    function deny(address[] calldata helpers, string calldata message) external;\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function minted() external returns (uint256);\\n\\n    function reserveContribution() external returns (uint32);\\n\\n    function getUsableMint(uint256 totalMint, bool beforeFees) external view returns (uint256);\\n\\n    function notifyChallengeStarted(uint256 size) external;\\n\\n    function tryAvertChallenge(uint256 size, uint256 bid, uint256 challengeEnd) external returns (bool);\\n\\n    function notifyChallengeSucceeded(address bidder, uint256 bid, uint256 size) external returns (address, uint256, uint256, uint32);\\n\\n}\",\"keccak256\":\"0xc26cb71852ab7d7f0745c652284e69540ea2a733b8295fdb4134c1863c30d0a0\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IReserve is IERC20 {\\n   function checkQualified(address sender, address[] calldata helpers) external view;\\n}\",\"keccak256\":\"0xbbb5f65cee6a43065dc16b2fa4540ab2462de86b689cc15a1e8dd2c7b87411d0\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    error NotOwner();\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _setOwner(address newOwner) internal {\\n        require(newOwner != address(0x0));\\n        address oldOwner = owner;\\n        owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    function _requireOwner(address sender) internal view {\\n        if (owner != sender) revert NotOwner();\\n    }\\n\\n    modifier onlyOwner() {\\n        _requireOwner(msg.sender);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9e5333955195741ef45be1462d80eb09730ee0e7f8832c78b020a619d8047c67\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801562000010575f80fd5b506040516200264638038062002646833981016040819052620000339162000067565b6001600160a01b0391821660a052166080526200009d565b80516001600160a01b038116811462000062575f80fd5b919050565b5f806040838503121562000079575f80fd5b62000084836200004b565b915062000094602084016200004b565b90509250929050565b60805160a0516125096200013d5f395f818161026501528181610340015281816104d40152818161070c015281816109a601528181610a8e01528181610b4201528181610be501528181610c7401528181610df101528181611243015281816113fd0152818161163d01528181611ba901528181611d8801528181611de101528181611e110152611fa001525f81816113700152611c1e01526125095ff3fe608060405234801561000f575f80fd5b50600436106100f0575f3560e01c8063a859b47b11610093578063c4d4803a11610063578063c4d4803a14610260578063c536022714610287578063e85cde6f1461029a578063f475f14f146102ad575f80fd5b8063a859b47b146101f9578063af5806b61461020c578063be747fd51461022a578063c0dba9441461023d575f80fd5b8063643745fb116100ce578063643745fb1461013f5780636f8241c9146101695780638f1c335c146101945780638f1d3776146101a7575f80fd5b80632ac9bf09146100f45780632bf78dd814610109578063314142f21461012c575b5f80fd5b61010761010236600461210a565b6102c0565b005b610119683635c9adc5dea0000081565b6040519081526020015b60405180910390f35b61010761013a366004612143565b6107ac565b61011961014d366004612185565b600160209081525f928352604080842090915290825290205481565b61017c6101773660046121c2565b610da8565b6040516001600160a01b039091168152602001610123565b6101196101a2366004612242565b610dcc565b6101ba6101b5366004612274565b6111ca565b604080516001600160a01b03978816815295871660208701528501939093526060840191909152909216608082015260a081019190915260c001610123565b61017c61020736600461228b565b61121e565b610215614e2081565b60405163ffffffff9091168152602001610123565b6101196102383660046122c3565b611740565b61025061024b366004612274565b611aa6565b6040519015158152602001610123565b61017c7f000000000000000000000000000000000000000000000000000000000000000081565b610119610295366004612274565b611ad2565b6101076102a8366004612185565b611af9565b61017c6102bb3660046122e3565b611b8c565b5f8084815481106102d3576102d361236e565b905f5260205f20906006020190508060020154821461030557604051638d343e3760e01b815260040160405180910390fd5b6005810154156103ac57600481810154600583015460405163a9059cbb60e01b81526001600160a01b039283169381019390935260248301527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303815f875af1158015610386573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103aa9190612382565b505b6040805185815260208101859052338183015290517f0b946a7d9cbd47da0dd592970ef1259349c40f44b231f11da4babeb56c07dd2d9181900360600190a160018101546002820154600383015460405163c3c5186360e01b81526004810183905260248101879052604481018290526001600160a01b0390931692839063c3c51863906064016020604051808303815f875af115801561044f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104739190612382565b1561068957826001600160a01b03167f77f5c683926510b182ace6fbf98ddedb0d8f79ddbcbd37b76472bd0428d328ca886040516104b391815260200190565b60405180910390a283546040516323b872dd60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926323b872dd9261050e92339216908b906004016123a4565b6020604051808303815f875af115801561052a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061054e9190612382565b505f87815481106105615761056161236e565b5f9182526020808320600690920290910180546001600160a01b031990811682556001820180548216905560028201849055600382018490556004808301805490921690915560059091018390556040805163d8dfeb4560e01b815290516001600160a01b0388169463d8dfeb459483850194909383900301908290875af11580156105ef573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061061391906123c8565b60405163a9059cbb60e01b8152336004820152602481018490526001600160a01b03919091169063a9059cbb906044016020604051808303815f875af115801561065f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106839190612382565b506107a3565b61069284611fe7565b8610156106ca57856106a385611fe7565b60405163f0defc6160e01b8152600481019290925260248201526044015b60405180910390fd5b5f6106d7426107086123f7565b90508181101580156106e857508142105b156106f557600385018190555b6040516323b872dd60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906323b872dd9061074590339030908c906004016123a4565b6020604051808303815f875af1158015610761573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107859190612382565b5050600584018690556004840180546001600160a01b031916331790555b50505050505050565b5f8083815481106107bf576107bf61236e565b5f9182526020918290206040805160c081018252600690930290910180546001600160a01b03908116808552600183015482169585019590955260028201549284019290925260038101546060840152600481015490911660808301526005015460a0820152915061082f575f80fd5b806060015142101561087a5760405162461bcd60e51b81526020600482015260146024820152731c195c9a5bd9081a185cc81b9bdd08195b99195960621b60448201526064016106c1565b5f838154811061088c5761088c61236e565b5f9182526020822060069091020180546001600160a01b03199081168255600182018054821690556002820183905560038201839055600482018054909116905560050181905560808201516001600160a01b0316156108f05781608001516108f2565b335b90505f805f8085602001516001600160a01b031663707271b1868860a0015189604001516040518463ffffffff1660e01b8152600401610950939291906001600160a01b039390931683526020830191909152604082015260600190565b6080604051808303815f875af115801561096c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610990919061240a565b93509350935093508560a00151831015610a52577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb86858960a001516109e49190612453565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303815f875af1158015610a2c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a509190612382565b505b5f620f4240610a63614e2086612466565b610a6d919061247d565b90505f610a7a84836123f7565b905080851115610b30576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb87610abe8489612453565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303815f875af1158015610b06573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b2a9190612382565b50610bbd565b80851015610bbd576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166361f3d110610b718784612453565b6040518263ffffffff1660e01b8152600401610b8f91815260200190565b5f604051808303815f87803b158015610ba6575f80fd5b505af1158015610bb8573d5f803e3d5ffd5b505050505b875160405163a9059cbb60e01b81526001600160a01b039182166004820152602481018490527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303815f875af1158015610c2d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c519190612382565b50604051630b9f412b60e01b81526004810185905263ffffffff841660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630b9f412b906044015f604051808303815f87803b158015610cbd575f80fd5b505af1158015610ccf573d5f803e3d5ffd5b50505050610d4888602001516001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303815f875af1158015610d17573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d3b91906123c8565b895160408b01518c612007565b87602001516001600160a01b03167ff7bf51234e6ca827a69443267d342998768b8e753f1ec6e1fd72d70714443b168960a001518c604051610d94929190918252602082015260400190565b60405180910390a250505050505050505050565b5f610dbe8a8a8a8a62093a808b8b8b8b8b611b8c565b9a9950505050505050505050565b604051632748913b60e01b81526001600160a01b0384811660048301525f91859130917f000000000000000000000000000000000000000000000000000000000000000090911690632748913b90602401602060405180830381865afa158015610e38573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e5c91906123c8565b6001600160a01b031614610ea05760405162461bcd60e51b815260206004820152600b60248201526a6e6f74206f757220706f7360a81b60448201526064016106c1565b5f85905083816001600160a01b031663a035b1fe6040518163ffffffff1660e01b81526004016020604051808303815f875af1158015610ee2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f06919061249c565b14610f2457604051630d57523160e11b815260040160405180910390fd5b806001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303815f875af1158015610f61573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f8591906123c8565b6001600160a01b03166323b872dd3330886040518463ffffffff1660e01b8152600401610fb4939291906123a4565b6020604051808303815f875af1158015610fd0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ff49190612382565b505f808054905090505f6040518060c00160405280336001600160a01b03168152602001846001600160a01b03168152602001888152602001846001600160a01b031663f3f480d96040518163ffffffff1660e01b81526004016020604051808303815f875af115801561106a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061108e919061249c565b61109890426123f7565b81525f6020808301829052604092830182905284546001808201875595835291819020845160069093020180546001600160a01b03199081166001600160a01b03948516178255918501519581018054831696841696909617909555838301516002860155606084015160038601556080840151600480870180549093169184169190911790915560a090930151600590940193909355516342d0204160e01b8152908101889052908316906342d02041906024015f604051808303815f87803b158015611164575f80fd5b505af1158015611176573d5f803e3d5ffd5b505060408051898152602081018590526001600160a01b03861693503392507fc4b384b2c5ca32c8e77081f4083be594a1ea9ba34f208a9f9a458f70608585f5910160405180910390a39695505050505050565b5f81815481106111d8575f80fd5b5f9182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b039485169650928416949193909291169086565b604051632748913b60e01b81526001600160a01b0385811660048301525f91869130917f000000000000000000000000000000000000000000000000000000000000000090911690632748913b90602401602060405180830381865afa15801561128a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112ae91906123c8565b6001600160a01b0316146112f25760405162461bcd60e51b815260206004820152600b60248201526a6e6f74206f757220706f7360a81b60448201526064016106c1565b60405163a6e503af60e01b8152600481018590526024810184905286906001600160a01b0382169063a6e503af906044015f604051808303815f87803b15801561133a575f80fd5b505af115801561134c573d5f803e3d5ffd5b5050604051630167d12360e71b81526001600160a01b038a811660048301525f93507f000000000000000000000000000000000000000000000000000000000000000016915063b3e89180906024016020604051808303815f875af11580156113b7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113db91906123c8565b60405163b52c696d60e01b81526001600160a01b0380831660048301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063b52c696d906024015f604051808303815f87803b158015611440575f80fd5b505af1158015611452573d5f803e3d5ffd5b50505050806001600160a01b031663aee1a95933846001600160a01b031663a035b1fe6040518163ffffffff1660e01b81526004016020604051808303815f875af11580156114a3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114c7919061249c565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604481018a9052606481018990526084810188905260a4015f604051808303815f87803b15801561151f575f80fd5b505af1158015611531573d5f803e3d5ffd5b50505050816001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303815f875af1158015611572573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061159691906123c8565b6001600160a01b03166323b872dd33838a6040518463ffffffff1660e01b81526004016115c5939291906123a4565b6020604051808303815f875af11580156115e1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116059190612382565b50806001600160a01b0316336001600160a01b03167f591ede549d7e337ac63249acd2d7849532b0a686377bbf0b0cca6c8abd9552f27f0000000000000000000000000000000000000000000000000000000000000000856001600160a01b031663d8dfeb456040518163ffffffff1660e01b81526004016020604051808303815f875af1158015611699573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116bd91906123c8565b866001600160a01b031663a035b1fe6040518163ffffffff1660e01b81526004016020604051808303815f875af11580156116fa573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061171e919061249c565b60405161172d939291906123a4565b60405180910390a3979650505050505050565b5f805f84815481106117545761175461236e565b5f918252602090912060069091020180549091506001600160a01b0316611779575f80fd5b6040805160c08101825282546001600160a01b0390811682526001840154811660208301529181018590526003830154606082015260048301549091166080820152600282015460058301545f929160a08301916117d8908890612466565b6117e2919061247d565b81525090508060a00151826005015f8282546117fe9190612453565b909155505060408101516002830180545f9061181b908490612453565b9091555050600182015460408051632eaf9f1d60e21b815290515f926001600160a01b03169163babe7c74916004808301926020929190829003018187875af115801561186a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061188e919061249c565b905080836002015410156118a0575f80fd5b80826040015110156118b0575f80fd5b5f80546001808201835591805283517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5636006830290810180546001600160a01b03199081166001600160a01b03948516179091556020808801517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5648401805484169186169190911790556040808901517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56585015560608901517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56685015560808901517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e567850180549094169086161790925560a08801517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56890930192909255938701548754600289015486519081529283018c9052939490831693909216917fc4b384b2c5ca32c8e77081f4083be594a1ea9ba34f208a9f9a458f70608585f5910160405180910390a382602001516001600160a01b0316835f01516001600160a01b03167fc4b384b2c5ca32c8e77081f4083be594a1ea9ba34f208a9f9a458f70608585f5856040015184604051611a92929190918252602082015260400190565b60405180910390a393505050505b92915050565b5f425f8381548110611aba57611aba61236e565b905f5260205f20906006020160030154119050919050565b5f611aa05f8381548110611ae857611ae861236e565b905f5260205f209060060201611fe7565b6001600160a01b038281165f81815260016020908152604080832033845290915280822080549290555163a9059cbb60e01b81529284166004840152602483018190529163a9059cbb906044016020604051808303815f875af1158015611b62573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b869190612382565b50505050565b6040516353af180760e01b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660248301528b81166044830152606482018b90526084820189905260a4820188905260c4820187905260e4820186905263ffffffff858116610104840152610124830185905283166101448301525f9182917f000000000000000000000000000000000000000000000000000000000000000016906353af180790610164016020604051808303815f875af1158015611c65573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c8991906123c8565b905060188c6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cc9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ced91906124b3565b60ff161115611cfa575f80fd5b8a8a1015611d4a5760405162461bcd60e51b815260206004820152601760248201527f6d7573742073746172742077697468206d696e20636f6c00000000000000000060448201526064016106c1565b69010f0cf064dd59200000611d5f858d612466565b1015611d69575f80fd5b60405163b52c696d60e01b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063b52c696d906024015f604051808303815f87803b158015611dc9575f80fd5b505af1158015611ddb573d5f803e3d5ffd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166323b872dd337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e6b573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e8f91906123c8565b683635c9adc5dea000006040518463ffffffff1660e01b8152600401611eb7939291906123a4565b6020604051808303815f875af1158015611ed3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ef79190612382565b506040516323b872dd60e01b81526001600160a01b038d16906323b872dd90611f2890339085908f906004016123a4565b6020604051808303815f875af1158015611f44573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f689190612382565b50806001600160a01b0316336001600160a01b03167f591ede549d7e337ac63249acd2d7849532b0a686377bbf0b0cca6c8abd9552f27f00000000000000000000000000000000000000000000000000000000000000008f88604051611fd0939291906123a4565b60405180910390a39b9a5050505050505050505050565b5f6103e882600501546103ed611ffd9190612466565b611aa0919061247d565b8015612093576001600160a01b038085165f908152600160209081526040808320938716835292905290812080548492906120439084906123f7565b9091555050604080516001600160a01b038681168252602082018590528516917f8ab298b78a235f73eee230f82012c0cf4db76003eaabd16a0195f112e7d625c8910160405180910390a2611b86565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905285169063a9059cbb906044016020604051808303815f875af11580156120df573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121039190612382565b5050505050565b5f805f6060848603121561211c575f80fd5b505081359360208301359350604090920135919050565b8015158114612140575f80fd5b50565b5f8060408385031215612154575f80fd5b82359150602083013561216681612133565b809150509250929050565b6001600160a01b0381168114612140575f80fd5b5f8060408385031215612196575f80fd5b82356121a181612171565b9150602083013561216681612171565b63ffffffff81168114612140575f80fd5b5f805f805f805f805f6101208a8c0312156121db575f80fd5b89356121e681612171565b985060208a0135975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a0135612219816121b1565b925060e08a013591506101008a0135612231816121b1565b809150509295985092959850929598565b5f805f60608486031215612254575f80fd5b833561225f81612171565b95602085013595506040909401359392505050565b5f60208284031215612284575f80fd5b5035919050565b5f805f806080858703121561229e575f80fd5b84356122a981612171565b966020860135965060408601359560600135945092505050565b5f80604083850312156122d4575f80fd5b50508035926020909101359150565b5f805f805f805f805f806101408b8d0312156122fd575f80fd5b8a3561230881612171565b995060208b0135985060408b0135975060608b0135965060808b0135955060a08b0135945060c08b0135935060e08b0135612342816121b1565b92506101008b013591506101208b013561235b816121b1565b809150509295989b9194979a5092959850565b634e487b7160e01b5f52603260045260245ffd5b5f60208284031215612392575f80fd5b815161239d81612133565b9392505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b5f602082840312156123d8575f80fd5b815161239d81612171565b634e487b7160e01b5f52601160045260245ffd5b80820180821115611aa057611aa06123e3565b5f805f806080858703121561241d575f80fd5b845161242881612171565b8094505060208501519250604085015191506060850151612448816121b1565b939692955090935050565b81810381811115611aa057611aa06123e3565b8082028115828204841417611aa057611aa06123e3565b5f8261249757634e487b7160e01b5f52601260045260245ffd5b500490565b5f602082840312156124ac575f80fd5b5051919050565b5f602082840312156124c3575f80fd5b815160ff8116811461239d575f80fdfea2646970667358221220212b824c02c9f6ea23093c5cbebfa9fdcc16e2693a4bbd657124cbbe92beee5e64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "bid(uint256,uint256,uint256)": {
        "params": {
          "_bidAmountZCHF": "how much to bid for the collateral of this challenge (dec 18)",
          "_challengeNumber": "index of the challenge as broadcast in the event",
          "expectedSize": "size verification to guard against frontrunners doing a split-challenge-attack"
        }
      },
      "end(uint256,bool)": {
        "params": {
          "postponeCollateralReturn": "Can be used to postpone the return of the collateral to the challenger. Usually false."
        }
      },
      "launchChallenge(address,uint256,uint256)": {
        "params": {
          "_collateralAmount": "size of the collateral we want to challenge (dec 18)",
          "_positionAddr": "address of the position we want to challenge"
        },
        "returns": {
          "_0": "index of the challenge in challenge-array"
        }
      },
      "openPosition(address,uint256,uint256,uint256,uint256,uint256,uint256,uint32,uint256,uint32)": {
        "params": {
          "_challengeSeconds": "challenge period. Longer for less liquid collateral.",
          "_collateralAddress": "address of collateral token",
          "_expirationSeconds": "position tenor in unit of timestamp (seconds) from 'now'",
          "_initialCollateral": "amount of initial collateral to be deposited",
          "_liqPrice": "Liquidation price with (36 - token decimals) decimals,                           e.g. 18 decimals for an 18 decimal collateral, 36 decimals for a 0 decimal collateral.",
          "_minCollateral": "minimum collateral required to prevent dust amounts",
          "_mintingMaximum": "maximal amount of ZCHF that can be minted by the position owner",
          "_reservePPM": "ppm of minted amount that is locked as borrower's reserve, e.g. 20%",
          "_yearlyInterestPPM": "ppm of minted amount that is paid as fee to the equity contract for each year of duration"
        },
        "returns": {
          "_0": "address           address of created position"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "CHALLENGER_REWARD()": {
        "notice": "The challenger reward in parts per million (ppm) relative to the challenged amount, whereas challenged amount if defined as the challenged collateral amount times the liquidation price."
      },
      "OPENING_FEE()": {
        "notice": "Irrevocable fee in ZCHF when proposing a new position (but not when cloning an existing one)."
      },
      "bid(uint256,uint256,uint256)": {
        "notice": "Post a bid in ZCHF given an open challenge. Requires a ZCHF allowance from the caller to the minting hub."
      },
      "clonePosition(address,uint256,uint256,uint256)": {
        "notice": "Clones an existing position and immediately tries to mint the specified amount using the given amount of collateral. This requires an allowance to be set on the collateral contract such that the minting hub can withdraw the collateral."
      },
      "end(uint256,bool)": {
        "notice": "Ends a challenge successfully after the auction period ended, whereas successfully means that the challenger could show that the price of the collateral is too low to make the position well-collateralized. In case that the collateral cannot be transfered back to the challenger (i.e. because the collateral token has a blacklist and the challenger is on it), it is possible to postpone the return of the collateral."
      },
      "launchChallenge(address,uint256,uint256)": {
        "notice": "Launch a challenge on a position"
      },
      "openPosition(address,uint256,uint256,uint256,uint256,uint256,uint256,uint32,uint256,uint32)": {
        "notice": "Open a collateralized loan position. See also https://docs.frankencoin.com/positions/open . For a successful call, you must set allowances for both ZCHF and the collateral token, allowing the minting hub to transfer the initial collateral amount to the newly created position and to withdraw the fees. Together, the expiration and the minting fee imply an interest rate. TODO: in future versions, it might be better to fix the interest and not the fee"
      },
      "pendingReturns(address,address)": {
        "notice": "Map to remember pending postponed collateral returns. It maps collateral => beneficiary => amount."
      },
      "returnPostponedCollateral(address,address)": {
        "notice": "Challengers can call this method to withdraw collateral whose return was postponed."
      },
      "splitChallenge(uint256,uint256)": {
        "notice": "Splits a challenge into two smaller challenges. This can be useful to guard an attack, where a challenger launches a challenge so big that most bidders do not have the liquidity available to bid a sufficient amount. With this function, the can split of smaller slices of the challenge and avert it piece by piece."
      }
    },
    "notice": "The central hub for creating, cloning and challenging collateralized Frankencoin positions. Only one instance of this contract is required, whereas every new position comes with a new position contract. Pending challenges are stored as structs in an array.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1879,
        "contract": "contracts/MintingHub.sol:MintingHub",
        "label": "challenges",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Challenge)1900_storage)dyn_storage"
      },
      {
        "astId": 1886,
        "contract": "contracts/MintingHub.sol:MintingHub",
        "label": "pendingReturns",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Challenge)1900_storage)dyn_storage": {
        "base": "t_struct(Challenge)1900_storage",
        "encoding": "dynamic_array",
        "label": "struct MintingHub.Challenge[]",
        "numberOfBytes": "32"
      },
      "t_contract(IPosition)4892": {
        "encoding": "inplace",
        "label": "contract IPosition",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Challenge)1900_storage": {
        "encoding": "inplace",
        "label": "struct MintingHub.Challenge",
        "members": [
          {
            "astId": 1888,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "challenger",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1891,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "position",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IPosition)4892"
          },
          {
            "astId": 1893,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "size",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1895,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "end",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1897,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "bidder",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 1899,
            "contract": "contracts/MintingHub.sol:MintingHub",
            "label": "bid",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
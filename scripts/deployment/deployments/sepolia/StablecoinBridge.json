{
  "address": "0xE41797Ee89e24bC87926d0a4AB3c41d17B1619C0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "other",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dEUROAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weeks_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "Limit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "UnsupportedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnAndSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dEURO",
      "outputs": [
        {
          "internalType": "contract IDecentralizedEURO",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eur",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "horizon",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ec4bce98788fb95ee1e26a627646adbf8feed0ddd9dc8045cdde234479f6c4c",
  "receipt": {
    "to": null,
    "from": "0x58b104da218e80DA6DA7E14C37A32851a26c8a6a",
    "contractAddress": "0xE41797Ee89e24bC87926d0a4AB3c41d17B1619C0",
    "transactionIndex": 144,
    "gasUsed": "394158",
    "logsBloom": "0x
    "blockHash": "0x2b2a58ed9bf6cb12f2226eaf1c8d9f07cb89ee35d76f42b810d567be58a61745",
    "transactionHash": "0x9ec4bce98788fb95ee1e26a627646adbf8feed0ddd9dc8045cdde234479f6c4c",
    "logs": [],
    "blockNumber": 7152914,
    "cumulativeGasUsed": "8872788",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x762FbFA1f0C62a31FBDd91be63b01Fcd392d733B",
    "0xE20d19b7eE2BADfa2FF4F30952e2bACE18436e22",
    "5000000000000000000000",
    30
  ],
  "numDeployments": 1,
  "solcInputHash": "a5d904776755a405eccedd0612080016",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"other\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dEUROAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weeks_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"Limit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnsupportedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dEURO\",\"outputs\":[{\"internalType\":\"contract IDecentralizedEURO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eur\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"horizon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"dEURO\",\"kind\":\"dev\",\"methods\":{\"mintTo(address,uint256)\":{\"details\":\"This only works if an allowance for the source coins has been set and the caller has enough of them.\"}},\"title\":\"Stable Coin Bridge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Convenience method for burnAndSend(msg.sender, amount)\"},\"burnAndSend(address,uint256)\":{\"notice\":\"Burn the indicated amount of dEURO and send the same number of source coin to the caller.\"},\"horizon()\":{\"notice\":\"The time horizon after which this bridge expires and needs to be replaced by a new contract.\"},\"limit()\":{\"notice\":\"The maximum amount of outstanding converted source stablecoins.\"},\"mint(uint256)\":{\"notice\":\"Convenience method for mint(msg.sender, amount)\"},\"mintTo(address,uint256)\":{\"notice\":\"Mint the target amount of dEUROs, taking the equal amount of source coins from the sender.\"}},\"notice\":\"A minting contract for another Euro stablecoin ('source stablecoin') that we trust.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StablecoinBridge.sol\":\"StablecoinBridge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"contracts/StablecoinBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC677Receiver.sol\\\";\\nimport \\\"./interface/IDecentralizedEURO.sol\\\";\\n\\n/**\\n * @title Stable Coin Bridge\\n * @notice A minting contract for another Euro stablecoin ('source stablecoin') that we trust.\\n * @author dEURO\\n */\\ncontract StablecoinBridge {\\n    IERC20 public immutable eur; // the source stablecoin\\n    IDecentralizedEURO public immutable dEURO; // the dEURO\\n\\n    /**\\n     * @notice The time horizon after which this bridge expires and needs to be replaced by a new contract.\\n     */\\n    uint256 public immutable horizon;\\n\\n    /**\\n     * The maximum amount of outstanding converted source stablecoins.\\n     */\\n    uint256 public immutable limit;\\n    uint256 public minted;\\n\\n    error Limit(uint256 amount, uint256 limit);\\n    error Expired(uint256 time, uint256 expiration);\\n    error UnsupportedToken(address token);\\n\\n    constructor(address other, address dEUROAddress, uint256 limit_, uint256 weeks_) {\\n        eur = IERC20(other);\\n        dEURO = IDecentralizedEURO(dEUROAddress);\\n        horizon = block.timestamp + weeks_ * 1 weeks;\\n        limit = limit_;\\n        minted = 0;\\n    }\\n\\n    /**\\n     * @notice Convenience method for mint(msg.sender, amount)\\n     */\\n    function mint(uint256 amount) external {\\n        mintTo(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Mint the target amount of dEUROs, taking the equal amount of source coins from the sender.\\n     * @dev This only works if an allowance for the source coins has been set and the caller has enough of them.\\n     */\\n    function mintTo(address target, uint256 amount) public {\\n        eur.transferFrom(msg.sender, address(this), amount);\\n        _mint(target, amount);\\n    }\\n\\n    function _mint(address target, uint256 amount) internal {\\n        if (block.timestamp > horizon) revert Expired(block.timestamp, horizon);\\n        dEURO.mint(target, amount);\\n        minted += amount;\\n        if (minted > limit) revert Limit(amount, limit);\\n    }\\n\\n    /**\\n     * @notice Convenience method for burnAndSend(msg.sender, amount)\\n     */\\n    function burn(uint256 amount) external {\\n        _burn(msg.sender, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Burn the indicated amount of dEURO and send the same number of source coin to the caller.\\n     */\\n    function burnAndSend(address target, uint256 amount) external {\\n        _burn(msg.sender, target, amount);\\n    }\\n\\n    function _burn(address dEUROHolder, address target, uint256 amount) internal {\\n        dEURO.burnFrom(dEUROHolder, amount);\\n        eur.transfer(target, amount);\\n        minted -= amount;\\n    }\\n}\\n\",\"keccak256\":\"0x03d2064640e538c93636d03a67e7ef5dd42557ffaeabdc74cf0be9b3ee8a6d34\",\"license\":\"MIT\"},\"contracts/interface/IDecentralizedEURO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IReserve.sol\\\";\\n\\ninterface IDecentralizedEURO is IERC20 {\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, uint256 _applicationFee, string calldata _message) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function minterReserve() external view returns (uint256);\\n\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\n\\n    function equity() external view returns (uint256);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function getPositionParent(address position) external view returns (address);\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burnFrom(address target, uint256 amount) external;\\n\\n    function burnWithoutReserve(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnFromWithReserve(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external returns (uint256);\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n    function coverLoss(address source, uint256 amount) external;\\n\\n    function collectProfits(address source, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x84ce10988a4be705d19209ce204a4ef7e341ceba0b39ba52d5f167307b963b1e\",\"license\":\"MIT\"},\"contracts/interface/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC677Receiver {\\n    \\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\n\\n}\",\"keccak256\":\"0x40703acdfa2126286b117ad0cca84c0a4ca2d3b18586765186c9bdd8ad5cf744\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IReserve is IERC20 {\\n   function invest(uint256 amount, uint256 expected) external returns (uint256);\\n   function checkQualified(address sender, address[] calldata helpers) external view;\\n}\\n\",\"keccak256\":\"0x813d0875ce482c339ce1eedf15a4516c917db12bd4c8a35e51135cd2561ac66f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b5060405161079538038061079583398101604081905261003091610088565b6001600160a01b03808516608052831660a0526100508162093a806100e1565b61005a90426100fe565b60c0525060e052505060008055610111565b80516001600160a01b038116811461008357600080fd5b919050565b6000806000806080858703121561009e57600080fd5b6100a78561006c565b93506100b56020860161006c565b6040860151606090960151949790965092505050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176100f8576100f86100cb565b92915050565b808201808211156100f8576100f86100cb565b60805160a05160c05160e0516106146101816000396000818161016d015281816104bb01526104f6015260008181609d015281816103b201526103ed015260008181610194015281816102a50152610444015260008181610108015281816101e6015261032501526106146000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80637439ae59116100665780637439ae59146101035780639e41b44d14610142578063a0712d6814610155578063a4d66daf14610168578063d395d24b1461018f57600080fd5b80631ce832b51461009857806342966c68146100d2578063449a52f8146100e75780634f02c420146100fa575b600080fd5b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100e56100e0366004610522565b6101b6565b005b6100e56100f536600461053b565b6101c4565b6100bf60005481565b61012a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c9565b6100e561015036600461053b565b61026a565b6100e5610163366004610522565b610275565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b61012a7f000000000000000000000000000000000000000000000000000000000000000081565b6101c133338361027f565b50565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025b9190610573565b5061026682826103b0565b5050565b61026633838361027f565b6101c133826101c4565b60405163079cc67960e41b81526001600160a01b038481166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906379cc679090604401600060405180830381600087803b1580156102e957600080fd5b505af11580156102fd573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016925063a9059cbb91506044016020604051808303816000875af1158015610370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103949190610573565b50806000808282546103a691906105b2565b9091555050505050565b7f000000000000000000000000000000000000000000000000000000000000000042111561041e5760405163aa2fd92560e01b81524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044015b60405180910390fd5b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561048857600080fd5b505af115801561049c573d6000803e3d6000fd5b50505050806000808282546104b191906105cb565b90915550506000547f0000000000000000000000000000000000000000000000000000000000000000101561026657604051631927a4b960e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006024820152604401610415565b60006020828403121561053457600080fd5b5035919050565b6000806040838503121561054e57600080fd5b82356001600160a01b038116811461056557600080fd5b946020939093013593505050565b60006020828403121561058557600080fd5b8151801515811461059557600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105c5576105c561059c565b92915050565b808201808211156105c5576105c561059c56fea2646970667358221220ad03173511e736ce1e161f23e4601e498dbfa3061f9ac94e395ecc1bf9c9743664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c80637439ae59116100665780637439ae59146101035780639e41b44d14610142578063a0712d6814610155578063a4d66daf14610168578063d395d24b1461018f57600080fd5b80631ce832b51461009857806342966c68146100d2578063449a52f8146100e75780634f02c420146100fa575b600080fd5b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100e56100e0366004610522565b6101b6565b005b6100e56100f536600461053b565b6101c4565b6100bf60005481565b61012a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c9565b6100e561015036600461053b565b61026a565b6100e5610163366004610522565b610275565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b61012a7f000000000000000000000000000000000000000000000000000000000000000081565b6101c133338361027f565b50565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610237573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025b9190610573565b5061026682826103b0565b5050565b61026633838361027f565b6101c133826101c4565b60405163079cc67960e41b81526001600160a01b038481166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906379cc679090604401600060405180830381600087803b1580156102e957600080fd5b505af11580156102fd573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016925063a9059cbb91506044016020604051808303816000875af1158015610370573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103949190610573565b50806000808282546103a691906105b2565b9091555050505050565b7f000000000000000000000000000000000000000000000000000000000000000042111561041e5760405163aa2fd92560e01b81524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044015b60405180910390fd5b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561048857600080fd5b505af115801561049c573d6000803e3d6000fd5b50505050806000808282546104b191906105cb565b90915550506000547f0000000000000000000000000000000000000000000000000000000000000000101561026657604051631927a4b960e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006024820152604401610415565b60006020828403121561053457600080fd5b5035919050565b6000806040838503121561054e57600080fd5b82356001600160a01b038116811461056557600080fd5b946020939093013593505050565b60006020828403121561058557600080fd5b8151801515811461059557600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105c5576105c561059c565b92915050565b808201808211156105c5576105c561059c56fea2646970667358221220ad03173511e736ce1e161f23e4601e498dbfa3061f9ac94e395ecc1bf9c9743664736f6c63430008140033",
  "devdoc": {
    "author": "dEURO",
    "kind": "dev",
    "methods": {
      "mintTo(address,uint256)": {
        "details": "This only works if an allowance for the source coins has been set and the caller has enough of them."
      }
    },
    "title": "Stable Coin Bridge",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Convenience method for burnAndSend(msg.sender, amount)"
      },
      "burnAndSend(address,uint256)": {
        "notice": "Burn the indicated amount of dEURO and send the same number of source coin to the caller."
      },
      "horizon()": {
        "notice": "The time horizon after which this bridge expires and needs to be replaced by a new contract."
      },
      "limit()": {
        "notice": "The maximum amount of outstanding converted source stablecoins."
      },
      "mint(uint256)": {
        "notice": "Convenience method for mint(msg.sender, amount)"
      },
      "mintTo(address,uint256)": {
        "notice": "Mint the target amount of dEUROs, taking the equal amount of source coins from the sender."
      }
    },
    "notice": "A minting contract for another Euro stablecoin ('source stablecoin') that we trust.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11597,
        "contract": "contracts/StablecoinBridge.sol:StablecoinBridge",
        "label": "minted",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x7DfBc328c817127197F02B0Fe0F2925aDf977d64",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "other",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "zchfAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "Expired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "Limit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "UnsupportedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnAndSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chf",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "horizon",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zchf",
      "outputs": [
        {
          "internalType": "contract IFrankencoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x326431bb8ee14154d116d6dc9f90321d5c9eb13368f4d6c9cdf723c4d6615750",
  "receipt": {
    "to": null,
    "from": "0xaA770D646be470BA8Cb97566DD83662334D5D7CF",
    "contractAddress": "0x7DfBc328c817127197F02B0Fe0F2925aDf977d64",
    "transactionIndex": 21,
    "gasUsed": "386225",
    "logsBloom": "0x
    "blockHash": "0x0efefd4390e3255612aa7cde5cce73056d2fe71ee3cbdcb4cd27bebd6c01d3c8",
    "transactionHash": "0x326431bb8ee14154d116d6dc9f90321d5c9eb13368f4d6c9cdf723c4d6615750",
    "logs": [],
    "blockNumber": 4320613,
    "cumulativeGasUsed": "3721306",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe94c49Dcf0c7D761c173E9C131B132A1Cfb81A80",
    "0xb8C70553165e197f20a0ceC3dbab439c970f816f",
    "10000000000000000000000000"
  ],
  "numDeployments": 3,
  "solcInputHash": "024db87fd1b3ed736bed5abfcf48ad8d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"other\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zchfAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"Expired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"Limit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnsupportedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnAndSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chf\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"horizon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zchf\",\"outputs\":[{\"internalType\":\"contract IFrankencoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Frankencoin\",\"kind\":\"dev\",\"methods\":{\"mintTo(address,uint256)\":{\"details\":\"This only works if an allowance for the source coins has been set and the caller has enough of them.\"}},\"title\":\"Stable Coin Bridge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Convenience method for burnAndSend(msg.sender, amount)\"},\"burnAndSend(address,uint256)\":{\"notice\":\"Burn the indicated amount of Frankencoin and send the same number of source coin to the caller.\"},\"horizon()\":{\"notice\":\"The time horizon after which this bridge expires and needs to be replaced by a new contract.\"},\"limit()\":{\"notice\":\"The maximum amount of outstanding converted source stablecoins.\"},\"mint(uint256)\":{\"notice\":\"Convenience method for mint(msg.sender, amount)\"},\"mintTo(address,uint256)\":{\"notice\":\"Mint the target amount of Frankencoins, taking the equal amount of source coins from the sender.\"}},\"notice\":\"A minting contract for another Swiss franc stablecoin ('source stablecoin') that we trust.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StablecoinBridge.sol\":\"StablecoinBridge\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/StablecoinBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IERC677Receiver.sol\\\";\\nimport \\\"./interface/IFrankencoin.sol\\\";\\n\\n/**\\n * @title Stable Coin Bridge\\n * @notice A minting contract for another Swiss franc stablecoin ('source stablecoin') that we trust.\\n * @author Frankencoin\\n */\\ncontract StablecoinBridge {\\n    IERC20 public immutable chf; // the source stablecoin\\n    IFrankencoin public immutable zchf; // the Frankencoin\\n\\n    /**\\n     * @notice The time horizon after which this bridge expires and needs to be replaced by a new contract.\\n     */\\n    uint256 public immutable horizon;\\n\\n    /**\\n     * The maximum amount of outstanding converted source stablecoins.\\n     */\\n    uint256 public immutable limit;\\n    uint256 public minted;\\n\\n    error Limit(uint256 amount, uint256 limit);\\n    error Expired(uint256 time, uint256 expiration);\\n    error UnsupportedToken(address token);\\n\\n    constructor(address other, address zchfAddress, uint256 limit_) {\\n        chf = IERC20(other);\\n        zchf = IFrankencoin(zchfAddress);\\n        horizon = block.timestamp + 52 weeks;\\n        limit = limit_;\\n        minted = 0;\\n    }\\n\\n    /**\\n     * @notice Convenience method for mint(msg.sender, amount)\\n     */\\n    function mint(uint256 amount) external {\\n        mintTo(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Mint the target amount of Frankencoins, taking the equal amount of source coins from the sender.\\n     * @dev This only works if an allowance for the source coins has been set and the caller has enough of them.\\n     */\\n    function mintTo(address target, uint256 amount) public {\\n        chf.transferFrom(msg.sender, address(this), amount);\\n        _mint(target, amount);\\n    }\\n\\n    function _mint(address target, uint256 amount) internal {\\n        if (block.timestamp > horizon) revert Expired(block.timestamp, horizon);\\n        zchf.mint(target, amount);\\n        minted += amount;\\n        if (minted > limit) revert Limit(amount, limit);\\n    }\\n\\n    /**\\n     * @notice Convenience method for burnAndSend(msg.sender, amount)\\n     */\\n    function burn(uint256 amount) external {\\n        _burn(msg.sender, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Burn the indicated amount of Frankencoin and send the same number of source coin to the caller.\\n     */\\n    function burnAndSend(address target, uint256 amount) external {\\n        _burn(msg.sender, target, amount);\\n    }\\n\\n    function _burn(address zchfHolder, address target, uint256 amount) internal {\\n        zchf.burnFrom(zchfHolder, amount);\\n        chf.transfer(target, amount);\\n        minted -= amount;\\n    }\\n}\\n\",\"keccak256\":\"0x6b54ca4e5360ee177d0bab6ad2eb18670dec62284671483df8b94d9eb980f7b6\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2016-2019 zOS Global Limited\\n *\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns always true. Throws error on failure.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value can change when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns always true. Throws error on failure.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6c4823424e1d0c53e2d3e978b81929fcec2583b96ed286abc955b71a5aad5544\",\"license\":\"MIT\"},\"contracts/interface/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC677Receiver {\\n    \\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\n\\n}\",\"keccak256\":\"0x40703acdfa2126286b117ad0cca84c0a4ca2d3b18586765186c9bdd8ad5cf744\",\"license\":\"MIT\"},\"contracts/interface/IFrankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\n\\ninterface IFrankencoin is IERC20 {\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, uint256 _applicationFee, string calldata _message) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function minterReserve() external view returns (uint256);\\n\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\n\\n    function equity() external view returns (uint256);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function getPositionParent(address position) external view returns (address);\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burnFrom(address target, uint256 amount) external;\\n\\n    function burnWithoutReserve(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnFromWithReserve(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external returns (uint256);\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n    function notifyLoss(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xb06c0141cd64d092f192123055154ef58f9aafe3f7b4fc56ac41e75659727990\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IReserve is IERC20 {\\n   function invest(uint256 amount, uint256 expected) external returns (uint256);\\n   function checkQualified(address sender, address[] calldata helpers) external view;\\n}\",\"keccak256\":\"0x3b46b47f54a43bf2da382a4e5cc70e72a1aeb7845c75d30a04809ecccf2019dc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100604052348015610010575f80fd5b5060405161073438038061073483398101604081905261002f9161007b565b6001600160a01b03808416608052821660a052610050426301dfe2006100b4565b60c05260e05250505f80556100d9565b80516001600160a01b0381168114610076575f80fd5b919050565b5f805f6060848603121561008d575f80fd5b61009684610060565b92506100a460208501610060565b9150604084015190509250925092565b808201808211156100d357634e487b7160e01b5f52601160045260245ffd5b92915050565b60805160a05160c05160e0516105f26101425f395f8181610168015281816104a301526104de01525f81816099015281816103a101526103dc01525f818161018f0152818161029d015261043301525f818160d3015281816101e1015261031801526105f25ff3fe608060405234801561000f575f80fd5b5060043610610090575f3560e01c80634f02c420116100635780634f02c420146101355780639e41b44d1461013d578063a0712d6814610150578063a4d66daf14610163578063c4d4803a1461018a575f80fd5b80631ce832b51461009457806337b272b0146100ce57806342966c681461010d578063449a52f814610122575b5f80fd5b6100bb7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c5565b61012061011b36600461050a565b6101b1565b005b610120610130366004610521565b6101bf565b6100bb5f5481565b61012061014b366004610521565b610262565b61012061015e36600461050a565b61026d565b6100bb7f000000000000000000000000000000000000000000000000000000000000000081565b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b6101bc333383610277565b50565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af115801561022f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102539190610556565b5061025e828261039f565b5050565b61025e338383610277565b6101bc33826101bf565b60405163079cc67960e41b81526001600160a01b038481166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906379cc6790906044015f604051808303815f87803b1580156102de575f80fd5b505af11580156102f0573d5f803e3d5ffd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016925063a9059cbb91506044016020604051808303815f875af1158015610360573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103849190610556565b50805f808282546103959190610590565b9091555050505050565b7f000000000000000000000000000000000000000000000000000000000000000042111561040d5760405163aa2fd92560e01b81524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044015b60405180910390fd5b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906044015f604051808303815f87803b158015610474575f80fd5b505af1158015610486573d5f803e3d5ffd5b50505050805f8082825461049a91906105a9565b90915550505f547f0000000000000000000000000000000000000000000000000000000000000000101561025e57604051631927a4b960e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006024820152604401610404565b5f6020828403121561051a575f80fd5b5035919050565b5f8060408385031215610532575f80fd5b82356001600160a01b0381168114610548575f80fd5b946020939093013593505050565b5f60208284031215610566575f80fd5b81518015158114610575575f80fd5b9392505050565b634e487b7160e01b5f52601160045260245ffd5b818103818111156105a3576105a361057c565b92915050565b808201808211156105a3576105a361057c56fea2646970667358221220855a2492c396fd37fced8ea4d912f5c5f7a043770061503bca914aec434d30eb64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610090575f3560e01c80634f02c420116100635780634f02c420146101355780639e41b44d1461013d578063a0712d6814610150578063a4d66daf14610163578063c4d4803a1461018a575f80fd5b80631ce832b51461009457806337b272b0146100ce57806342966c681461010d578063449a52f814610122575b5f80fd5b6100bb7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c5565b61012061011b36600461050a565b6101b1565b005b610120610130366004610521565b6101bf565b6100bb5f5481565b61012061014b366004610521565b610262565b61012061015e36600461050a565b61026d565b6100bb7f000000000000000000000000000000000000000000000000000000000000000081565b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b6101bc333383610277565b50565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af115801561022f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102539190610556565b5061025e828261039f565b5050565b61025e338383610277565b6101bc33826101bf565b60405163079cc67960e41b81526001600160a01b038481166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906379cc6790906044015f604051808303815f87803b1580156102de575f80fd5b505af11580156102f0573d5f803e3d5ffd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016925063a9059cbb91506044016020604051808303815f875af1158015610360573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103849190610556565b50805f808282546103959190610590565b9091555050505050565b7f000000000000000000000000000000000000000000000000000000000000000042111561040d5760405163aa2fd92560e01b81524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201526044015b60405180910390fd5b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906044015f604051808303815f87803b158015610474575f80fd5b505af1158015610486573d5f803e3d5ffd5b50505050805f8082825461049a91906105a9565b90915550505f547f0000000000000000000000000000000000000000000000000000000000000000101561025e57604051631927a4b960e21b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006024820152604401610404565b5f6020828403121561051a575f80fd5b5035919050565b5f8060408385031215610532575f80fd5b82356001600160a01b0381168114610548575f80fd5b946020939093013593505050565b5f60208284031215610566575f80fd5b81518015158114610575575f80fd5b9392505050565b634e487b7160e01b5f52601160045260245ffd5b818103818111156105a3576105a361057c565b92915050565b808201808211156105a3576105a361057c56fea2646970667358221220855a2492c396fd37fced8ea4d912f5c5f7a043770061503bca914aec434d30eb64736f6c63430008140033",
  "devdoc": {
    "author": "Frankencoin",
    "kind": "dev",
    "methods": {
      "mintTo(address,uint256)": {
        "details": "This only works if an allowance for the source coins has been set and the caller has enough of them."
      }
    },
    "title": "Stable Coin Bridge",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Convenience method for burnAndSend(msg.sender, amount)"
      },
      "burnAndSend(address,uint256)": {
        "notice": "Burn the indicated amount of Frankencoin and send the same number of source coin to the caller."
      },
      "horizon()": {
        "notice": "The time horizon after which this bridge expires and needs to be replaced by a new contract."
      },
      "limit()": {
        "notice": "The maximum amount of outstanding converted source stablecoins."
      },
      "mint(uint256)": {
        "notice": "Convenience method for mint(msg.sender, amount)"
      },
      "mintTo(address,uint256)": {
        "notice": "Mint the target amount of Frankencoins, taking the equal amount of source coins from the sender."
      }
    },
    "notice": "A minting contract for another Swiss franc stablecoin ('source stablecoin') that we trust.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4287,
        "contract": "contracts/StablecoinBridge.sol:StablecoinBridge",
        "label": "minted",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0xF798C674c636657bede42c7f71F6939e0d25E680",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "other",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "zchfAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chf",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "horizon",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zchf",
      "outputs": [
        {
          "internalType": "contract IFrankencoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf5ab8c0c4fe12e336760ab72fbb7586b4ec581cd05385370c21ed26c6003686f",
  "receipt": {
    "to": null,
    "from": "0xaA770D646be470BA8Cb97566DD83662334D5D7CF",
    "contractAddress": "0xF798C674c636657bede42c7f71F6939e0d25E680",
    "transactionIndex": 25,
    "gasUsed": "466789",
    "logsBloom": "0x
    "blockHash": "0xbbd3c9cbbe9b64efbfe265a75494c98ba0eccfa4d573b80bb005c6cf5752ee01",
    "transactionHash": "0xf5ab8c0c4fe12e336760ab72fbb7586b4ec581cd05385370c21ed26c6003686f",
    "logs": [],
    "blockNumber": 4045805,
    "cumulativeGasUsed": "7087561",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCf3f8985e8aA051C15ED7baBCeEAc9aaD6711a85",
    "0xB19373305306DeE3156e0916bB1ed07aafcc345c",
    "10000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "8571abff4a55631b79a0403e95c7f845",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"other\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zchfAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chf\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"horizon\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zchf\",\"outputs\":[{\"internalType\":\"contract IFrankencoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(address,uint256)\":{\"notice\":\"Burn the indicated amount of Frankencoin and send the same number of source coin to the caller. No allowance required.\"},\"horizon()\":{\"notice\":\"The time horizon after which this bridge expires and needs to be replaced by a new contract.\"},\"limit()\":{\"notice\":\"The maximum amount of outstanding converted source stablecoins.\"},\"mint(address,uint256)\":{\"notice\":\"Mint the target amount of Frankencoins, taking the equal amount of source coins from the sender. This only works if an allowance for the source coins has been set and the caller has enough of them.\"},\"mint(uint256)\":{\"notice\":\"Convenience method for mint(msg.sender, amount)\"},\"onTokenTransfer(address,uint256,bytes)\":{\"notice\":\"Supporting the direct minting and burning through ERC-677, if supported by the sent coin.\"}},\"notice\":\"A minting contract for another Swiss franc stablecoin ('source stablecoin') that we trust.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StablecoinBridge.sol\":\"StablecoinBridge\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0xca95e6b6324b1c92dca4759b3da5fc251053691de885f2e23021eb5abdddea9c\",\"license\":\"MIT\"},\"contracts/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC677Receiver {\\n    \\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\n\\n}\",\"keccak256\":\"0x40703acdfa2126286b117ad0cca84c0a4ca2d3b18586765186c9bdd8ad5cf744\",\"license\":\"MIT\"},\"contracts/IFrankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\n\\ninterface IFrankencoin is IERC20 {\\n\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, \\n      uint256 _applicationFee, string calldata _message) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function minterReserve() external view returns (uint256);\\n\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\n\\n    function equity() external view returns (uint256);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function isPosition(address position) external view returns (address);\\n    \\n    function mint(address target, uint256 amount) external;\\n\\n    function mint(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burn(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnFrom(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external returns (uint256);\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n    function burn(address target, uint256 amount) external;\\n\\n    function notifyLoss(uint256 amount) external;\\n\\n}\",\"keccak256\":\"0x7d0b038b27ee4f8aa8e827ed5efd1bd69c19cb3a58ff52ca05d3f375ef936e84\",\"license\":\"MIT\"},\"contracts/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IReserve is IERC20 {\\n   function checkQualified(address sender, address[] calldata helpers) external view;\\n}\",\"keccak256\":\"0xbbb5f65cee6a43065dc16b2fa4540ab2462de86b689cc15a1e8dd2c7b87411d0\",\"license\":\"MIT\"},\"contracts/StablecoinBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IERC677Receiver.sol\\\";\\nimport \\\"./IFrankencoin.sol\\\";\\n\\n/**\\n * A minting contract for another Swiss franc stablecoin ('source stablecoin') that we trust.\\n */\\ncontract StablecoinBridge {\\n\\n    IERC20 public immutable chf; // the source stablecoin\\n    IFrankencoin public immutable zchf; // the Frankencoin\\n\\n    /**\\n     * The time horizon after which this bridge expires and needs to be replaced by a new contract.\\n     */\\n    uint256 public immutable horizon;\\n\\n    /**\\n     * The maximum amount of outstanding converted source stablecoins.\\n     */\\n    uint256 public immutable limit;\\n\\n    constructor(address other, address zchfAddress, uint256 limit_){\\n        chf = IERC20(other);\\n        zchf = IFrankencoin(zchfAddress);\\n        horizon = block.timestamp + 52 weeks;\\n        limit = limit_;\\n    }\\n\\n    /**\\n     * Convenience method for mint(msg.sender, amount)\\n     */\\n    function mint(uint256 amount) external {\\n        mint(msg.sender, amount);\\n    }\\n\\n    /**\\n     * Mint the target amount of Frankencoins, taking the equal amount of source coins from the sender.\\n     * This only works if an allowance for the source coins has been set and the caller has enough of them.\\n     */\\n    function mint(address target, uint256 amount) public {\\n        chf.transferFrom(msg.sender, address(this), amount);\\n        mintInternal(target, amount);\\n    }\\n\\n    function mintInternal(address target, uint256 amount) internal {\\n        require(block.timestamp <= horizon, \\\"expired\\\");\\n        require(chf.balanceOf(address(this)) <= limit, \\\"limit\\\");\\n        zchf.mint(target, amount);\\n    }\\n    \\n    function burn(uint256 amount) external {\\n        burnInternal(msg.sender, msg.sender, amount);\\n    }\\n\\n    /**\\n     * Burn the indicated amount of Frankencoin and send the same number of source coin to the caller.\\n     * No allowance required.\\n     */\\n    function burn(address target, uint256 amount) external {\\n        burnInternal(msg.sender, target, amount);\\n    }\\n\\n    function burnInternal(address zchfHolder, address target, uint256 amount) internal {\\n        zchf.burn(zchfHolder, amount);\\n        chf.transfer(target, amount);\\n    }\\n\\n    /**\\n     * Supporting the direct minting and burning through ERC-677, if supported by the sent coin.\\n     */\\n    function onTokenTransfer(address from, uint256 amount, bytes calldata) external returns (bool){\\n        if (msg.sender == address(chf)){\\n            mintInternal(from, amount);\\n        } else if (msg.sender == address(zchf)){\\n            burnInternal(address(this), from, amount);\\n        } else {\\n            require(false, \\\"unsupported token\\\");\\n        }\\n        return true;\\n    }\\n    \\n}\",\"keccak256\":\"0x8267e4b16bfbdf66d864a6925dfe5878ed3b395a438c21d78a1afb0b4a4d7119\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100604052348015610010575f80fd5b506040516108b93803806108b983398101604081905261002f91610079565b6001600160a01b03808416608052821660a052610050426301dfe2006100b2565b60c05260e052506100d79050565b80516001600160a01b0381168114610074575f80fd5b919050565b5f805f6060848603121561008b575f80fd5b6100948461005e565b92506100a26020850161005e565b9150604084015190509250925092565b808201808211156100d157634e487b7160e01b5f52601160045260245ffd5b92915050565b60805160a05160c05160e0516107726101475f395f818161018301526103c801525f81816099015261035b01525f81816101aa015281816102dc015281816104b7015261053801525f818160d3015281816101ee0152818161029d015281816103ea01526105b301526107725ff3fe608060405234801561000f575f80fd5b5060043610610090575f3560e01c80639dc29fac116100635780639dc29fac14610135578063a0712d6814610148578063a4c0ed361461015b578063a4d66daf1461017e578063c4d4803a146101a5575f80fd5b80631ce832b51461009457806337b272b0146100ce57806340c10f191461010d57806342966c6814610122575b5f80fd5b6100bb7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c5565b61012061011b366004610640565b6101cc565b005b610120610130366004610668565b61026f565b610120610143366004610640565b61027d565b610120610156366004610668565b610288565b61016e61016936600461067f565b610292565b60405190151581526020016100c5565b6100bb7f000000000000000000000000000000000000000000000000000000000000000081565b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af115801561023c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061026091906106ff565b5061026b8282610359565b5050565b61027a333383610512565b50565b61026b338383610512565b61027a33826101cc565b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633036102d2576102cd8585610359565b61034e565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361030d576102cd308686610512565b60405162461bcd60e51b81526020600482015260116024820152703ab739bab83837b93a32b2103a37b5b2b760791b60448201526064015b60405180910390fd5b506001949350505050565b7f00000000000000000000000000000000000000000000000000000000000000004211156103b35760405162461bcd60e51b8152602060048201526007602482015266195e1c1a5c995960ca1b6044820152606401610345565b6040516370a0823160e01b81523060048201527f0000000000000000000000000000000000000000000000000000000000000000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610437573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061045b9190610725565b11156104915760405162461bcd60e51b81526020600482015260056024820152641b1a5b5a5d60da1b6044820152606401610345565b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906044015f604051808303815f87803b1580156104f8575f80fd5b505af115801561050a573d5f803e3d5ffd5b505050505050565b604051632770a7eb60e21b81526001600160a01b038481166004830152602482018390527f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac906044015f604051808303815f87803b158015610579575f80fd5b505af115801561058b573d5f803e3d5ffd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016925063a9059cbb91506044016020604051808303815f875af11580156105fb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061061f91906106ff565b50505050565b80356001600160a01b038116811461063b575f80fd5b919050565b5f8060408385031215610651575f80fd5b61065a83610625565b946020939093013593505050565b5f60208284031215610678575f80fd5b5035919050565b5f805f8060608587031215610692575f80fd5b61069b85610625565b935060208501359250604085013567ffffffffffffffff808211156106be575f80fd5b818701915087601f8301126106d1575f80fd5b8135818111156106df575f80fd5b8860208285010111156106f0575f80fd5b95989497505060200194505050565b5f6020828403121561070f575f80fd5b8151801515811461071e575f80fd5b9392505050565b5f60208284031215610735575f80fd5b505191905056fea2646970667358221220d738e069c6d4f7985f0a84415c43d0f84f5d1c32b2f58948161f74ce6c9c837964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610090575f3560e01c80639dc29fac116100635780639dc29fac14610135578063a0712d6814610148578063a4c0ed361461015b578063a4d66daf1461017e578063c4d4803a146101a5575f80fd5b80631ce832b51461009457806337b272b0146100ce57806340c10f191461010d57806342966c6814610122575b5f80fd5b6100bb7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c5565b61012061011b366004610640565b6101cc565b005b610120610130366004610668565b61026f565b610120610143366004610640565b61027d565b610120610156366004610668565b610288565b61016e61016936600461067f565b610292565b60405190151581526020016100c5565b6100bb7f000000000000000000000000000000000000000000000000000000000000000081565b6100f57f000000000000000000000000000000000000000000000000000000000000000081565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af115801561023c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061026091906106ff565b5061026b8282610359565b5050565b61027a333383610512565b50565b61026b338383610512565b61027a33826101cc565b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633036102d2576102cd8585610359565b61034e565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361030d576102cd308686610512565b60405162461bcd60e51b81526020600482015260116024820152703ab739bab83837b93a32b2103a37b5b2b760791b60448201526064015b60405180910390fd5b506001949350505050565b7f00000000000000000000000000000000000000000000000000000000000000004211156103b35760405162461bcd60e51b8152602060048201526007602482015266195e1c1a5c995960ca1b6044820152606401610345565b6040516370a0823160e01b81523060048201527f0000000000000000000000000000000000000000000000000000000000000000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610437573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061045b9190610725565b11156104915760405162461bcd60e51b81526020600482015260056024820152641b1a5b5a5d60da1b6044820152606401610345565b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f19906044015f604051808303815f87803b1580156104f8575f80fd5b505af115801561050a573d5f803e3d5ffd5b505050505050565b604051632770a7eb60e21b81526001600160a01b038481166004830152602482018390527f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac906044015f604051808303815f87803b158015610579575f80fd5b505af115801561058b573d5f803e3d5ffd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016925063a9059cbb91506044016020604051808303815f875af11580156105fb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061061f91906106ff565b50505050565b80356001600160a01b038116811461063b575f80fd5b919050565b5f8060408385031215610651575f80fd5b61065a83610625565b946020939093013593505050565b5f60208284031215610678575f80fd5b5035919050565b5f805f8060608587031215610692575f80fd5b61069b85610625565b935060208501359250604085013567ffffffffffffffff808211156106be575f80fd5b818701915087601f8301126106d1575f80fd5b8135818111156106df575f80fd5b8860208285010111156106f0575f80fd5b95989497505060200194505050565b5f6020828403121561070f575f80fd5b8151801515811461071e575f80fd5b9392505050565b5f60208284031215610735575f80fd5b505191905056fea2646970667358221220d738e069c6d4f7985f0a84415c43d0f84f5d1c32b2f58948161f74ce6c9c837964736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(address,uint256)": {
        "notice": "Burn the indicated amount of Frankencoin and send the same number of source coin to the caller. No allowance required."
      },
      "horizon()": {
        "notice": "The time horizon after which this bridge expires and needs to be replaced by a new contract."
      },
      "limit()": {
        "notice": "The maximum amount of outstanding converted source stablecoins."
      },
      "mint(address,uint256)": {
        "notice": "Mint the target amount of Frankencoins, taking the equal amount of source coins from the sender. This only works if an allowance for the source coins has been set and the caller has enough of them."
      },
      "mint(uint256)": {
        "notice": "Convenience method for mint(msg.sender, amount)"
      },
      "onTokenTransfer(address,uint256,bytes)": {
        "notice": "Supporting the direct minting and burning through ERC-677, if supported by the sent coin."
      }
    },
    "notice": "A minting contract for another Swiss franc stablecoin ('source stablecoin') that we trust.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
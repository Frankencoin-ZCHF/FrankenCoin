{
  "language": "Solidity",
  "sources": {
    "contracts/MintingHub.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IReserve.sol\";\nimport \"./IFrankencoin.sol\";\nimport \"./Ownable.sol\";\nimport \"./IPosition.sol\";\n\n/**\n * A hub for creating collateralized minting positions for a given collateral.\n */\ncontract MintingHub {\n\n    uint256 public constant OPENING_FEE = 1000*10**18;\n    \n    uint32 public constant BASE = 1000_000;\n    uint32 public constant CHALLENGER_REWARD = 20000; // 2% \n\n    IPositionFactory private immutable POSITION_FACTORY; // position contract to clone\n\n    IFrankencoin public immutable zchf; // currency\n    Challenge[] public challenges;\n    \n    event PositionOpened(address indexed owner, \n        address collateral, uint256 initialCollateral, uint256 initialLimit, \n        uint256 duration, uint256 challengePeriod, uint32 fees, uint32 reserve, address positionAddr);\n\n    struct Challenge {\n        address challenger;\n        IPosition position;\n        uint256 size;\n        uint256 end;\n        address bidder;\n        uint256 bid;\n    }\n\n    event ChallengeStarted(address indexed challenger, address position, uint256 size, uint256 number);\n    event ChallengeAverted(uint256 number);\n    event ChallengeSucceeded(uint256 number);\n    event NewBid(uint256 challengedId, uint256 bidAmount, address bidder);\n    constructor(address _zchf, address factory) {\n        zchf = IFrankencoin(_zchf);\n        POSITION_FACTORY = IPositionFactory(factory);\n    }\n\n     /**\n     * @notice open a collateralized loan position\n     * @param _collateral        address of collateral token\n     * @param _minCollateral     minimum collateral required to prevent dust amounts\n     * @param _initialCollateral amount of initial collateral to be deposited\n     * @param _initialLimit      maximal amount of ZCHF that can be minted by the position owner \n     * @param _duration          position tenor in unit of timestamp (seconds) from 'now'\n     * @param _challengePeriod   challenge period. Longer for less liquid collateral.\n     * @param _fees              percentage minting fee that will be added to reserve,\n     *                           basis 1000_000\n     * @param _liqPrice          Liquidation price (dec18) that together with the reserve and\n     *                           fees determines the minimal collateralization ratio\n     * @param _reserve           percentage reserve amount that is added as the \n     *                           borrower's stake into reserve, basis 1000_000\n     * @return address of resulting position\n     */\n    function openPosition(address _collateral, uint256 _minCollateral, \n        uint256 _initialCollateral, uint256 _initialLimit, \n        uint256 _duration, uint256 _challengePeriod, uint32 _fees, uint256 _liqPrice, uint32 _reserve) \n        public returns (address) \n    {\n        IPosition pos = IPosition(POSITION_FACTORY.createNewPosition(msg.sender, \n            address(zchf), _collateral, _minCollateral, _initialCollateral, \n            _initialLimit, _duration, _challengePeriod, _fees, _liqPrice, _reserve));\n        zchf.registerPosition(address(pos));\n        zchf.transferFrom(msg.sender, address(zchf.reserve()), OPENING_FEE);\n        IERC20(_collateral).transferFrom(msg.sender, address(pos), _initialCollateral);\n\n        emit PositionOpened(msg.sender, _collateral, _initialCollateral, \n            _initialLimit, _duration, _challengePeriod, _fees, _reserve, address(pos));\n\n        return address(pos);\n    }\n\n    function clonePosition(address position, uint256 _initialCollateral, uint256 _initialMint) public returns (address) {\n        require(zchf.isPosition(position) == address(this), \"not our pos\");\n        IPosition pos = IPosition(POSITION_FACTORY.clonePosition(position, address(zchf), msg.sender, _initialCollateral, _initialMint));\n        zchf.registerPosition(address(pos));\n        zchf.transferFrom(msg.sender, address(zchf.reserve()), OPENING_FEE);\n        pos.collateral().transferFrom(msg.sender, address(pos), _initialCollateral);\n        return address(pos);\n    }\n\n    function reserve() external view returns (IReserve) {\n        return IReserve(zchf.reserve());\n    }\n\n    /**\n    * @notice Launch a challenge on a position\n    * @param _positionAddr      address of the position we want to challenge\n    * @param _collateralAmount  size of the collateral we want to challenge (dec 18)\n    * @return index of the challenge in challenge-array\n    */\n    function launchChallenge(address _positionAddr, uint256 _collateralAmount) external returns (uint256) {\n        IPosition position = IPosition(_positionAddr);\n        IERC20(position.collateral()).transferFrom(msg.sender, address(this), _collateralAmount);\n        uint256 pos = challenges.length;\n        /*\n        struct Challenge {address challenger;IPosition position;uint256 size;uint256 end;address bidder;uint256 bid;\n        */\n        challenges.push(Challenge(msg.sender, position, _collateralAmount, \n            block.timestamp + position.challengePeriod(), \n            address(0x0), 0));\n        position.notifyChallengeStarted(_collateralAmount);\n        emit ChallengeStarted(msg.sender, address(position), _collateralAmount, pos);\n        return pos;\n    }\n\n    /**\n    * @notice Post a bid (ZCHF amount) for an existing challenge (given collateral amount)\n    * @param _challengeNumber   index of the challenge in the challenges array\n    * @param _bidAmountZCHF     how much to bid for the collateral of this challenge (dec 18)\n    */\n    function bid(uint256 _challengeNumber, uint256 _bidAmountZCHF) external {\n        Challenge storage challenge = challenges[_challengeNumber];\n        if(block.timestamp >= challenge.end) {\n            // if bid is too late, the transaction ends the challenge\n            _end(_challengeNumber);\n            return;\n        }\n        require(_bidAmountZCHF > challenge.bid, \"higher bid available\");\n        if (challenge.bid > 0){\n            zchf.transfer(challenge.bidder, challenge.bid); // return old bid\n        }\n        emit NewBid(_challengeNumber, _bidAmountZCHF, msg.sender);\n        if (challenge.position.tryAvertChallenge(challenge.size, _bidAmountZCHF)){\n            // bid above Z_B/C_C >= (1+h)Z_M/C_M, challenge averted, end immediately by selling challenger collateral to bidder\n            zchf.transferFrom(msg.sender, challenge.challenger, _bidAmountZCHF);\n            IERC20(challenge.position.collateral()).transfer(msg.sender, challenge.size);\n            emit ChallengeAverted(_challengeNumber);\n            delete challenges[_challengeNumber];\n        } else {\n            require((challenge.size * challenge.position.price())/10**18 > _bidAmountZCHF, \"whot\");\n            zchf.transferFrom(msg.sender, address(this), _bidAmountZCHF);\n            challenge.bid = _bidAmountZCHF;\n            challenge.bidder = msg.sender;\n        }\n    }\n\n    /**\n     * @notice\n     * Ends a challenge successfully after the auction period ended.\n     *\n     * Example: A challenged position had 1000 ABC tokens as collateral with a minting limit of 200,000 ZCHF, out\n     * of which 60,000 have been minted and thereof 15,000 used to buy reserve tokens. The challenger auctioned off\n     * 400 ABC tokens, challenging 40% of the position. The highest bid was 75,000 ZCHF, below the\n     * 40% * 200,000 = 80,000 ZCHF needed to avert the challenge. The reserve ratio of the position is 25%.\n     * \n     * Now, the following happens when calling this method:\n     * - 400 ABC from the position owner are transferred to the bidder\n     * - The challenger's 400 ABC are returned to the challenger\n     * - 40% of the reserve bought with the 15,000 ZCHF is sold off (approximately), yielding e.g. 5,600 ZCHF\n     * - 40% * 60,000 = 24,000 ZCHF are burned\n     * - 80,000 * 2% = 1600 ZCHF are given to the challenger as a reward\n     * - 40% * (100%-25%) * (200,000 - 60,000) = 42,000 are given to the position owner for selling off unused collateral\n     * - The remaining 75,000 + 5,600 - 1,600 - 24,000 - 42,000 = 13,000 ZCHF are sent to the reserve pool\n     *\n     * If the highest bid was only 60,000 ZCHF, then we would have had a shortfall of 2,000 ZCHF that would in the\n     * first priority be covered by the reserve and in the second priority by minting unbacked ZCHF, triggering a \n     * balance alert.\n     * @param _challengeNumber  number of the challenge in challenge-array\n     */\n    function end(uint256 _challengeNumber) external {\n        _end(_challengeNumber);\n    }\n\n    /**\n     * @dev internal end function\n     * @param _challengeNumber  number of the challenge in challenge-array\n     */\n    function _end(uint256 _challengeNumber) internal {\n        Challenge storage challenge = challenges[_challengeNumber];\n        IERC20 collateral = challenge.position.collateral();\n        require(block.timestamp >= challenge.end, \"period has not ended\");\n        // challenge must have been successful, because otherwise it would have immediately ended on placing the winning bid\n        collateral.transfer(challenge.challenger, challenge.size); // return the challenger's collateral\n        // notify the position that will send the collateral to the bidder. If there is no bid, send the collateral to msg.sender\n        address recipient = challenge.bidder == address(0x0) ? msg.sender : challenge.bidder;\n        (uint256 effectiveBid, uint256 volume, uint32 reservePPM) = \n            challenge.position.notifyChallengeSucceeded(recipient, challenge.bid, challenge.size);\n        if (effectiveBid < challenge.bid){ // overbid, return excess amount\n            IERC20(zchf).transfer(challenge.bidder, challenge.bid - effectiveBid);\n        }\n        uint256 reward = volume * CHALLENGER_REWARD / BASE;\n        zchf.notifyLoss(reward + volume - effectiveBid); // ensure we have enough to pay everything\n        zchf.transfer(challenge.challenger, reward); // pay out the challenger reward\n        zchf.burn(volume, reservePPM); // Repay the challenged part\n        emit ChallengeSucceeded(_challengeNumber);\n        delete challenges[_challengeNumber];\n    }\n\n}\n\ninterface IPositionFactory {\n\n    function createNewPosition(address _owner, address _zchf, address _collateral, \n        uint256 _minCollateral, uint256 _initialCollateral, \n        uint256 _initialLimit, uint256 _duration, uint256 _challengePeriod,\n        uint32 _mintingFeePPM, uint256 _liqPrice, uint32 _reserve) \n        external returns (address);\n     function clonePosition(address _existing, address _zchf, address _owner, \n        uint256 _initialCol, uint256 _initialMint) external returns(address);\n}"
    },
    "contracts/IERC20.sol": {
      "content": "/**\n* SPDX-License-Identifier: MIT\n*\n* Copyright (c) 2016-2019 zOS Global Limited\n*\n*/\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\n\ninterface IERC20 {\n\n    // Optional functions\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}"
    },
    "contracts/IReserve.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IReserve {\n   function isQualified(address sender, address[] calldata helpers) external view returns (bool);\n}"
    },
    "contracts/IFrankencoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IReserve.sol\";\n\ninterface IFrankencoin is IERC20 {\n\n    function suggestMinter(address _minter, uint256 _applicationPeriod, \n      uint256 _applicationFee, string calldata _message) external;\n\n    function registerPosition(address position) external;\n\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\n\n    function reserve() external view returns (IReserve);\n\n    function isMinter(address minter) external view returns (bool);\n\n    function isPosition(address position) external view returns (address);\n    \n    function mint(address target, uint256 amount) external;\n\n    function mint(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\n\n    function burn(uint256 amountIncludingReserve, uint32 reservePPM) external;\n\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\n\n    function burn(address target, uint256 amount) external;\n\n    function notifyLoss(uint256 amount) external;\n\n}"
    },
    "contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n//\n// Modifications:\n// - Replaced Context._msgSender() with msg.sender\n// - Made leaner\n// - Extracted interface\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor (address initialOwner) {\n        require(initialOwner != address(0), \"0x0\");\n        owner = initialOwner;\n        emit OwnershipTransferred(address(0), owner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) virtual public onlyOwner {\n        require(newOwner != address(0), \"0x0\");\n        owner = newOwner;\n        emit OwnershipTransferred(owner, newOwner);\n    }\n\n    modifier onlyOwner() {\n        require(owner == msg.sender || owner == address(0x0), \"not owner\");\n        _;\n    }\n}"
    },
    "contracts/IPosition.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IReserve.sol\";\nimport \"./IFrankencoin.sol\";\n\ninterface IPosition {\n\n    function collateral() external returns (IERC20);\n\n    function challengePeriod() external returns (uint256);\n\n    function price() external returns (uint256);\n\n    function initializeClone(address owner, uint256 _price, uint256 _limit, uint256 _coll, uint256 _mint) external;\n\n    function deny(address[] calldata helpers, string calldata message) external;\n\n    function notifyChallengeStarted(uint256 size) external;\n\n    function tryAvertChallenge(uint256 size, uint256 bid) external returns (bool);\n\n    function notifyChallengeSucceeded(address bidder, uint256 bid, uint256 size) external returns (uint256, uint256, uint32);\n\n}"
    },
    "contracts/mocks/MockMintingHub.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../MintingHub.sol\";\n\n// this minting hub stores the address of\n// the last position created. Otherwise cumbersome to\n// access through hardhat/ethers\ncontract MockMintingHub is MintingHub {\n\n    address public lastPositionAddress;\n    constructor(address _zchf, address _factory) MintingHub (_zchf, _factory){}\n\n    function openPositionMock(address _collateral, uint256 _minCollateral, \n        uint256 _initialCollateral, uint256 _initialLimit, \n        uint256 _duration, uint256 _challengePeriod, uint32 _fees, uint256 _liqPrice, uint32 _reserve) \n        public returns (address) \n    {\n        lastPositionAddress = openPosition(_collateral, _minCollateral,_initialCollateral,\n            _initialLimit, _duration, _challengePeriod, _fees, _liqPrice, _reserve);\n        return lastPositionAddress;\n    }\n\n    function clonePositionMock(address position, uint256 _initialCollateral, \n        uint256 _initialMint) public returns (address)\n    {\n        lastPositionAddress = clonePosition(position, _initialCollateral, \n            _initialMint);\n        return lastPositionAddress;\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
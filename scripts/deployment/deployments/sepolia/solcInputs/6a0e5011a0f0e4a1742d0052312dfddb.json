{
  "language": "Solidity",
  "sources": {
    "contracts/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Copied and adjusted from OpenZeppelin\n// Adjustments:\n// - modifications to support ERC-677\n// - removed require messages to save space\n// - removed unnecessary require statements\n// - removed GSN Context\n// - upgraded to 0.8 to drop SafeMath\n// - let name() and symbol() be implemented by subclass\n// - infinite allowance support, with 2^255 and above considered infinite\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC677Receiver.sol\";\n\n/**\n * @dev Implementation of the `IERC20` interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using `_mint`.\n * For a generic mechanism see `ERC20Mintable`.\n *\n * *For a detailed writeup see our guide [How to implement supply\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See `IERC20.approve`.\n */\n\nabstract contract ERC20 is IERC20 {\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    uint8 public immutable override decimals;\n\n    constructor(uint8 _decimals) {\n        decimals = _decimals;\n    }\n\n    /**\n     * @dev See `IERC20.totalSupply`.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See `IERC20.balanceOf`.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See `IERC20.transfer`.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.allowance`.\n     */\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See `IERC20.approve`.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) external override returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.transferFrom`.\n     *\n     * Emits an `Approval` event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of `ERC20`;\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `value`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        _transfer(sender, recipient, amount);\n        uint256 currentAllowance = _allowances[sender][msg.sender];\n        if (currentAllowance < (1 << 255)){\n            // Only decrease the allowance if it was not set to 'infinite'\n            // Documented in /doc/infiniteallowance.md\n            _approve(sender, msg.sender, currentAllowance - amount);\n        }\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to `transfer`, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a `Transfer` event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(recipient != address(0));\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n    }\n\n    // ERC-677 functionality, can be useful for swapping and wrapping tokens\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external override returns (bool) {\n        bool success = transfer(recipient, amount);\n        if (success){\n            success = IERC677Receiver(recipient).onTokenTransfer(msg.sender, amount, data);\n        }\n        return success;\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a `Transfer` event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address recipient, uint256 amount) internal virtual {\n        require(recipient != address(0));\n\n        _beforeTokenTransfer(address(0), recipient, amount);\n\n        _totalSupply += amount;\n        _balances[recipient] += amount;\n        emit Transfer(address(0), recipient, amount);\n    }\n\n     /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a `Transfer` event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _totalSupply -= amount;\n        _balances[account] -= amount;\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an `Approval` event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) virtual internal {\n    }\n}"
    },
    "contracts/IERC20.sol": {
      "content": "/**\n* SPDX-License-Identifier: MIT\n*\n* Copyright (c) 2016-2019 zOS Global Limited\n*\n*/\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\n\ninterface IERC20 {\n\n    // Optional functions\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}"
    },
    "contracts/IERC677Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC677Receiver {\n    \n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\n\n}"
    },
    "contracts/ReservePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./IFrankencoin.sol\";\nimport \"./IERC677Receiver.sol\";\nimport \"./ERC20.sol\";\nimport \"./IReservePool.sol\";\n\n/** \n * @title Reserve pool for the Frankencoin\n */\ncontract ReservePool is ERC20, IReservePool {\n\n    // should hopefully be grouped into one storage slot\n    uint64 private totalVotesAnchorTime;\n    uint192 private totalVotesAtAnchor;\n\n    uint32 private constant QUORUM = 300;\n\n    mapping (address => address) private delegates;\n    mapping (address => uint64) private voteAnchor;\n\n    IFrankencoin public zchf;\n\n    constructor() ERC20(18){\n    }\n\n    function initialize(address frankencoin) external {\n        require(address(zchf) == address(0x0));\n        zchf = IFrankencoin(frankencoin);\n    }\n\n    function name() override external pure returns (string memory) {\n        return \"Frankencoin Pool Share\";\n    }\n\n    function symbol() override external pure returns (string memory) {\n        return \"FPS\";\n    }\n\n    function price() public view returns (uint256){\n        uint256 balance = zchf.balanceOf(address(this));\n        if (balance == 0){\n            return 0;\n        } else {\n            return balance / totalSupply();\n        }\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) override internal {\n        super._beforeTokenTransfer(from, to, amount);\n        if (amount > 0){\n            uint256 roundingLoss = adjustRecipientVoteAnchor(to, amount);\n            adjustTotalVotes(from, amount, roundingLoss);\n        }\n    }\n\n     /**\n     * @notice Decrease the total votes anchor when tokens lose their voting power due to being moved\n     * @param from      sender\n     * @param amount    amount to be sent\n     */\n    function adjustTotalVotes(address from, uint256 amount, uint256 roundingLoss) internal {\n        uint256 lostVotes = from == address(0x0) ? 0 : (block.number - voteAnchor[from]) * amount;\n        totalVotesAtAnchor = uint192(totalVotes() - roundingLoss - lostVotes);\n        totalVotesAnchorTime = uint64(block.number);\n    }\n\n    /**\n     * @notice the vote anchor of the recipient is moved forward such that the number of calculated\n     * votes does not change despite the higher balance.\n     * @param to        receiver address\n     * @param amount    amount to be received\n     * @return the number of votes lost due to rounding errors\n     */\n    function adjustRecipientVoteAnchor(address to, uint256 amount) internal returns (uint256){\n        if (to != address(0x0)) {\n            uint256 recipientVotes = votes(to); // for example 21 if 7 shares were held for 3 blocks\n            uint256 newbalance = balanceOf(to) + amount; // for example 11 if 4 shares are added\n            voteAnchor[to] = uint64(block.number - recipientVotes / newbalance); // new example anchor is only 21 / 11 = 1 block in the past\n            return recipientVotes % newbalance; // we have lost 21 % 11 = 10 votes\n        } else {\n            // optimization for burn, vote anchor of null address does not matter\n            return 0;\n        }\n    }\n\n    function votes(address holder) public view returns (uint256) {\n        return balanceOf(holder) * (block.number - voteAnchor[holder]);\n    }\n\n    function totalVotes() public view returns (uint256) {\n        return totalVotesAtAnchor + totalSupply() * (block.number - totalVotesAnchorTime);\n    }\n\n    function isQualified(address sender, address[] calldata helpers) external override view returns (bool) {\n        uint256 _votes = votes(sender);\n        for (uint i=0; i<helpers.length; i++){\n            address current = helpers[i];\n            require(current != sender);\n            require(canVoteFor(sender, current));\n            for (uint j=i+1; j<helpers.length; j++){\n                require(current != helpers[j]);\n            }\n            _votes += votes(current);\n        }\n        return _votes * 10000 >= QUORUM * totalVotes();\n    }\n\n    function delegateVoteTo(address delegate) override external {\n        delegates[msg.sender] = delegate;\n    }\n\n    function canVoteFor(address delegate, address owner) public view returns (bool) {\n        if (owner == delegate){\n            return true;\n        } else if (owner == address(0x0)){\n            return false;\n        } else {\n            return canVoteFor(delegate, delegates[owner]);\n        }\n    }\n\n    function onTokenTransfer(address from, uint256 amount, bytes calldata) external returns (bool) {\n        require(msg.sender == address(zchf), \"caller must be zchf\");\n        uint256 total = totalSupply();\n        if (total == 0){\n            // Initialization of first shares at 1:1\n            _mint(from, amount);\n        } else {\n            _mint(from, amount * totalSupply() / (zchf.balanceOf(address(this)) - amount));\n        }\n        return true;\n    }\n\n    function redeemFraction(uint256 partsPerMillion) override external returns (uint256){\n        return redeem(partsPerMillion * balanceOf(msg.sender) / 1000000);\n    }\n\n    function redeem(uint256 shares) override public returns (uint256) {\n        uint256 proceeds = shares * zchf.balanceOf(address(this)) / totalSupply();\n        _burn(msg.sender, shares);\n        zchf.transfer(msg.sender, proceeds);\n        require(zchf.reserveTargetFulfilled() || zchf.isMinter(msg.sender), \"reserve requirement\");\n        return proceeds;\n    }\n\n    function redeemableBalance(address holder) override public view returns (uint256){\n        return balanceOf(holder) * zchf.balanceOf(address(this)) / totalSupply();\n    }\n\n}"
    },
    "contracts/IFrankencoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IFrankencoin is IERC20 {\n\n    function suggestMinter(address minter, uint256 applicationPeriod, uint256 applicationFee, string calldata message) external;\n\n    function registerPosition(address position) external;\n\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\n\n    function reserve() external view returns (address);\n\n    function isMinter(address minter) external view returns (bool);\n    \n    function mint(address target, uint256 amount) external;\n\n    function mint(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\n\n    function burn(uint256 amount, uint32 reservePPM) external;\n\n    function burn(address target, uint256 amount) external;\n\n    function notifyLoss(uint256 amount) external;\n\n    function reserveTargetFulfilled() external view returns (bool);\n\n}"
    },
    "contracts/IReservePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IReservePool is IERC20 {\n   function delegateVoteTo(address delegate) external;\n   function isQualified(address sender, address[] calldata helpers) external view returns (bool);\n   function redeem(uint256 shares) external returns (uint256);\n   function redeemableBalance(address holder) external view returns (uint256);\n   function redeemFraction(uint256 partsPerMillion) external returns (uint256);\n}"
    },
    "contracts/Position.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IReservePool.sol\";\nimport \"./IFrankencoin.sol\";\nimport \"./Ownable.sol\";\nimport \"./IERC677Receiver.sol\";\n\n/**\n * A collateralized minting position.\n */\ncontract Position is Ownable, IERC677Receiver {\n\n    uint256 public limit; // how much can be minted at most, including reserve\n    uint256 public minted; // how much has been minted so far, including reserve\n\n    IMintingHub public immutable hub;\n    IFrankencoin public immutable zchf; // currency\n    IERC20 public immutable collateral; // collateral\n\n    uint32 public pendingChallenges;\n    uint32 public immutable mintingFeePPM;\n    uint32 public immutable reserveContribution;\n\n    uint256 public immutable minChallenge;\n\n    uint256 public immutable creation;\n    uint256 public cooldown;\n    uint256 public immutable expiration;\n\n    event PositionOpened(address indexed hub, address indexed owner, address collateral, uint256 initialCollateral, uint256 initialLimit, uint256 duration, uint32 fees, uint32 reserve);\n    event PositionDenied(address indexed sender, string message);\n    event MintingUpdate(uint256 collateral, uint256 limit, uint256 minted);\n\n    constructor(address owner, address _zchf, address _collateral, uint256 initialCollateral, \n        uint256 initialLimit, uint256 duration, uint32 _mintingFeePPM, uint32 _reserve) \n        Ownable(owner)\n    {\n        hub = IMintingHub(msg.sender);\n        zchf = IFrankencoin(_zchf);\n        collateral = IERC20(_collateral);\n        mintingFeePPM = _mintingFeePPM;\n        reserveContribution = _reserve;\n        expiration = block.timestamp + duration;\n        creation = block.timestamp;\n        restrictMinting(7 days);\n        minChallenge = initialCollateral / 10;\n        limit = initialLimit;\n        IMintingHub(msg.sender).reserve().delegateVoteTo(owner);\n        emit PositionOpened(msg.sender, owner, _collateral, initialCollateral, initialLimit, duration, _mintingFeePPM, _reserve);\n    }\n\n    function transferOwnership(address newOwner) override(Ownable) public {\n        super.transferOwnership(newOwner);\n        hub.reserve().delegateVoteTo(newOwner);\n    }\n\n    function deny(address[] calldata helpers, string calldata message) public {\n        require(minted == 0, \"minted\");\n        require(block.timestamp <= creation + 3 days, \"too late\");\n        require(IReservePool(zchf.reserve()).isQualified(msg.sender, helpers), \"not qualified\");\n        collateral.transfer(owner, collateral.balanceOf(address(this)));\n        emit PositionDenied(msg.sender, message);\n        selfdestruct(payable(owner));\n    }\n\n    /**\n     * This is how much the minter can actually use when minting ZCHF, with the rest being used\n     * to buy reserve pool shares.\n     */\n    function getUsableMint(uint256 totalMint, bool beforeFees) public view returns (uint256){\n        uint256 usable = totalMint * (1000_000 - reserveContribution) / 1000_000;\n        if (beforeFees){\n            return usable;\n        } else {\n            return totalMint * (1000_000 - mintingFeePPM) / 1000_000;\n        }\n    }\n\n    function pushlimit(uint256 newlimit) public onlyOwner noChallenge {\n        if (newlimit > limit){\n            restrictMinting(3 days);\n        }\n        limit = newlimit;\n        emit MintingUpdate(IERC20(collateral).balanceOf(address(this)), limit, minted);\n    }\n\n    function mint(address target, uint256 amount) public onlyOwner noChallenge noMintRestriction {\n        require(minted + amount <= limit);\n        zchf.mint(target, amount, reserveContribution, mintingFeePPM);\n        minted += amount;\n        emit MintingUpdate(IERC20(collateral).balanceOf(address(this)), limit, minted);\n    }\n\n    function restrictMinting(uint256 period) internal {\n        uint256 horizon = block.timestamp + period;\n        if (horizon > cooldown){\n            cooldown = horizon;\n        }\n    }\n    \n    function onTokenTransfer(address, uint256 amount, bytes calldata) override\n        external returns (bool)\n    {\n        if (msg.sender == address(collateral)){\n            handleCollateral(amount);\n        } else if (msg.sender == address(zchf)){\n            repay();\n        } else {\n            require(false);\n        }\n        return true;\n    }\n\n    /**\n     * The amount that must be paid to close the position for good.\n     */\n    function getOutstandingAmount() public view returns (uint256){\n        uint256 reserveBalance = IReservePool(zchf.reserve()).redeemableBalance(address(this));\n        if (reserveBalance > minted){\n            return 0;\n        } else {\n            return minted - reserveBalance;\n        }\n    }\n\n    function repay(uint256 amount) public {\n        IERC20(zchf).transferFrom(msg.sender, address(this), amount);\n        repay();\n    }\n\n    function repay() public {\n        uint256 outstanding = getOutstandingAmount();\n        uint256 balance = IERC20(zchf).balanceOf(address(this));\n        if (balance > outstanding){\n            balance = outstanding;\n        }\n        balance += IReservePool(IFrankencoin(zchf).reserve()).redeemFraction(1000000 * balance / outstanding);\n        if (balance > minted){\n            balance = minted;\n        }\n        IFrankencoin(zchf).burn(balance, reserveContribution);\n        minted -= balance;\n        emit MintingUpdate(IERC20(collateral).balanceOf(address(this)), limit, minted);\n    }\n\n    function handleCollateral(uint256 amount) internal {\n        uint256 balanceAfter = IERC20(collateral).balanceOf(address(this));\n        if (balanceAfter > amount){\n            // proportionally increase limit as collateral arrives\n            limit = limit * balanceAfter / (balanceAfter - amount);\n        }\n        emit MintingUpdate(balanceAfter, limit, minted);\n    }\n\n    /**\n     * Withdraw any token that might have ended up on this address, except for collateral\n     * and reserve tokens, which also serve as a collateral.\n     */\n    function withdraw(address token, address target, uint256 amount) external onlyOwner {\n        require(token != zchf.reserve() || minted == 0); // if there are zchf, use them to repay first\n        if (token == address(collateral)){\n            require(pendingChallenges == 0, \"challenges pending\");\n            uint256 current = IERC20(collateral).balanceOf(address(this));\n            limit = limit * (current - amount) / current;\n            require(minted <= limit);\n            emit MintingUpdate(current - amount, limit, minted);\n        }\n        IERC20(token).transfer(target, amount);\n    }\n\n    function notifyChallengeStarted() external onlyHub {\n        pendingChallenges++;\n    }\n\n    function tryAvertChallenge(uint256 size, uint256 bid) external onlyHub returns (bool) {\n        if (block.timestamp >= expiration){\n            return false; // position expired, let every challenge succeed\n        } else if (bid * IERC20(collateral).balanceOf(address(this)) >= limit * size){\n            // challenge averted, bid is high enough\n            pendingChallenges--;\n            restrictMinting(1 days);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Notifies the position that a challenge was successful.\n     * Triggers the payout of the challenged part of the collateral.\n     * Returns three important numbers:\n     *  - repay: the amount that is needed to repay for the acutally minted zchf wit the challenged collateral\n     *  - minted: the number of zchf that where actually minted and used using the challenged collateral\n     *  - mintmax: the maximum number of zchf that could have been minted and used using the challenged collateral \n     */\n    function notifyChallengeSucceeded(address bidder, uint256 size) external onlyHub returns (uint256, uint256, uint256){\n        pendingChallenges--;\n        uint32 usagePPM = uint32(minted * 1000000 / limit);\n        uint32 challengedPPM = uint32(size * 1000000 / IERC20(collateral).balanceOf(address(this)));\n\n        IERC20(collateral).transfer(bidder, size);\n        uint256 limitBefore = limit;\n        limit = limit * challengedPPM / 1000000;\n        uint256 challengedRange = (limitBefore - limit) * (1000000 - reserveContribution) / 1000000;\n        return (getOutstandingAmount() * challengedPPM, challengedRange * usagePPM / 1000000, challengedRange);\n    }\n\n    modifier noMintRestriction() {\n        require(cooldown < block.timestamp, \"cooldown\");\n        _;\n    }\n\n    modifier noChallenge() {\n        require(pendingChallenges == 0, \"challenges pending\");\n        _;\n    }\n\n    modifier onlyHub() {\n        require(msg.sender == address(hub), \"not hub\");\n        _;\n    }\n\n}\n\ninterface IMintingHub {\n\n    function reserve() external returns (IReservePool);\n}"
    },
    "contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n//\n// Modifications:\n// - Replaced Context._msgSender() with msg.sender\n// - Made leaner\n// - Extracted interface\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable {\n\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor (address initialOwner) {\n        require(initialOwner != address(0), \"0x0\");\n        owner = initialOwner;\n        emit OwnershipTransferred(address(0), owner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) virtual public onlyOwner {\n        require(newOwner != address(0), \"0x0\");\n        owner = newOwner;\n        emit OwnershipTransferred(owner, newOwner);\n    }\n\n    modifier onlyOwner() {\n        require(owner == msg.sender, \"not owner\");\n        _;\n    }\n}"
    },
    "contracts/StablecoinBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC677Receiver.sol\";\nimport \"./IFrankencoin.sol\";\n\n/**\n * A minting contract for another CHF stablecoin that we trust.\n */\ncontract StablecoinBridge {\n\n    IERC20 public immutable chf;\n    IFrankencoin public immutable zchf;\n\n    uint256 public immutable horizon;\n    uint256 public immutable limit;\n\n    constructor(address other, address zchfAddress, uint256 limit_){\n        chf = IERC20(other);\n        zchf = IFrankencoin(zchfAddress);\n        horizon = block.timestamp + 52 weeks;\n        limit = limit_;\n    }\n\n    function mint(uint256 amount) external {\n        mint(msg.sender, amount);\n    }\n\n    function mint(address target, uint256 amount) public {\n        chf.transferFrom(msg.sender, address(this), amount);\n        mintInternal(target, amount);\n    }\n\n    function mintInternal(address target, uint256 amount) internal {\n        require(block.timestamp <= horizon, \"expired\");\n        require(chf.balanceOf(address(this)) <= limit, \"limit\");\n        zchf.mint(target, amount);\n    }\n    \n    function burn(uint256 amount) external {\n        burnInternal(msg.sender, msg.sender, amount);\n    }\n\n    function burn(address target, uint256 amount) external {\n        burnInternal(msg.sender, target, amount);\n    }\n\n    function burnInternal(address zchfHolder, address target, uint256 amount) internal {\n        zchf.burn(zchfHolder, amount);\n        chf.transfer(target, amount);\n    }\n\n    function onTokenTransfer(address from, uint256 amount, bytes calldata) external returns (bool){\n        if (msg.sender == address(chf)){\n            mintInternal(from, amount);\n        } else if (msg.sender == address(zchf)){\n            burnInternal(address(this), from, amount);\n        } else {\n            require(false, \"unsupported token\");\n        }\n        return true;\n    }\n    \n}"
    },
    "contracts/MintingHub.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IReservePool.sol\";\nimport \"./IFrankencoin.sol\";\nimport \"./Ownable.sol\";\nimport \"./Position.sol\";\n\n/**\n * A hub for creating collateralized minting positions for a given collateral.\n */\ncontract MintingHub {\n\n    uint256 public constant OPENING_FEE = 1000*10**18;\n    \n    uint32 public constant BASE = 1000000;\n    uint32 public constant CHALLENGER_REWARD = 20000; // 2% \n\n    uint256 public constant CHALLENGE_PERIOD = 7 days;\n\n    IFrankencoin public immutable zchf; // currency\n    uint32 public challengeCount;\n    mapping (uint32 => Challenge) private challenges;\n    \n    struct Challenge {\n        address challenger;\n        Position position;\n        uint256 size;\n        uint256 end;\n        address bidder;\n        uint256 bid;\n    }\n\n    event ChallengeStarted(address indexed challenger, address position, uint256 size, uint32 number);\n    event ChallengeAverted(uint32 number);\n    event ChallengeSucceeded(uint32 number);\n\n    constructor(address _zchf) {\n        zchf = IFrankencoin(_zchf);\n    }\n\n     /**\n     * @notice open a collateralized loan position\n     * @param _collateral        address of collateral token\n     * @param _initialCollateral amount of initial collateral to be deposited\n     * @param _initialLimit      maximal amount of ZCHF that can be minted by the position owner \n     * @param _duration          maturity of the loan in unit of timestamp (seconds)\n     * @param _fees              percentage minting fee that will be added to reserve,\n     *                          basis 1000_000\n     * @param _reserve           percentage reserve amount that is added as the \n     *                          borrower's stake into reserve, basis 1000_000\n     * @return address of resulting position\n     */\n    function openPosition(address _collateral, uint256 _initialCollateral, uint256 _initialLimit, \n        uint256 _duration, uint32 _fees, uint32 _reserve) public returns (address) \n    {\n        Position pos = new Position(msg.sender, address(zchf), _collateral, _initialCollateral, _initialLimit, _duration, _fees, _reserve);\n        zchf.registerPosition(address(pos));\n        zchf.transferFrom(msg.sender, zchf.reserve(), OPENING_FEE);\n        IERC20(_collateral).transferFrom(msg.sender, address(pos), _initialCollateral);\n        return address(pos);\n    }\n\n    function reserve() external view returns (IReservePool) {\n        return IReservePool(zchf.reserve());\n    }\n\n    function launchChallenge(Position position, uint256 size) external returns (uint32) {\n        require(size >= position.minChallenge());\n        IERC20(position.collateral()).transferFrom(msg.sender, address(this), size);\n        uint32 number = challengeCount++;\n        challenges[number] = Challenge(msg.sender, position, size, block.timestamp + CHALLENGE_PERIOD, address(0x0), 0);\n        position.notifyChallengeStarted();\n        emit ChallengeStarted(msg.sender, address(position), size, number);\n        return number;\n    }\n\n    function bid(uint32 challengeNumber, uint256 amount) external {\n        Challenge memory challenge = challenges[challengeNumber];\n        require(block.timestamp < challenge.end);\n        require(amount > challenge.bid);\n        if (challenge.bid > 0){\n            zchf.transfer(challenge.bidder, challenge.bid); // return old bid\n        }\n        if (challenge.position.tryAvertChallenge(challenge.size, amount)){\n            // bid above Z_B/C_C >= (1+h)Z_M/C_M, challenge averted, end immediately by selling challenger collateral to bidder\n            zchf.transferFrom(msg.sender, challenge.challenger, amount);\n            IERC20(Position(challenge.position).collateral()).transfer(msg.sender, challenge.size);\n            emit ChallengeAverted(challengeNumber);\n            delete challenges[challengeNumber];\n        } else {\n            zchf.transferFrom(msg.sender, address(this), amount);\n            challenge.bid = amount;\n            challenge.bidder = msg.sender;\n        }\n    }\n\n    /**\n     * Ends a challenge successfully after the auction period ended.\n     *\n     * Example: A challenged position had 1000 ABC tokens as collateral with a minting limit of 200,000 ZCHF, out\n     * of which 60,000 have been minted and thereof 15,000 used to buy reserve tokens. The challenger auctioned off\n     * 400 ABC tokens, challengind 40% of the position. The highest bid was 75,000 ZCHF, below the\n     * 40% * 200,000 = 80,000 ZCHF needed to avert the challenge. The reserve ration of the position is 25%.\n     * \n     * Now, the following happens when calling this method:\n     * - 400 ABC from the position owner are transferred to the bidder\n     * - The challenger's 400 ABC are returned to the challenger\n     * - 40% of the reserve bought with the 15,000 ZCHF is sold off (approximately), yielding e.g. 5,600 ZCHF\n     * - 40% * 60,000 = 24,000 ZCHF are burned\n     * - 80,000 * 2% = 1600 ZCHF are given to the challenger as a reward\n     * - 40% * (100%-25%) * (200,000 - 60,000) = 42,000 are given to the position owner for selling off unused collateral\n     * - The remaining 75,000 + 5,600 - 1,600 - 24,000 - 42,000 = 13,000 ZCHF are sent to the reserve pool\n     *\n     * If the highest bid was only 60,000 ZCHF, then we would have had a shortfall of 2,000 ZCHF that would in the\n     * first priority be covered by the reserve and in the second priority by minting unbacked ZCHF, triggering a \n     * balance alert.\n     */\n    function end(uint32 challengeNumber) external {\n        Challenge storage challenge = challenges[challengeNumber];\n        IERC20 collateral = challenge.position.collateral();\n        require(block.timestamp >= challenge.end);\n        // challenge must have been successful, because otherwise it would have immediately ended on placing the winning bid\n        collateral.transfer(challenge.challenger, challenge.size); // return the challenger's collateral\n        checkSize(challenge, collateral); // ensure challenge is not larger than available collateral\n        (uint256 repay, uint256 minted, uint256 mintmax) = challenge.position.notifyChallengeSucceeded(challenge.bidder, challenge.size);\n        uint256 reward = mintmax * CHALLENGER_REWARD / BASE;\n        uint256 moneyNeeded = repay + (mintmax - minted) + reward;\n        if (moneyNeeded > challenge.bid){\n            // we have a problem, the bid was not high enough to cover all the costs\n            zchf.notifyLoss(moneyNeeded - challenge.bid);\n        } else if (moneyNeeded < challenge.bid){\n            // we are lucky, there is some excess money that we can put into the reserve\n            zchf.transfer(zchf.reserve(), challenge.bid - moneyNeeded);\n        }\n        zchf.transfer(challenge.challenger, reward); // pay out the challenger reward\n        zchf.transferAndCall(address(challenge.position), repay, new bytes(0)); // Repay the challenged and used part of the position and burn the tokens\n        zchf.transfer(address(challenge.position), challenge.position.getUsableMint(mintmax - minted, true)); // Give owner fair share of auction proceeds from selling off unused collateral\n        emit ChallengeSucceeded(challengeNumber);\n        delete challenges[challengeNumber];\n    }\n\n    function checkSize(Challenge memory challenge, IERC20 collateral) internal {\n        uint256 totalCollateral = collateral.balanceOf(address(challenge.position));\n        if (challenge.size > totalCollateral){ // overbid, return excess amount\n            uint256 betterBid = challenge.bid * totalCollateral / challenge.size;\n            IERC20(zchf).transfer(challenge.bidder, challenge.bid - betterBid);\n            challenge.size = totalCollateral;\n            challenge.bid = betterBid;\n        }\n    }\n\n}"
    },
    "contracts/Frankencoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ERC20.sol\";\nimport \"./IReservePool.sol\";\nimport \"./IFrankencoin.sol\";\n\ncontract Frankencoin is ERC20, IFrankencoin {\n\n   uint256 public constant MIN_FEE = 1000 * (10**18);\n   uint256 public constant MIN_APPLICATION_PERIOD = 10 days;\n\n   address override public immutable reserve;\n   uint256 public reserveTarget;\n\n   mapping (address => uint256) public minters;\n   mapping (address => address) public positions;\n\n   event MinterApplied(address indexed minter, uint256 applicationPeriod, uint256 applicationFee, string message);\n   event MinterDenied(address indexed minter, string message);\n\n   constructor(address _reserve) ERC20(18){\n      reserve = _reserve;\n   }\n\n   function name() override external pure returns (string memory){\n      return \"Frankencoin V1\";\n   }\n\n   function symbol() override external pure returns (string memory){\n      return \"ZCHF\";\n   }\n\n   function suggestMinter(address minter, uint256 applicationPeriod, \n      uint256 applicationFee, string calldata message) override external \n   {\n      require(applicationPeriod >= MIN_APPLICATION_PERIOD || totalSupply() == 0, \"period too short\");\n      require(applicationFee >= MIN_FEE || totalSupply() == 0, \"fee too low\");\n      require(minters[minter] == 0, \"already registered\");\n      _transfer(msg.sender, reserve, applicationFee);\n      minters[minter] = block.timestamp + applicationPeriod;\n      emit MinterApplied(minter, applicationPeriod, applicationFee, message);\n   }\n\n   function registerPosition(address position) override external {\n      require(isMinter(msg.sender), \"not minter\");\n      positions[position] = msg.sender;\n   }\n\n   function denyMinter(address minter, address[] calldata helpers, \n      string calldata message) override external \n   {\n      require(block.timestamp <= minters[minter], \"too late\");\n      require(IReservePool(reserve).isQualified(msg.sender, helpers), \"not qualified\");\n      delete minters[minter];\n      emit MinterDenied(minter, message);\n   }\n\n   function mint(address target, uint256 amount, uint32 reservePPM, \n      uint32 feesPPM) override external minterOnly \n   {\n      uint256 reserveAmount = amount * reservePPM;\n      reserveTarget += reserveAmount;\n      reserveAmount /= 1000_000;\n      uint256 fees = amount * feesPPM / 1000_000;\n      _mint(target, amount - reserveAmount - fees);\n      _mint(reserve, reserveAmount + fees);\n      IERC677Receiver(reserve).onTokenTransfer(msg.sender, reserveAmount, new bytes(0));\n   }\n\n   function mint(address target, uint256 amount) override external minterOnly {\n      _mint(target, amount);\n   }\n\n   function burn(uint256 amount) external {\n      _burn(msg.sender, amount);\n   }\n\n   function burn(uint256 amount, uint32 reservePPM) override external minterOnly {\n      _burn(msg.sender, amount);\n      reserveTarget -= reservePPM * amount;\n   }\n\n   function burn(address owner, uint256 amount) override external minterOnly {\n      _burn(owner, amount);\n   }\n\n   modifier minterOnly() {\n      require(isMinter(msg.sender) || isMinter(positions[msg.sender]), \"not approved minter\");\n      _;\n   }\n\n   function notifyLoss(uint256 amount) override external minterOnly {\n      uint256 reserveLeft = balanceOf(reserve);\n      if (reserveLeft >= amount){\n         _transfer(reserve, msg.sender, amount);\n      } else {\n         _transfer(reserve, msg.sender, reserveLeft);\n         _mint(msg.sender, amount - reserveLeft);\n      }\n   }\n\n   function isMinter(address minter) override public view returns (bool){\n      return minters[minter]!=0 && block.timestamp > minters[minter];\n   }\n\n   function reserves() external view returns (uint256) {\n      return balanceOf(reserve);\n   }\n\n   function getReserveTarget() public view returns (uint256) {\n      return reserveTarget / 1000000;\n   }\n\n   function reserveTargetFulfilled() override public view returns (bool) {\n      return reserveTarget <= balanceOf(reserve) * 1000000;\n   }\n\n}\n"
    },
    "contracts/mocks/MockXCHFToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\n\ncontract MockXCHFToken is ERC20 {\n    constructor() ERC20(18) {}\n\n    function name() override external pure returns (string memory){\n      return \"XCHF Mock Token\";\n   }\n    function symbol() override external pure returns (string memory){\n      return \"XCHF\";\n    }\n\n    function mint(address _account, uint256 _amount) external {\n        _mint(_account, _amount);\n    }\n}\n"
    },
    "contracts/mocks/MockVOLToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\n\ncontract MockVOLToken is ERC20 {\n    constructor() ERC20(18) {}\n\n    function name() override external pure returns (string memory){\n      return \"VOL volatile mock token\";\n   }\n    function symbol() override external pure returns (string memory){\n      return \"VOL\";\n    }\n\n    function mint(address _account, uint256 _amount) external {\n        _mint(_account, _amount);\n    }\n}\n"
    },
    "contracts/mocks/MockDCHFToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\n\ncontract MockDCHFToken is ERC20 {\n    constructor() ERC20(18) {}\n\n    function name() override external pure returns (string memory){\n      return \"DCHF Mock Token\";\n   }\n    function symbol() override external pure returns (string memory){\n      return \"DCHF\";\n    }\n\n    function mint(address _account, uint256 _amount) external {\n        _mint(_account, _amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
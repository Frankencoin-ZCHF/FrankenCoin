{
  "language": "Solidity",
  "sources": {
    "contracts/Equity.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Frankencoin.sol\";\nimport \"./utils/MathUtil.sol\";\nimport \"./interface/IReserve.sol\";\nimport \"./interface/IERC677Receiver.sol\";\n\n/**\n * If the Frankencoin system was a bank, this contract would represent the equity on its balance sheet.\n * Like with a corporation, the owners of the equity capital are the shareholders, or in this case the holders\n * of Frankencoin Pool Shares (FPS) tokens. Anyone can mint additional FPS tokens by adding Frankencoins to the\n * reserve pool. Also, FPS tokens can be redeemed for Frankencoins again after a minimum holding period.\n * Furthermore, the FPS shares come with some voting power. Anyone that held at least 3% of the holding-period-\n * weighted reserve pool shares gains veto power and can veto new proposals.\n */\ncontract Equity is ERC20PermitLight, MathUtil, IReserve {\n    /**\n     * The VALUATION_FACTOR determines the market cap of the reserve pool shares relative to the equity reserves.\n     * The following always holds: Market Cap = Valuation Factor * Equity Reserve = Price * Supply\n     *\n     * In the absence of profits and losses, the variables grow as follows when FPS tokens are minted:\n     *\n     * |   Reserve     |   Market Cap  |     Price     |     Supply   |\n     * |          1000 |          3000 |             3 |         1000 |\n     * |       1000000 |       3000000 |           300 |        10000 |\n     * |    1000000000 |    3000000000 |         30000 |       100000 |\n     * | 1000000000000 | 3000000000000 |       3000000 |      1000000 |\n     *\n     * I.e., the supply is proporational to the cubic root of the reserve and the price is proportional to the\n     * squared cubic root. When profits accumulate or losses materialize, the reserve, the market cap,\n     * and the price are adjusted proportionally, with the supply staying constant. In the absence of an extreme\n     * inflation of the Swiss franc, it is unlikely that there will ever be more than ten million FPS.\n     */\n    uint32 public constant VALUATION_FACTOR = 3;\n\n    uint256 private constant MINIMUM_EQUITY = 1000 * ONE_DEC18;\n\n    /**\n     * The quorum in basis points. 100 is 1%.\n     */\n    uint32 private constant QUORUM = 300;\n\n    /**\n     * The number of digits to store the average holding time of share tokens.\n     */\n    uint8 private constant TIME_RESOLUTION_BITS = 20;\n\n    /**\n     * The minimum holding duration. You are not allowed to redeem your pool shares if you held them\n     * for less than the minimum holding duration at average. For example, if you have two pool shares on your\n     * address, one acquired 5 days ago and one acquired 105 days ago, you cannot redeem them as the average\n     * holding duration of your shares is only 55 days < 90 days.\n     */\n    uint256 public constant MIN_HOLDING_DURATION =\n        90 days << TIME_RESOLUTION_BITS; // Set to 5 for local testing\n\n    Frankencoin public immutable zchf;\n\n    /**\n     * To track the total number of votes we need to know the number of votes at the anchor time and when the\n     * anchor time was. This is (hopefully) stored in one 256 bit slot, with the anchor time taking 64 Bits and\n     * the total vote count 192 Bits. Given the sub-second resolution of 20 Bits, the implicit assumption is\n     * that the timestamp can always be stored in 44 Bits (i.e. it does not exceed half a million years). Further,\n     * given 18 decimals (about 60 Bits), this implies that the total supply cannot exceed\n     *   192 - 60 - 44 - 20 = 68 Bits\n     * Here, we are also save, as 68 Bits would imply more than a trillion outstanding shares. In fact,\n     * a limit of about 2**30 shares (that's 2**90 Bits when taking into account the decimals) is imposed\n     * when minting. This means that the maximum supply is about a billion shares, which is reached at a market\n     * cap of 3,000,000,000,000,000,000 CHF. This limit could in theory be reached in times of hyper inflaction.\n     */\n    uint192 private totalVotesAtAnchor; // Total number of votes at the anchor time, see comment on the um\n    uint64 private totalVotesAnchorTime; // 44 Bit for the time stamp, 20 Bit sub-second time resolution\n\n    /**\n     * Keeping track on who delegated votes to whom.\n     * Note that delegation does not mean you cannot vote / veto any more, it just means that the delegate can\n     * benefit from your votes when invoking a veto. Circular delegations are valid, do not help when voting.\n     */\n    mapping(address owner => address delegate) public delegates;\n\n    /**\n     * A time stamp in the past such that: votes = balance * (time passed since anchor was set)\n     */\n    mapping(address owner => uint64 timestamp) private voteAnchor; // 44 Bit for the time stamp, 20 Bit sub-second time resolution\n\n    event Delegation(address indexed from, address indexed to); // indicates a delegation\n    event Trade(address who, int amount, uint totPrice, uint newprice); // amount pos or neg for mint or redemption\n\n    constructor(Frankencoin zchf_) ERC20(18) {\n        zchf = zchf_;\n    }\n\n    function name() external pure override returns (string memory) {\n        return \"Frankencoin Pool Share\";\n    }\n\n    function symbol() external pure override returns (string memory) {\n        return \"FPS\";\n    }\n\n    /**\n     * Returns the price of one FPS in ZCHF with 18 decimals precision.\n     */\n    function price() public view returns (uint256) {\n        uint256 equity = zchf.equity();\n        if (equity == 0 || totalSupply() == 0) {\n            return ONE_DEC18; // initial price is 1000 ZCHF for the first 1000 FPS\n        } else {\n            return\n                (VALUATION_FACTOR * zchf.equity() * ONE_DEC18) / totalSupply();\n        }\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        super._beforeTokenTransfer(from, to, amount);\n        if (amount > 0) {\n            // No need to adjust the sender votes. When they send out 10% of their shares, they also lose 10% of\n            // their votes so everything falls nicely into place.\n            // Recipient votes should stay the same, but grow faster in the future, requiring an adjustment of the anchor.\n            uint256 roundingLoss = _adjustRecipientVoteAnchor(to, amount);\n            // The total also must be adjusted and kept accurate by taking into account the rounding error.\n            _adjustTotalVotes(from, amount, roundingLoss);\n        }\n    }\n\n    /**\n     * Returns whether the given address is allowed to redeem FPS, which is the\n     * case after their average holding duration is larger than the required minimum.\n     */\n    function canRedeem(address owner) public view returns (bool) {\n        return _anchorTime() - voteAnchor[owner] >= MIN_HOLDING_DURATION;\n    }\n\n    /**\n     * @notice Decrease the total votes anchor when tokens lose their voting power due to being moved\n     * @param from      sender\n     * @param amount    amount to be sent\n     */\n    function _adjustTotalVotes(\n        address from,\n        uint256 amount,\n        uint256 roundingLoss\n    ) internal {\n        uint64 time = _anchorTime();\n        uint256 lostVotes = from == address(0x0)\n            ? 0\n            : (time - voteAnchor[from]) * amount;\n        totalVotesAtAnchor = uint192(totalVotes() - roundingLoss - lostVotes);\n        totalVotesAnchorTime = time;\n    }\n\n    /**\n     * @notice the vote anchor of the recipient is moved forward such that the number of calculated\n     * votes does not change despite the higher balance.\n     * @param to        receiver address\n     * @param amount    amount to be received\n     * @return the number of votes lost due to rounding errors\n     */\n    function _adjustRecipientVoteAnchor(\n        address to,\n        uint256 amount\n    ) internal returns (uint256) {\n        if (to != address(0x0)) {\n            uint256 recipientVotes = votes(to); // for example 21 if 7 shares were held for 3 seconds\n            uint256 newbalance = balanceOf(to) + amount; // for example 11 if 4 shares are added\n            voteAnchor[to] = uint64(\n                _anchorTime() - recipientVotes / newbalance\n            ); // new example anchor is only 21 / 11 = 1 second in the past\n            return recipientVotes % newbalance; // we have lost 21 % 11 = 10 votes\n        } else {\n            // optimization for burn, vote anchor of null address does not matter\n            return 0;\n        }\n    }\n\n    /**\n     * Time stamp with some additional bits for higher resolution.\n     */\n    function _anchorTime() internal view returns (uint64) {\n        return uint64(block.timestamp << TIME_RESOLUTION_BITS);\n    }\n\n    /**\n     * The relative voting power of the address. 1e18 is 100%.\n     */\n    function relativeVotes(address holder) external view returns (uint256) {\n        return (ONE_DEC18 * votes(holder)) / totalVotes();\n    }\n\n    /**\n     * The votes of the holder, excluding votes from delegates.\n     */\n    function votes(address holder) public view returns (uint256) {\n        return balanceOf(holder) * (_anchorTime() - voteAnchor[holder]);\n    }\n\n    /**\n     * Total number of votes in the system.\n     */\n    function totalVotes() public view returns (uint256) {\n        return\n            totalVotesAtAnchor +\n            totalSupply() *\n            (_anchorTime() - totalVotesAnchorTime);\n    }\n\n    function votesDelegated(\n        address sender,\n        address[] calldata helpers\n    ) public view returns (uint256) {\n        uint256 _votes = votes(sender);\n        require(_checkDuplicatesAndSorted(helpers));\n        for (uint i = 0; i < helpers.length; i++) {\n            address current = helpers[i];\n            require(current != sender);\n            require(_canVoteFor(sender, current));\n            _votes += votes(current);\n        }\n        return _votes;\n    }\n\n    function _checkDuplicatesAndSorted(\n        address[] calldata helpers\n    ) internal pure returns (bool ok) {\n        if (helpers.length <= 1) {\n            return true;\n        } else {\n            address prevAddress = helpers[0];\n            for (uint i = 1; i < helpers.length; i++) {\n                if (helpers[i] <= prevAddress) {\n                    return false;\n                }\n                prevAddress = helpers[i];\n            }\n            return true;\n        }\n    }\n\n    /**\n     * Checks whether the sender address is qualified given a list of helpers that delegated their votes\n     * directly or indirectly to the sender. It is the responsiblity of the caller to figure out whether\n     * helpes are necessary and to identify them by scanning the blockchain for Delegation events.\n     */\n    function checkQualified(\n        address sender,\n        address[] calldata helpers\n    ) public view override {\n        uint256 _votes = votesDelegated(sender, helpers);\n        if (_votes * 10000 < QUORUM * totalVotes()) revert NotQualified();\n    }\n\n    error NotQualified();\n\n    /**\n     * Increases the voting power of the delegate by your number of votes without taking away any voting power\n     * from the sender.\n     */\n    function delegateVoteTo(address delegate) external {\n        delegates[msg.sender] = delegate;\n        emit Delegation(msg.sender, delegate);\n    }\n\n    function _canVoteFor(\n        address delegate,\n        address owner\n    ) internal view returns (bool) {\n        if (owner == delegate) {\n            return true;\n        } else if (owner == address(0x0)) {\n            return false;\n        } else {\n            return _canVoteFor(delegate, delegates[owner]);\n        }\n    }\n\n    /**\n     * Since quorum is rather low, it is important to have a way to prevent malicious minority holders\n     * from blocking the whole system. This method provides a way for the good guys to team up and destroy\n     * the bad guy's votes (at the cost of also reducing their own votes). This mechanism potentially\n     * gives full control over the system to whoever has 51% of the votes.\n     *\n     * Since this is a rather aggressive measure, delegation is not supported. Every holder must call this\n     * method on their own.\n     */\n    function kamikaze(address target, uint256 votesToDestroy) external {\n        uint256 destroyedVotes = _reduceVotes(msg.sender, votesToDestroy);\n        destroyedVotes += _reduceVotes(target, votesToDestroy);\n        totalVotesAtAnchor = uint192(totalVotes() - destroyedVotes);\n        totalVotesAnchorTime = _anchorTime();\n    }\n\n    function _reduceVotes(\n        address target,\n        uint256 amount\n    ) internal returns (uint256) {\n        uint256 votesBefore = votes(target);\n        require(votesBefore >= amount, \"not enough votes\");\n        voteAnchor[target] = uint64(\n            _anchorTime() - (votesBefore - amount) / balanceOf(target)\n        );\n        return votesBefore - votes(target);\n    }\n\n    function invest(\n        uint256 amount,\n        uint256 expectedShares\n    ) external returns (uint256) {\n        zchf.transferFrom(msg.sender, address(this), amount);\n        uint256 shares = _createShares(msg.sender, amount);\n        require(shares >= expectedShares);\n        return shares;\n    }\n\n    /**\n     * In order to mint new FPS tokens, one needs to send ZCHF to this contract using the transferAndCall function\n     * in the ZCHF contract.\n     *\n     * If equity is close to zero or negative, you need to send enough ZCHF to bring equity back to 1000 ZCHF.\n     */\n    function onTokenTransfer(\n        address from,\n        uint256 amount,\n        bytes calldata\n    ) external returns (bool) {\n        require(msg.sender == address(zchf), \"caller must be zchf\");\n        _createShares(from, amount);\n        return true;\n    }\n\n    function _createShares(\n        address from,\n        uint256 amount\n    ) internal returns (uint256) {\n        uint256 equity = zchf.equity();\n        require(equity >= MINIMUM_EQUITY, \"insuf equity\"); // ensures that the initial deposit is at least 1000 ZCHF\n\n        // Assign 1000 FPS for the initial deposit, calculate the amount otherwise\n        uint256 shares = equity <= amount\n            ? 1000 * ONE_DEC18\n            : _calculateShares(equity - amount, amount);\n        _mint(from, shares);\n        emit Trade(from, int(shares), amount, price());\n\n        // limit the total supply to a reasonable amount to guard against overflows with price and vote calculations\n        // the 128 bits are 68 bits for magnitude and 60 bits for precision, as calculated in an above comment\n        require(totalSupply() <= type(uint128).max, \"total supply exceeded\");\n        return shares;\n    }\n\n    /**\n     * @notice Calculate shares received when depositing ZCHF\n     * @param investment ZCHF invested\n     * @return amount of shares received for the ZCHF invested\n     */\n    function calculateShares(uint256 investment) public view returns (uint256) {\n        return _calculateShares(zchf.equity(), investment);\n    }\n\n    function _calculateShares(\n        uint256 capitalBefore,\n        uint256 investment\n    ) internal view returns (uint256) {\n        uint256 totalShares = totalSupply();\n        uint256 investmentExFees = (investment * 997) / 1000;\n        uint256 newTotalShares = totalShares < 1000 * ONE_DEC18\n            ? 1000 * ONE_DEC18\n            : _mulD18(\n                totalShares,\n                _cubicRoot(\n                    _divD18(capitalBefore + investmentExFees, capitalBefore)\n                )\n            );\n        return newTotalShares - totalShares;\n    }\n\n    /**\n     * Redeem the given amount of shares owned by the sender and transfer the proceeds to the target.\n     */\n    function redeem(address target, uint256 shares) public returns (uint256) {\n        require(canRedeem(msg.sender));\n        uint256 proceeds = calculateProceeds(shares);\n        _burn(msg.sender, shares);\n        zchf.transfer(target, proceeds);\n        emit Trade(msg.sender, -int(shares), proceeds, price());\n        return proceeds;\n    }\n\n    function redeemExpected(\n        address target,\n        uint256 shares,\n        uint256 expectedProceeds\n    ) external returns (uint256) {\n        uint256 proceeds = redeem(target, shares);\n        require(proceeds >= expectedProceeds);\n        return proceeds;\n    }\n\n    /**\n     * @notice Calculate ZCHF received when depositing shares\n     * @param shares number of shares we want to exchange for ZCHF,\n     *               in dec18 format\n     * @return amount of ZCHF received for the shares\n     */\n    function calculateProceeds(uint256 shares) public view returns (uint256) {\n        uint256 totalShares = totalSupply();\n        require(shares + ONE_DEC18 < totalShares, \"too many shares\"); // make sure there is always at least one share\n        uint256 capital = zchf.equity();\n        uint256 reductionAfterFees = (shares * 997) / 1000;\n        uint256 newCapital = _mulD18(\n            capital,\n            _power3(_divD18(totalShares - reductionAfterFees, totalShares))\n        );\n        return capital - newCapital;\n    }\n\n    /**\n     * If there is less than 1000 ZCHF in equity left (maybe even negative), the system is at risk\n     * and we should allow qualified FPS holders to restructure the system.\n     *\n     * Example: there was a devastating loss and equity stands at -1'000'000. Most shareholders have lost hope in the\n     * Frankencoin system except for a group of small FPS holders who still believes in it and is willing to provide\n     * 2'000'000 ZCHF to save it. These brave souls are essentially donating 1'000'000 to the minter reserve and it\n     * would be wrong to force them to share the other million with the passive FPS holders. Instead, they will get\n     * the possibility to bootstrap the system again owning 100% of all FPS shares.\n     */\n    function restructureCapTable(\n        address[] calldata helpers,\n        address[] calldata addressesToWipe\n    ) external {\n        require(zchf.equity() < MINIMUM_EQUITY);\n        checkQualified(msg.sender, helpers);\n        for (uint256 i = 0; i < addressesToWipe.length; i++) {\n            address current = addressesToWipe[i];\n            _burn(current, balanceOf(current));\n        }\n    }\n}\n"
    },
    "contracts/Frankencoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./utils/ERC20PermitLight.sol\";\nimport \"./Equity.sol\";\nimport \"./interface/IReserve.sol\";\nimport \"./interface/IFrankencoin.sol\";\n\n/**\n * The Frankencoin (ZCHF) is an ERC-20 token that is designed to track the value of the Swiss franc.\n * It is not upgradable, but open to arbitrary minting plugins. These are automatically accepted if none of the\n * qualified pool share holders casts a veto, leading to a flexible but conservative governance.\n */\ncontract Frankencoin is ERC20PermitLight, IFrankencoin {\n    /**\n     * Minimal fee and application period when suggesting a new minter.\n     */\n    uint256 public constant MIN_FEE = 1000 * (10 ** 18);\n    uint256 public immutable MIN_APPLICATION_PERIOD; // for example 10 days\n\n    /**\n     * The contract that holds the reserve.\n     */\n    IReserve public immutable override reserve;\n\n    /**\n     * How much of the reserve belongs to the minters.\n     * Everything else belongs to the pool share holders.\n     * Stored with 6 additional digits of accuracy so no rounding is necessary\n     * when dealing with parts per million (ppm) in reserve calculations.\n     */\n    uint256 private minterReserveE6;\n\n    /**\n     * Map of minters to approval time stamps. If the time stamp is in the past, the minter contract is allowed\n     * to mint Frankencoins.\n     */\n    mapping(address minter => uint256 validityStart) public minters;\n\n    /**\n     * List of positions that are allowed to mint and the minter that registered them.\n     */\n    mapping(address position => address registeringMinter) public positions;\n\n    event MinterApplied(\n        address indexed minter,\n        uint256 applicationPeriod,\n        uint256 applicationFee,\n        string message\n    );\n    event MinterDenied(address indexed minter, string message);\n    event Loss(\n        address indexed reportingMinter,\n        uint256 amount,\n        uint256 reserve\n    );\n\n    modifier minterOnly() {\n        if (!isMinter(msg.sender) && !isMinter(positions[msg.sender]))\n            revert NotMinter();\n        _;\n    }\n\n    /**\n     * Initiates the Frankencoin with the provided minimum application period for new plugins\n     * in seconds, for example 10 days, i.e. 3600*24*10 = 864000\n     */\n    constructor(uint256 _minApplicationPeriod) ERC20(18) {\n        MIN_APPLICATION_PERIOD = _minApplicationPeriod;\n        reserve = new Equity(this);\n    }\n\n    function name() external pure override returns (string memory) {\n        return \"Frankencoin\";\n    }\n\n    function symbol() external pure override returns (string memory) {\n        return \"ZCHF\";\n    }\n\n    function initialize(address _minter, string calldata _message) external {\n        require(totalSupply() == 0 && reserve.totalSupply() == 0);\n        minters[_minter] = block.timestamp;\n        emit MinterApplied(_minter, 0, 0, _message);\n    }\n\n    /**\n     * Publicly accessible method to suggest a new way of minting Frankencoin.\n     *\n     * The caller has to pay an application fee that is irrevocably lost even if the new minter is vetoed.\n     *\n     * The caller must assume that someone will veto the new minter unless there is broad consensus that the new minter\n     * adds value to the Frankencoin system. Complex proposals should have application periods and applications fees above\n     * the minimum. It is assumed that over time, informal ways to coordinate on new minters emerge. The message parameter\n     * might be useful for initiating further communication. Maybe it contains a link to a website describing the proposed\n     * minter.\n     */\n    function suggestMinter(\n        address _minter,\n        uint256 _applicationPeriod,\n        uint256 _applicationFee,\n        string calldata _message\n    ) external override {\n        if (_applicationPeriod < MIN_APPLICATION_PERIOD)\n            revert PeriodTooShort();\n        if (_applicationFee < MIN_FEE) revert FeeTooLow();\n        if (minters[_minter] != 0) revert AlreadyRegistered();\n        _transfer(msg.sender, address(reserve), _applicationFee);\n        minters[_minter] = block.timestamp + _applicationPeriod;\n        emit MinterApplied(\n            _minter,\n            _applicationPeriod,\n            _applicationFee,\n            _message\n        );\n    }\n\n    error PeriodTooShort();\n    error FeeTooLow();\n    error AlreadyRegistered();\n\n    /**\n     * Make the system more user friendly by skipping the allowance in many cases.\n     *\n     * We trust minters and the positions they have created to mint and burn as they please, so\n     * giving them arbitraty allowances does not pose an additional risk.\n     */\n    function _allowance(\n        address owner,\n        address spender\n    ) internal view override returns (uint256) {\n        uint256 explicit = super._allowance(owner, spender);\n        if (explicit > 0) {\n            return explicit; // don't waste gas checking minter\n        } else if (isMinter(spender) || isMinter(isPosition(spender))) {\n            return INFINITY;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * The reserve provided by the owners of collateralized positions.\n     * The minter reserve can be used to cover losses after all else failed and the equity holders have already been wiped out.\n     */\n    function minterReserve() public view returns (uint256) {\n        return minterReserveE6 / 1000000;\n    }\n\n    /**\n     * Registers a collateralized debt position, thereby giving it the ability to mint Frankencoins.\n     * It is assumed that the responsible minter that registers the position ensures that the position can be trusted.\n     */\n    function registerPosition(address _position) external override {\n        if (!isMinter(msg.sender)) revert NotMinter();\n        positions[_position] = msg.sender;\n    }\n\n    error NotMinter();\n\n    /**\n     * The amount of equity of the Frankencoin system in ZCHF, owned by the holders of Frankencoin Pool Shares.\n     * Note that the equity contract technically holds both the minter reserve as well as the equity, so the minter\n     * reserve must be subtracted. All fees and other kind of income is added to the Equity contract and essentially\n     * constitutes profits attributable to the pool share holders.\n     */\n    function equity() public view returns (uint256) {\n        uint256 balance = balanceOf(address(reserve));\n        uint256 minReserve = minterReserve();\n        if (balance <= minReserve) {\n            return 0;\n        } else {\n            return balance - minReserve;\n        }\n    }\n\n    /**\n     * Qualified pool share holders can deny minters during the application period.\n     * Calling this function is relatively cheap thanks to the deletion of a storage slot.\n     */\n    function denyMinter(\n        address _minter,\n        address[] calldata _helpers,\n        string calldata _message\n    ) external override {\n        if (block.timestamp > minters[_minter]) revert TooLate();\n        reserve.checkQualified(msg.sender, _helpers);\n        delete minters[_minter];\n        emit MinterDenied(_minter, _message);\n    }\n\n    error TooLate();\n\n    /**\n     * Mints the provided amount of ZCHF to the target address, automatically forwarding\n     * the minting fee and the reserve to the right place.\n     */\n    function mintWithReserve(\n        address _target,\n        uint256 _amount,\n        uint32 _reservePPM,\n        uint32 _feesPPM\n    ) external override minterOnly {\n        uint256 usableMint = (_amount * (1000_000 - _feesPPM - _reservePPM)) /\n            1000_000; // rounding down is fine\n        _mint(_target, usableMint);\n        _mint(address(reserve), _amount - usableMint); // rest goes to equity as reserves or as fees\n        minterReserveE6 += _amount * _reservePPM; // minter reserve must be kept accurately in order to ensure we can get back to exactly 0\n    }\n\n    function mint(\n        address _target,\n        uint256 _amount\n    ) external override minterOnly {\n        _mint(_target, _amount);\n    }\n\n    /**\n     * Anyone is allowed to burn their ZCHF.\n     */\n    function burn(uint256 _amount) external {\n        _burn(msg.sender, _amount);\n    }\n\n    /**\n     * Burn someone elses ZCHF.\n     */\n    function burnFrom(\n        address _owner,\n        uint256 _amount\n    ) external override minterOnly {\n        _burn(_owner, _amount);\n    }\n\n    /**\n     * Burn that amount without reclaiming the reserve, but freeing it up and thereby essentially donating it to the pool\n     * share holders. This can make sense in combination with 'notifyLoss', i.e. when it is the pool share holders that bear the risk\n     * and depending on the outcome they make a profit or a loss.\n     *\n     * Design rule: Minters calling this method are only allowed to so for tokens amounts they previously minted with the same _reservePPM amount.\n     *\n     * For example, if someone minted 50 ZCHF earlier with a 20% reserve requirement (200000 ppm), they got 40 ZCHF and paid\n     * 10 ZCHF into the reserve. Now they want to repay the debt by burning 50 ZCHF. When doing so using this method, 50 ZCHF get\n     * burned and on top of that, 10 ZCHF previously assigned to the minter's reserved are reassigned to the pool share holders.\n     */\n    function burnWithourReserve(\n        uint256 amount,\n        uint32 reservePPM\n    ) external override minterOnly {\n        _burn(msg.sender, amount);\n        minterReserveE6 -= amount * reservePPM;\n    }\n\n    /**\n     * Burns the provided number of tokens plus whatever reserves are associated with that amount given the reserve requirement.\n     * The caller is only allowed to use this method for tokens also minted through the caller with the same _reservePPM amount.\n     *\n     * Example: the calling contract has previously minted 100 ZCHF with a reserve ratio of 20% (i.e. 200000 ppm). Now they have\n     * 41 ZCHF that they do not need so they decide to repay that amount. Assuming the reserves are only 90% covered,\n     * the call to burnWithReserve will burn the 41 plus 9 from the reserve, reducing the outstanding 'debt' of the caller by\n     * 50 ZCHF in total. This total is returned by the method so the caller knows how much less they owe.\n     */\n    function burnWithReserve(\n        uint256 _amountExcludingReserve,\n        uint32 _reservePPM\n    ) external override minterOnly returns (uint256) {\n        uint256 freedAmount = calculateFreedAmount(\n            _amountExcludingReserve,\n            _reservePPM\n        ); // this would be the 50 in the example\n        minterReserveE6 -= freedAmount * _reservePPM; // reduce reserve requirements by original ratio\n        _transfer(\n            address(reserve),\n            msg.sender,\n            freedAmount - _amountExcludingReserve\n        ); // collect assigned reserve, maybe less than original reserve\n        _burn(msg.sender, freedAmount); // burn the rest of the freed amount\n        return freedAmount;\n    }\n\n    /**\n     * Burns the target amount taking the tokens to be burned from the payer and the payer's reserve.\n     * The caller is only allowed to use this method for tokens also minted through the caller with the same _reservePPM amount.\n     *\n     * Example: the calling contract has previously minted 100 ZCHF with a reserve ratio of 20% (i.e. 200000 ppm). To burn half\n     * of that again, the minter calls burnFrom with a target amount of 50 ZCHF. Assuming that reserves are only 90% covered,\n     * this call will deduct 41 ZCHF from the payer's balance and 9 from the reserve, while reducing the minter reserve by 10.\n     */\n    function burnFromWithReserve(\n        address payer,\n        uint256 targetTotalBurnAmount,\n        uint32 reservePPM\n    ) external override minterOnly returns (uint256) {\n        uint256 assigned = calculateAssignedReserve(\n            targetTotalBurnAmount,\n            reservePPM\n        );\n        _transfer(address(reserve), payer, assigned); // send reserve to owner\n        _burn(payer, targetTotalBurnAmount); // and burn the full amount from the owner's address\n        minterReserveE6 -= targetTotalBurnAmount * reservePPM; // reduce reserve requirements by original ratio\n        return assigned;\n    }\n\n    /**\n     * Calculates the reserve attributable to someone who minted the given amount with the given reserve requirement.\n     * Under normal circumstances, this is just the reserver requirement multiplied by the amount. However, after a severe loss\n     * of capital that burned into the minter's reserve, this can also be less than that.\n     */\n    function calculateAssignedReserve(\n        uint256 mintedAmount,\n        uint32 _reservePPM\n    ) public view returns (uint256) {\n        uint256 theoreticalReserve = (_reservePPM * mintedAmount) / 1000000;\n        uint256 currentReserve = balanceOf(address(reserve));\n        uint256 minterReserve_ = minterReserve();\n        if (currentReserve < minterReserve_) {\n            // not enough reserves, owner has to take a loss\n            return (theoreticalReserve * currentReserve) / minterReserve_;\n        } else {\n            return theoreticalReserve;\n        }\n    }\n\n    /**\n     * Calculate the amount that is freed when returning amountExcludingReserve given a reserve ratio of reservePPM, taking\n     * into account potential losses. Example values in the comments.\n     */\n    function calculateFreedAmount(\n        uint256 amountExcludingReserve /* 41 */,\n        uint32 reservePPM /* 20% */\n    ) public view returns (uint256) {\n        uint256 currentReserve = balanceOf(address(reserve)); // 18, 10% below what we should have\n        uint256 minterReserve_ = minterReserve(); // 20\n        uint256 adjustedReservePPM = currentReserve < minterReserve_\n            ? (reservePPM * currentReserve) / minterReserve_\n            : reservePPM; // 18%\n        return\n            (1000000 * amountExcludingReserve) / (1000000 - adjustedReservePPM); // 41 / (1-18%) = 50\n    }\n\n    /**\n     * Notify the Frankencoin that a minter lost economic access to some coins. This does not mean that the coins\n     * are literally lost. It just means that some ZCHF will likely never be repaid and that in order to bring the system\n     * back into balance, the lost amount of ZCHF must be removed from the reserve instead.\n     *\n     * For example, if a minter printed 1 million ZCHF for a mortgage and the mortgage turned out to be unsound with the\n     * house only yielding 800'000 in the subsequent auction, there is a loss of 200'000 that needs to be covered by the\n     * reserve.\n     */\n    function notifyLoss(uint256 _amount) external override minterOnly {\n        uint256 reserveLeft = balanceOf(address(reserve));\n        if (reserveLeft >= _amount) {\n            _transfer(address(reserve), msg.sender, _amount);\n        } else {\n            _transfer(address(reserve), msg.sender, reserveLeft);\n            _mint(msg.sender, _amount - reserveLeft);\n        }\n        emit Loss(msg.sender, _amount, reserveLeft);\n    }\n\n    /**\n     * Returns true if the address is an approved minter.\n     */\n    function isMinter(address _minter) public view override returns (bool) {\n        return minters[_minter] != 0 && block.timestamp >= minters[_minter];\n    }\n\n    /**\n     * Returns the address of the minter that created this position or null if the provided address is unknown.\n     */\n    function isPosition(\n        address _position\n    ) public view override returns (address) {\n        return positions[_position];\n    }\n}\n"
    },
    "contracts/interface/IERC20.sol": {
      "content": "/**\n* SPDX-License-Identifier: MIT\n*\n* Copyright (c) 2016-2019 zOS Global Limited\n*\n*/\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\n\ninterface IERC20 {\n\n    // Optional functions\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}"
    },
    "contracts/interface/IERC677Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC677Receiver {\n    \n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\n\n}"
    },
    "contracts/interface/IFrankencoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IReserve.sol\";\n\ninterface IFrankencoin is IERC20 {\n    function suggestMinter(\n        address _minter,\n        uint256 _applicationPeriod,\n        uint256 _applicationFee,\n        string calldata _message\n    ) external;\n\n    function registerPosition(address position) external;\n\n    function denyMinter(\n        address minter,\n        address[] calldata helpers,\n        string calldata message\n    ) external;\n\n    function reserve() external view returns (IReserve);\n\n    function minterReserve() external view returns (uint256);\n\n    function calculateAssignedReserve(\n        uint256 mintedAmount,\n        uint32 _reservePPM\n    ) external view returns (uint256);\n\n    function equity() external view returns (uint256);\n\n    function isMinter(address minter) external view returns (bool);\n\n    function isPosition(address position) external view returns (address);\n\n    function mint(address target, uint256 amount) external;\n\n    function mintWithReserve(\n        address target,\n        uint256 amount,\n        uint32 reservePPM,\n        uint32 feePPM\n    ) external;\n\n    function burnFrom(address target, uint256 amount) external;\n\n    function burnWithourReserve(\n        uint256 amountIncludingReserve,\n        uint32 reservePPM\n    ) external;\n\n    function burnFromWithReserve(\n        address payer,\n        uint256 targetTotalBurnAmount,\n        uint32 _reservePPM\n    ) external returns (uint256);\n\n    function burnWithReserve(\n        uint256 amountExcludingReserve,\n        uint32 reservePPM\n    ) external returns (uint256);\n\n    function notifyLoss(uint256 amount) external;\n}\n"
    },
    "contracts/interface/IPosition.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IReserve.sol\";\nimport \"./IFrankencoin.sol\";\n\ninterface IPosition {\n\n    function collateral() external returns (IERC20);\n\n    function minimumCollateral() external returns (uint256);\n\n    function challengePeriod() external returns (uint256);\n\n    function expiration() external returns (uint256);\n\n    function price() external returns (uint256);\n\n    function reduceLimitForClone(uint256 amount, uint256 expiration) external;\n\n    function initializeClone(address owner, uint256 _price, uint256 _coll, uint256 _mint, uint256 expiration) external;\n\n    function deny(address[] calldata helpers, string calldata message) external;\n\n    function mint(address target, uint256 amount) external;\n\n    function minted() external returns (uint256);\n\n    function reserveContribution() external returns (uint32);\n\n    function getUsableMint(uint256 totalMint, bool beforeFees) external view returns (uint256);\n\n    function notifyChallengeStarted(uint256 size) external;\n\n    function tryAvertChallenge(uint256 size, uint256 bid, uint256 challengeEnd) external returns (bool);\n\n    function notifyChallengeSucceeded(address bidder, uint256 bid, uint256 size) external returns (address, uint256, uint256, uint32);\n\n}"
    },
    "contracts/interface/IReserve.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IReserve is IERC20 {\n   function checkQualified(address sender, address[] calldata helpers) external view;\n}"
    },
    "contracts/MintingHub.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./utils/Ownable.sol\";\n\nimport \"./interface/IERC20.sol\";\nimport \"./interface/IReserve.sol\";\nimport \"./interface/IFrankencoin.sol\";\nimport \"./interface/IPosition.sol\";\n\n/**\n * The central hub for creating, cloning and challenging collateralized Frankencoin positions.\n * Only one instance of this contract is required, whereas every new position comes with a new position\n * contract. Pending challenges are stored as structs in an array.\n */\ncontract MintingHub {\n    /**\n     * Irrevocable fee in ZCHF when proposing a new position (but not when cloning an existing one).\n     */\n    uint256 public constant OPENING_FEE = 1000 * 10 ** 18;\n\n    /**\n     * The challenger reward in parts per million (ppm) relative to the challenged amount, whereas\n     * challenged amount if defined as the challenged collateral amount times the liquidation price.\n     */\n    uint32 public constant CHALLENGER_REWARD = 20000; // 2%\n\n    IPositionFactory private immutable POSITION_FACTORY; // position contract to clone\n\n    IFrankencoin public immutable zchf; // currency\n    Challenge[] public challenges; // list of open challenges\n\n    /**\n     * Map to remember pending postponed collateral returns.\n     * It maps collateral => beneficiary => amount.\n     */\n    mapping(address collateral => mapping(address owner => uint256 amount))\n        public pendingReturns;\n\n    struct Challenge {\n        address challenger; // the address from which the challenge was initiated\n        IPosition position; // the position that was challenged\n        uint256 size; // how much collateral the challenger provided\n        uint256 end; // the deadline of the challenge (block.timestamp)\n        address bidder; // the address from which the highest bid was made, if any\n        uint256 bid; // the highest bid in ZCHF (total amount, not price per unit)\n    }\n\n    event PositionOpened(\n        address indexed owner,\n        address indexed position,\n        address zchf,\n        address collateral,\n        uint256 price\n    );\n    event ChallengeStarted(\n        address indexed challenger,\n        address indexed position,\n        uint256 size,\n        uint256 number\n    );\n    event ChallengeAverted(address indexed position, uint256 number);\n    event ChallengeSucceeded(\n        address indexed position,\n        uint256 bid,\n        uint256 number\n    );\n    event NewBid(uint256 challengedId, uint256 bidAmount, address bidder);\n    event PostPonedReturn(\n        address collateral,\n        address indexed beneficiary,\n        uint256 amount\n    );\n\n    constructor(address _zchf, address _factory) {\n        zchf = IFrankencoin(_zchf);\n        POSITION_FACTORY = IPositionFactory(_factory);\n    }\n\n    function openPositionOneWeek(\n        address _collateralAddress,\n        uint256 _minCollateral,\n        uint256 _initialCollateral,\n        uint256 _mintingMaximum,\n        uint256 _expirationSeconds,\n        uint256 _challengeSeconds,\n        uint32 _yearlyInterestPPM,\n        uint256 _liqPrice,\n        uint32 _reservePPM\n    ) public returns (address) {\n        return\n            openPosition(\n                _collateralAddress,\n                _minCollateral,\n                _initialCollateral,\n                _mintingMaximum,\n                7 days,\n                _expirationSeconds,\n                _challengeSeconds,\n                _yearlyInterestPPM,\n                _liqPrice,\n                _reservePPM\n            );\n    }\n\n    /**\n     * Open a collateralized loan position. See also https://docs.frankencoin.com/positions/open .\n     * For a successful call, you must set allowances for both ZCHF and the collateral token, allowing\n     * the minting hub to transfer the initial collateral amount to the newly created position and to\n     * withdraw the fees.\n     *\n     * Together, the expiration and the minting fee imply an interest rate.\n     * TODO: in future versions, it might be better to fix the interest and not the fee\n     *\n     * @param _collateralAddress        address of collateral token\n     * @param _minCollateral     minimum collateral required to prevent dust amounts\n     * @param _initialCollateral amount of initial collateral to be deposited\n     * @param _mintingMaximum    maximal amount of ZCHF that can be minted by the position owner\n     * @param _expirationSeconds position tenor in unit of timestamp (seconds) from 'now'\n     * @param _challengeSeconds  challenge period. Longer for less liquid collateral.\n     * @param _yearlyInterestPPM ppm of minted amount that is paid as fee to the equity contract for each year of duration\n     * @param _liqPrice          Liquidation price with (36 - token decimals) decimals,\n     *                           e.g. 18 decimals for an 18 decimal collateral, 36 decimals for a 0 decimal collateral.\n     * @param _reservePPM        ppm of minted amount that is locked as borrower's reserve, e.g. 20%\n     * @return address           address of created position\n     */\n    function openPosition(\n        address _collateralAddress,\n        uint256 _minCollateral,\n        uint256 _initialCollateral,\n        uint256 _mintingMaximum,\n        uint256 _initPeriodSeconds,\n        uint256 _expirationSeconds,\n        uint256 _challengeSeconds,\n        uint32 _yearlyInterestPPM,\n        uint256 _liqPrice,\n        uint32 _reservePPM\n    ) public returns (address) {\n        IPosition pos = IPosition(\n            POSITION_FACTORY.createNewPosition(\n                msg.sender,\n                address(zchf),\n                _collateralAddress,\n                _minCollateral,\n                _mintingMaximum,\n                _initPeriodSeconds,\n                _expirationSeconds,\n                _challengeSeconds,\n                _yearlyInterestPPM,\n                _liqPrice,\n                _reservePPM\n            )\n        );\n        require(IERC20(_collateralAddress).decimals() <= 24); // leaves 12 digits for price\n        require(\n            _initialCollateral >= _minCollateral,\n            \"must start with min col\"\n        );\n        require(_minCollateral * _liqPrice >= 5000 ether); // must start with at least 5000 ZCHF worth of collateral\n        zchf.registerPosition(address(pos));\n        zchf.transferFrom(msg.sender, address(zchf.reserve()), OPENING_FEE);\n        IERC20(_collateralAddress).transferFrom(\n            msg.sender,\n            address(pos),\n            _initialCollateral\n        );\n\n        emit PositionOpened(\n            msg.sender,\n            address(pos),\n            address(zchf),\n            _collateralAddress,\n            _liqPrice\n        );\n        return address(pos);\n    }\n\n    modifier validPos(address position) {\n        require(zchf.isPosition(position) == address(this), \"not our pos\");\n        _;\n    }\n\n    /**\n     * Clones an existing position and immediately tries to mint the specified amount using the given amount of collateral.\n     * This requires an allowance to be set on the collateral contract such that the minting hub can withdraw the collateral.\n     */\n    function clonePosition(\n        address position,\n        uint256 _initialCollateral,\n        uint256 _initialMint,\n        uint256 expiration\n    ) public validPos(position) returns (address) {\n        IPosition existing = IPosition(position);\n        existing.reduceLimitForClone(_initialMint, expiration);\n        address pos = POSITION_FACTORY.clonePosition(position);\n        zchf.registerPosition(pos);\n        IPosition(pos).initializeClone(\n            msg.sender,\n            existing.price(),\n            _initialCollateral,\n            _initialMint,\n            expiration\n        );\n        existing.collateral().transferFrom(msg.sender, pos, _initialCollateral); // At the end to guard against ERC-777 reentrancy\n\n        emit PositionOpened(\n            msg.sender,\n            address(pos),\n            address(zchf),\n            address(existing.collateral()),\n            existing.price()\n        );\n        return address(pos);\n    }\n\n    /**\n     * Launch a challenge on a position\n     * @param _positionAddr      address of the position we want to challenge\n     * @param _collateralAmount  size of the collateral we want to challenge (dec 18)\n     * @return index of the challenge in challenge-array\n     */\n    function launchChallenge(\n        address _positionAddr,\n        uint256 _collateralAmount,\n        uint256 expectedPrice\n    ) external validPos(_positionAddr) returns (uint256) {\n        IPosition position = IPosition(_positionAddr);\n        if (position.price() != expectedPrice) revert UnexpectedPrice();\n        IERC20(position.collateral()).transferFrom(\n            msg.sender,\n            address(this),\n            _collateralAmount\n        ); // At the beginning to guard against ERC-777 reentrancy\n        uint256 pos = challenges.length;\n        challenges.push(\n            Challenge(\n                msg.sender,\n                position,\n                _collateralAmount,\n                block.timestamp + position.challengePeriod(),\n                address(0x0),\n                0\n            )\n        );\n        position.notifyChallengeStarted(_collateralAmount);\n        emit ChallengeStarted(\n            msg.sender,\n            address(position),\n            _collateralAmount,\n            pos\n        );\n        return pos;\n    }\n\n    error UnexpectedPrice();\n\n    /**\n     * Splits a challenge into two smaller challenges.\n     * This can be useful to guard an attack, where a challenger launches a challenge so big that most bidders do not\n     * have the liquidity available to bid a sufficient amount. With this function, the can split of smaller slices of\n     * the challenge and avert it piece by piece.\n     */\n    function splitChallenge(\n        uint256 _challengeNumber,\n        uint256 splitOffAmount\n    ) external returns (uint256) {\n        Challenge storage challenge = challenges[_challengeNumber];\n        require(challenge.challenger != address(0x0));\n        Challenge memory copy = Challenge(\n            challenge.challenger,\n            challenge.position,\n            splitOffAmount,\n            challenge.end,\n            challenge.bidder,\n            (challenge.bid * splitOffAmount) / challenge.size\n        );\n        challenge.bid -= copy.bid;\n        challenge.size -= copy.size;\n\n        uint256 min = IPosition(challenge.position).minimumCollateral();\n        require(challenge.size >= min);\n        require(copy.size >= min);\n\n        uint256 pos = challenges.length;\n        challenges.push(copy);\n        emit ChallengeStarted(\n            challenge.challenger,\n            address(challenge.position),\n            challenge.size,\n            _challengeNumber\n        );\n        emit ChallengeStarted(\n            copy.challenger,\n            address(copy.position),\n            copy.size,\n            pos\n        );\n        return pos;\n    }\n\n    function minBid(uint256 challenge) public view returns (uint256) {\n        return _minBid(challenges[challenge]);\n    }\n\n    /**\n     * The minimum bid size for the next bid. It must be 0.5% higher than the previous bid.\n     */\n    function _minBid(\n        Challenge storage challenge\n    ) internal view returns (uint256) {\n        return (challenge.bid * 1005) / 1000;\n    }\n\n    /**\n     * Post a bid in ZCHF given an open challenge. Requires a ZCHF allowance from the caller to the minting hub.\n     *\n     * @param _challengeNumber   index of the challenge as broadcast in the event\n     * @param _bidAmountZCHF     how much to bid for the collateral of this challenge (dec 18)\n     * @param expectedSize       size verification to guard against frontrunners doing a split-challenge-attack\n     */\n    function bid(\n        uint256 _challengeNumber,\n        uint256 _bidAmountZCHF,\n        uint256 expectedSize\n    ) external {\n        Challenge storage challenge = challenges[_challengeNumber];\n\n        // Deactivated: if (block.timestamp >= challenge.end) revert TooLate();\n        // Reason: in case the bidder got blacklisted by the collateral issuer, it should be possible to bid even higher\n\n        if (expectedSize != challenge.size) revert UnexpectedSize();\n        if (challenge.bid > 0) {\n            zchf.transfer(challenge.bidder, challenge.bid); // return old bid\n        }\n        emit NewBid(_challengeNumber, _bidAmountZCHF, msg.sender);\n        IPosition pos = challenge.position;\n        uint256 size_ = challenge.size;\n        uint256 endTime = challenge.end;\n        // ask position if the bid was high enough to avert the challenge\n        if (pos.tryAvertChallenge(size_, _bidAmountZCHF, endTime)) {\n            // bid was high enough, let bidder buy collateral from challenger\n            emit ChallengeAverted(address(pos), _challengeNumber);\n            zchf.transferFrom(msg.sender, challenge.challenger, _bidAmountZCHF);\n            delete challenges[_challengeNumber]; // delete challenge before transferring collateral to avoid ERC777 re-entrency\n            pos.collateral().transfer(msg.sender, size_);\n        } else {\n            // challenge is not averted, update bid\n            if (_bidAmountZCHF < _minBid(challenge))\n                revert BidTooLow(_bidAmountZCHF, _minBid(challenge));\n            uint256 earliestEnd = block.timestamp + 30 minutes;\n            if (earliestEnd >= endTime && block.timestamp < endTime) {\n                // bump remaining time like ebay does when last minute bids come in\n                // An attacker trying to postpone the challenge forever must increase the bid by 0.5%\n                // every 30 minutes, or double it every three days, making the attack hard to sustain\n                // for a prolonged period of time.\n                challenge.end = earliestEnd;\n            }\n            zchf.transferFrom(msg.sender, address(this), _bidAmountZCHF);\n            challenge.bid = _bidAmountZCHF;\n            challenge.bidder = msg.sender;\n        }\n    }\n\n    error TooLate();\n    error UnexpectedSize();\n    error BidTooLow(uint256 bid, uint256 min);\n\n    function isChallengeOpen(\n        uint256 _challengeNumber\n    ) external view returns (bool) {\n        return challenges[_challengeNumber].end > block.timestamp;\n    }\n\n    /**\n     * Ends a challenge successfully after the auction period ended, whereas successfully means that the challenger\n     * could show that the price of the collateral is too low to make the position well-collateralized.\n     *\n     * In case that the collateral cannot be transfered back to the challenger (i.e. because the collateral token has a blacklist and the\n     * challenger is on it), it is possible to postpone the return of the collateral.\n     *\n     * @param postponeCollateralReturn Can be used to postpone the return of the collateral to the challenger. Usually false.\n     */\n    function end(\n        uint256 _challengeNumber,\n        bool postponeCollateralReturn\n    ) public {\n        Challenge memory challenge = challenges[_challengeNumber];\n        require(challenge.challenger != address(0x0));\n        require(block.timestamp >= challenge.end, \"period has not ended\");\n        delete challenges[_challengeNumber]; // delete first to avoid reentrancy with ERC-777 tokens\n\n        // challenge must have been successful, because otherwise it would have immediately ended on placing the winning bid\n\n        // notify the position that will send the collateral to the bidder. If there is no bid, send the collateral to msg.sender\n        address recipient = challenge.bidder == address(0x0)\n            ? msg.sender\n            : challenge.bidder;\n        (\n            address owner,\n            uint256 effectiveBid,\n            uint256 repayment,\n            uint32 reservePPM\n        ) = challenge.position.notifyChallengeSucceeded(\n                recipient,\n                challenge.bid,\n                challenge.size\n            );\n        if (effectiveBid < challenge.bid) {\n            // overbid, return excess amount\n            IERC20(zchf).transfer(recipient, challenge.bid - effectiveBid);\n        }\n        uint256 reward = (effectiveBid * CHALLENGER_REWARD) / 1000_000;\n        uint256 fundsNeeded = reward + repayment;\n        if (effectiveBid > fundsNeeded) {\n            zchf.transfer(owner, effectiveBid - fundsNeeded);\n        } else if (effectiveBid < fundsNeeded) {\n            zchf.notifyLoss(fundsNeeded - effectiveBid); // ensure we have enough to pay everything\n        }\n        zchf.transfer(challenge.challenger, reward); // pay out the challenger reward\n        zchf.burnWithourReserve(repayment, reservePPM); // Repay the challenged part\n        _returnCollateral(\n            challenge.position.collateral(),\n            challenge.challenger,\n            challenge.size,\n            postponeCollateralReturn\n        );\n        emit ChallengeSucceeded(\n            address(challenge.position),\n            challenge.bid,\n            _challengeNumber\n        );\n    }\n\n    /**\n     * Challengers can call this method to withdraw collateral whose return was postponed.\n     */\n    function returnPostponedCollateral(\n        address collateral,\n        address target\n    ) external {\n        uint256 amount = pendingReturns[collateral][msg.sender];\n        delete pendingReturns[collateral][msg.sender];\n        IERC20(collateral).transfer(target, amount);\n    }\n\n    function _returnCollateral(\n        IERC20 collateral,\n        address recipient,\n        uint256 amount,\n        bool postpone\n    ) internal {\n        if (postpone) {\n            // Postponing helps in case the challenger was blacklisted on the collateral token or otherwise cannot receive it at the moment.\n            pendingReturns[address(collateral)][recipient] += amount;\n            emit PostPonedReturn(address(collateral), recipient, amount);\n        } else {\n            collateral.transfer(recipient, amount); // return the challenger's collateral\n        }\n    }\n}\n\ninterface IPositionFactory {\n    function createNewPosition(\n        address _owner,\n        address _zchf,\n        address _collateral,\n        uint256 _minCollateral,\n        uint256 _initialLimit,\n        uint256 _initPeriodSeconds,\n        uint256 _duration,\n        uint256 _challengePeriod,\n        uint32 _yearlyInterestPPM,\n        uint256 _liqPrice,\n        uint32 _reserve\n    ) external returns (address);\n\n    function clonePosition(address _existing) external returns (address);\n}\n"
    },
    "contracts/Position.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./utils/Ownable.sol\";\nimport \"./utils/MathUtil.sol\";\n\nimport \"./interface/IERC20.sol\";\nimport \"./interface/IPosition.sol\";\nimport \"./interface/IReserve.sol\";\nimport \"./interface/IFrankencoin.sol\";\n\n/**\n * A collateralized minting position.\n */\ncontract Position is Ownable, IPosition, MathUtil {\n    /**\n     * Note that this contract is intended to be cloned. All clones will share the same values for\n     * the constant and immutable fields, but have their own values for the other fields.\n     */\n\n    /**\n     * The zchf price per unit of the collateral below which challenges succeed, (36 - collateral.decimals) decimals\n     */\n    uint256 public price;\n\n    /**\n     * Net minted amount, including reserve.\n     */\n    uint256 public minted;\n\n    /**\n     * Amount of the collateral that is currently under a challenge.\n     * Used to figure out whether there are pending challenges.\n     */\n    uint256 public challengedAmount;\n\n    /**\n     * Challenge period in seconds.\n     */\n    uint256 public immutable challengePeriod;\n\n    /**\n     * End of the latest cooldown. If this is in the future, minting is suspended.\n     */\n    uint256 public cooldown;\n\n    /**\n     * How much can be minted at most.\n     */\n    uint256 public limit;\n\n    /**\n     * Timestamp when minting can start and the position no longer denied.\n     */\n    uint256 public immutable start;\n\n    /**\n     * Timestamp of the expiration of the position. After expiration, challenges cannot be averted\n     * any more. This is also the basis for fee calculations.\n     */\n    uint256 public expiration;\n\n    /**\n     * The original position to help identifying clones.\n     */\n    address public immutable original;\n\n    /**\n     * Pointer to the minting hub.\n     */\n    address public immutable hub;\n\n    /**\n     * The Frankencoin contract.\n     */\n    IFrankencoin public immutable zchf;\n\n    /**\n     * The collateral token.\n     */\n    IERC20 public immutable override collateral;\n\n    /**\n     * Minimum acceptable collateral amount to prevent dust.\n     */\n    uint256 public immutable override minimumCollateral;\n\n    /**\n     * The interest in parts per million per year that is deducted when minting Frankencoins.\n     * To be paid upfront.\n     */\n    uint32 public immutable yearlyInterestPPM;\n\n    /**\n     * The reserve contribution in parts per million of the minted amount.\n     */\n    uint32 public immutable reserveContribution;\n\n    event PositionOpened(\n        address indexed owner,\n        address original,\n        address zchf,\n        address collateral,\n        uint256 price\n    );\n    event MintingUpdate(\n        uint256 collateral,\n        uint256 price,\n        uint256 minted,\n        uint256 limit\n    );\n    event PositionDenied(address indexed sender, string message); // emitted if closed by governance\n\n    error InsufficientCollateral();\n\n    /**\n     * See MintingHub.openPosition\n     */\n    constructor(\n        address _owner,\n        address _hub,\n        address _zchf,\n        address _collateral,\n        uint256 _minCollateral,\n        uint256 _initialLimit,\n        uint256 _initPeriod,\n        uint256 _duration,\n        uint256 _challengePeriod,\n        uint32 _yearlyInterestPPM,\n        uint256 _liqPrice,\n        uint32 _reservePPM\n    ) {\n        require(_initPeriod >= 3 days); // must be at least three days, recommended to use higher values\n        setOwner(_owner);\n        original = address(this);\n        hub = _hub;\n        price = _liqPrice;\n        zchf = IFrankencoin(_zchf);\n        collateral = IERC20(_collateral);\n        yearlyInterestPPM = _yearlyInterestPPM;\n        reserveContribution = _reservePPM;\n        minimumCollateral = _minCollateral;\n        challengePeriod = _challengePeriod;\n        start = block.timestamp + _initPeriod; // at least three days time to deny the position\n        cooldown = start;\n        expiration = start + _duration;\n        limit = _initialLimit;\n\n        emit PositionOpened(\n            _owner,\n            original,\n            _zchf,\n            address(collateral),\n            _liqPrice\n        );\n    }\n\n    /**\n     * Method to initialize a freshly created clone. It is the responsibility of the creator to make sure this is only\n     * called once and to call reduceLimitForClone on the original position before initializing the clone.\n     */\n    function initializeClone(\n        address owner,\n        uint256 _price,\n        uint256 _coll,\n        uint256 _initialMint,\n        uint256 expirationTime\n    ) external onlyHub {\n        if (_coll < minimumCollateral) revert InsufficientCollateral();\n        price = (_initialMint * ONE_DEC18) / _coll;\n        _initialMint = (price * _coll) / ONE_DEC18; // to cancel potential rounding errors\n        if (price > _price) revert InsufficientCollateral();\n        setOwner(owner);\n        limit = _initialMint;\n        expiration = expirationTime;\n        _mint(owner, _initialMint, _coll);\n\n        emit PositionOpened(\n            owner,\n            original,\n            address(zchf),\n            address(collateral),\n            _price\n        );\n    }\n\n    /**\n     * Adjust this position's limit to allow a clone to mint its own Frankencoins.\n     * Invariant: global limit stays the same.\n     *\n     * Cloning a position is only allowed if the position is not challenged, not expired and not in cooldown.\n     */\n    function reduceLimitForClone(\n        uint256 mint_,\n        uint256 exp\n    ) external noChallenge noCooldown alive onlyHub {\n        if (exp > expiration || exp < start) revert TooLate();\n        uint256 newLimit = limit - mint_;\n        if (minted > newLimit) revert LimitExceeded();\n        limit = newLimit;\n    }\n\n    error TooLate();\n\n    /**\n     * Qualified pool share holders can call this method to immediately expire a freshly proposed position.\n     */\n    function deny(address[] calldata helpers, string calldata message) public {\n        if (block.timestamp >= start) revert TooLate();\n        IReserve(zchf.reserve()).checkQualified(msg.sender, helpers);\n        _close(); // since expiration is immutable, we put it under eternal cooldown\n        emit PositionDenied(msg.sender, message);\n    }\n\n    function _close() internal {\n        cooldown = type(uint256).max;\n    }\n\n    function isClosed() public view returns (bool) {\n        return cooldown == type(uint256).max;\n    }\n\n    /**\n     * This is how much the minter can actually use when minting ZCHF, with the rest being used\n     * to buy reserve pool shares.\n     */\n    function getUsableMint(\n        uint256 totalMint,\n        bool afterFees\n    ) public view returns (uint256) {\n        if (afterFees) {\n            return\n                (totalMint *\n                    (1000_000 - reserveContribution - calculateCurrentFee())) /\n                1000_000;\n        } else {\n            return (totalMint * (1000_000 - reserveContribution)) / 1000_000;\n        }\n    }\n\n    /**\n     * \"All in one\" function to adjust the outstanding amount of ZCHF, the collateral amount,\n     * and the price in one transaction.\n     */\n    function adjust(\n        uint256 newMinted,\n        uint256 newCollateral,\n        uint256 newPrice\n    ) external onlyOwner {\n        uint256 colbal = _collateralBalance();\n        if (newCollateral > colbal) {\n            collateral.transferFrom(\n                msg.sender,\n                address(this),\n                newCollateral - colbal\n            );\n        }\n        // Must be called after collateral deposit, but before withdrawal\n        if (newMinted < minted) {\n            zchf.burnFromWithReserve(\n                msg.sender,\n                minted - newMinted,\n                reserveContribution\n            );\n            minted = newMinted;\n        }\n        if (newCollateral < colbal) {\n            withdrawCollateral(msg.sender, colbal - newCollateral);\n        }\n        // Must be called after collateral withdrawal\n        if (newMinted > minted) {\n            mint(msg.sender, newMinted - minted);\n        }\n        if (newPrice != price) {\n            adjustPrice(newPrice);\n        }\n    }\n\n    /**\n     * Allows the position owner to adjust the liquidation price as long as there is no pending challenge.\n     * Lowering the liquidation price can be done with immediate effect, given that there is enough collateral.\n     * Increasing the liquidation price triggers a cooldown period of 3 days, during which minting is suspended.\n     */\n    function adjustPrice(uint256 newPrice) public onlyOwner noChallenge {\n        if (newPrice > price) {\n            _restrictMinting(3 days);\n        } else {\n            _checkCollateral(_collateralBalance(), newPrice);\n        }\n        price = newPrice;\n        emit MintingUpdate(_collateralBalance(), price, minted, limit);\n    }\n\n    function _collateralBalance() internal view returns (uint256) {\n        return IERC20(collateral).balanceOf(address(this));\n    }\n\n    /**\n     * Mint ZCHF as long as there is no open challenge, the position is not subject to a cooldown,\n     * and there is sufficient collateral.\n     */\n    function mint(\n        address target,\n        uint256 amount\n    ) public onlyOwner noChallenge noCooldown alive {\n        _mint(target, amount, _collateralBalance());\n    }\n\n    function calculateCurrentFee() public view returns (uint32) {\n        uint256 exp = expiration;\n        uint256 time = block.timestamp;\n        if (time >= exp) {\n            return 0;\n        } else {\n            if (time < start) {\n                time = start;\n            }\n            // Time resolution is in the range of minutes for typical interest rates.\n            return uint32(((exp - time) * yearlyInterestPPM) / 365 days);\n        }\n    }\n\n    error LimitExceeded();\n\n    function _mint(\n        address target,\n        uint256 amount,\n        uint256 collateral_\n    ) internal {\n        if (minted + amount > limit) revert LimitExceeded();\n        zchf.mintWithReserve(\n            target,\n            amount,\n            reserveContribution,\n            calculateCurrentFee()\n        );\n        minted += amount;\n\n        _checkCollateral(collateral_, price);\n        emit MintingUpdate(_collateralBalance(), price, minted, limit);\n    }\n\n    function _restrictMinting(uint256 period) internal {\n        uint256 horizon = block.timestamp + period;\n        if (horizon > cooldown) {\n            cooldown = horizon;\n        }\n    }\n\n    /**\n     * Repay some ZCHF. Requires an allowance to be in place. If too much is repaid, the call fails.\n     * It is possible to repay while there are challenges, but the collateral is locked until all is clear again.\n     *\n     * The repaid amount should fulfill the following equation in order to close the position, i.e. bring the minted amount to 0:\n     * minted = amount + zchf.calculateAssignedReserve(amount, reservePPM)\n     *\n     * Under normal circumstances, this implies:\n     * amount = minted * (1000000 - reservePPM)\n     *\n     * For example, if minted is 50 and reservePPM is 200000, it is necessary to repay 40 to be able to close the position.\n     */\n    function repay(uint256 amount) public {\n        IERC20(zchf).transferFrom(msg.sender, address(this), amount);\n        uint256 actuallyRepaid = IFrankencoin(zchf).burnWithReserve(\n            amount,\n            reserveContribution\n        );\n        _notifyRepaidInternal(actuallyRepaid);\n        emit MintingUpdate(_collateralBalance(), price, minted, limit);\n    }\n\n    error RepaidTooMuch(uint256 excess);\n\n    function _notifyRepaidInternal(uint256 amount) internal {\n        if (amount > minted) revert RepaidTooMuch(amount - minted);\n        minted -= amount;\n    }\n\n    /**\n     * Withdraw any ERC20 token that might have ended up on this address.\n     * Withdrawing collateral is subject to the same restrictions as withdrawCollateral(...).\n     */\n    function withdraw(\n        address token,\n        address target,\n        uint256 amount\n    ) external onlyOwner {\n        if (token == address(collateral)) {\n            withdrawCollateral(target, amount);\n        } else {\n            uint256 balance = _collateralBalance();\n            IERC20(token).transfer(target, amount);\n            require(balance == _collateralBalance()); // guard against double-entry-point tokens\n        }\n    }\n\n    /**\n     * Withdraw collateral from the position up to the extent that it is still well collateralized afterwards.\n     * Not possible as long as there is an open challenge or the contract is subject to a cooldown.\n     *\n     * Withdrawing collateral below the minimum collateral amount formally closes the position.\n     */\n    function withdrawCollateral(\n        address target,\n        uint256 amount\n    ) public onlyOwner noChallenge {\n        if (block.timestamp <= cooldown && !isClosed()) revert Hot();\n        uint256 balance = _withdrawCollateral(target, amount);\n        _checkCollateral(balance, price);\n    }\n\n    function _withdrawCollateral(\n        address target,\n        uint256 amount\n    ) internal returns (uint256) {\n        if (amount > 0) {\n            // Some weird tokens fail when trying to transfer 0 amounts\n            IERC20(collateral).transfer(target, amount);\n        }\n        uint256 balance = _collateralBalance();\n        if (balance < minimumCollateral && challengedAmount == 0) {\n            // This leaves a slightly unsatisfying possibility open: if the withdrawal happens due to a successful challenge,\n            // there might be a small amount of collateral left that is not withheld in case there are no other pending challenges.\n            // The only way to cleanly solve this would be to have two distinct cooldowns, one for minting and one for withdrawals.\n            _close();\n        }\n\n        emit MintingUpdate(_collateralBalance(), price, minted, limit);\n        return balance;\n    }\n\n    /**\n     * This invariant must always hold and must always be checked when any of the three\n     * variables change in an adverse way.\n     */\n    function _checkCollateral(\n        uint256 collateralReserve,\n        uint256 atPrice\n    ) internal view {\n        if (collateralReserve * atPrice < minted * ONE_DEC18)\n            revert InsufficientCollateral();\n    }\n\n    error ChallengeTooSmall();\n\n    function notifyChallengeStarted(uint256 size) external onlyHub {\n        // require minimum size, note that collateral balance can be below minimum if it was partially challenged before\n        if (size < minimumCollateral && size < _collateralBalance())\n            revert ChallengeTooSmall();\n        if (size == 0) revert ChallengeTooSmall();\n        challengedAmount += size;\n    }\n\n    /**\n     * @notice check whether challenge can be averted\n     * @param _collateralAmount   amount of collateral challenged (dec18)\n     * @param _bidAmountZCHF      bid amount in ZCHF (dec18)\n     * @return true if challenge can be averted\n     */\n    function tryAvertChallenge(\n        uint256 _collateralAmount,\n        uint256 _bidAmountZCHF,\n        uint256 challengeEnd\n    ) external onlyHub returns (bool) {\n        if (block.timestamp >= expiration) {\n            return false; // position expired, let every challenge succeed\n        } else {\n            uint256 p_ = price;\n            if (type(uint256).max / _collateralAmount < p_) {\n                // note that _collateralAmount > 0 is assumed\n                return false; // price was set absurdly high, let challenge succeed\n            } else if (_bidAmountZCHF * ONE_DEC18 >= p_ * _collateralAmount) {\n                // Challenge cannot be started and averted in same block\n                // This prevents a malicious challenger + bidder to postpone minting forver without risking anything\n                require(block.timestamp != challengeEnd - challengePeriod);\n\n                // challenge averted, bid is high enough\n                challengedAmount -= _collateralAmount;\n\n                // Don't allow minter to close the position immediately so challenge can be repeated before\n                // the owner has a chance to mint more on an undercollateralized position\n                _restrictMinting(1 days);\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    /**\n     * Notifies the position that a challenge was successful.\n     * Triggers the payout of the challenged part of the collateral.\n     * Everything else is assumed to be handled by the hub.\n     *\n     * @param _bidder   address of the bidder that receives the collateral\n     * @param _bid      bid amount in ZCHF (dec18)\n     * @param _size     size of the collateral bid for (dec 18)\n     * @return (position owner, effective bid size in ZCHF, effective challenge size in ZCHF, repaid amount, reserve ppm)\n     */\n    function notifyChallengeSucceeded(\n        address _bidder,\n        uint256 _bid,\n        uint256 _size\n    ) external onlyHub returns (address, uint256, uint256, uint32) {\n        challengedAmount -= _size;\n        uint256 repayment = minted; // Default repayment is the amount the owner has minted\n        uint256 colBal = _collateralBalance();\n        if (_size > colBal) {\n            // Challenge is larger than the position. This can for example happen if there are multiple concurrent\n            // challenges that exceed the collateral balance in size. In this case, we need to redimension the bid and\n            // tell the caller that a part of the bid needs to be returned to the bidder.\n            _bid = _mulDiv(_bid, colBal, _size);\n            _size = colBal;\n        } else if (_size < colBal) {\n            repayment = _mulDiv(repayment, _size, colBal);\n        }\n\n        _notifyRepaidInternal(repayment); // we assume the caller takes care of the actual repayment\n        _withdrawCollateral(_bidder, _size); // transfer collateral to the bidder and emit update\n\n        // Give time for additional challenges before the owner can mint again\n        // In particular, the owner might have added collateral only seconds before the challenge ended, preventing a close\n        _restrictMinting(3 days);\n\n        return (owner, _bid, repayment, reserveContribution);\n    }\n\n    error Expired();\n\n    modifier alive() {\n        if (block.timestamp >= expiration) revert Expired();\n        _;\n    }\n\n    error Hot();\n\n    modifier noCooldown() {\n        if (block.timestamp <= cooldown) revert Hot();\n        _;\n    }\n\n    error Challenged();\n\n    modifier noChallenge() {\n        if (challengedAmount > 0) revert Challenged();\n        _;\n    }\n\n    error NotHub();\n\n    modifier onlyHub() {\n        if (msg.sender != address(hub)) revert NotHub();\n        _;\n    }\n}\n"
    },
    "contracts/PositionFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Position.sol\";\nimport \"./interface/IFrankencoin.sol\";\n\ncontract PositionFactory {\n    /**\n     * Create a completely new position in a newly deployed contract.\n     * Must be called through minting hub to be recognized as valid position.\n     */\n    function createNewPosition(\n        address _owner,\n        address _zchf,\n        address _collateral,\n        uint256 _minCollateral,\n        uint256 _initialLimit,\n        uint256 _initPeriod,\n        uint256 _duration,\n        uint256 _challengePeriod,\n        uint32 _yearlyInterestPPM,\n        uint256 _liqPrice,\n        uint32 _reserve\n    ) external returns (address) {\n        return\n            address(\n                new Position(\n                    _owner,\n                    msg.sender,\n                    _zchf,\n                    _collateral,\n                    _minCollateral,\n                    _initialLimit,\n                    _initPeriod,\n                    _duration,\n                    _challengePeriod,\n                    _yearlyInterestPPM,\n                    _liqPrice,\n                    _reserve\n                )\n            );\n    }\n\n    /**\n     * @notice clone an existing position. This can be a clone of another clone,\n     * or an original position.\n     * @param _existing address of the position we want to clone\n     * @return address of the newly created clone position\n     */\n    function clonePosition(address _existing) external returns (address) {\n        Position existing = Position(_existing);\n        Position clone = Position(createClone(existing.original()));\n        return address(clone);\n    }\n\n    // copied from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n    function createClone(address target) internal returns (address result) {\n        bytes20 targetBytes = bytes20(target);\n        assembly {\n            let clone := mload(0x40)\n            mstore(\n                clone,\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n            )\n            mstore(add(clone, 0x14), targetBytes)\n            mstore(\n                add(clone, 0x28),\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n            )\n            result := create(0, clone, 0x37)\n        }\n        require(result != address(0), \"ERC1167: create failed\");\n    }\n}\n"
    },
    "contracts/StablecoinBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interface/IERC20.sol\";\nimport \"./interface/IERC677Receiver.sol\";\nimport \"./interface/IFrankencoin.sol\";\n\n/**\n * A minting contract for another Swiss franc stablecoin ('source stablecoin') that we trust.\n */\ncontract StablecoinBridge {\n    IERC20 public immutable chf; // the source stablecoin\n    IFrankencoin public immutable zchf; // the Frankencoin\n\n    /**\n     * The time horizon after which this bridge expires and needs to be replaced by a new contract.\n     */\n    uint256 public immutable horizon;\n\n    /**\n     * The maximum amount of outstanding converted source stablecoins.\n     */\n    uint256 public immutable limit;\n\n    constructor(address other, address zchfAddress, uint256 limit_) {\n        chf = IERC20(other);\n        zchf = IFrankencoin(zchfAddress);\n        horizon = block.timestamp + 52 weeks;\n        limit = limit_;\n    }\n\n    /**\n     * Convenience method for mint(msg.sender, amount)\n     */\n    function mint(uint256 amount) external {\n        mintTo(msg.sender, amount);\n    }\n\n    /**\n     * Mint the target amount of Frankencoins, taking the equal amount of source coins from the sender.\n     * This only works if an allowance for the source coins has been set and the caller has enough of them.\n     */\n    function mintTo(address target, uint256 amount) public {\n        chf.transferFrom(msg.sender, address(this), amount);\n        _mintInternal(target, amount);\n    }\n\n    function _mintInternal(address target, uint256 amount) internal {\n        require(block.timestamp <= horizon, \"expired\");\n        require(chf.balanceOf(address(this)) <= limit, \"limit\");\n        zchf.mint(target, amount);\n    }\n\n    function burn(uint256 amount) external {\n        _burnInternal(msg.sender, msg.sender, amount);\n    }\n\n    /**\n     * Burn the indicated amount of Frankencoin and send the same number of source coin to the caller.\n     * No allowance required.\n     */\n    function burnFrom(address target, uint256 amount) external {\n        _burnInternal(msg.sender, target, amount);\n    }\n\n    function _burnInternal(\n        address zchfHolder,\n        address target,\n        uint256 amount\n    ) internal {\n        zchf.burnFrom(zchfHolder, amount);\n        chf.transfer(target, amount);\n    }\n\n    /**\n     * Supporting the direct minting and burning through ERC-677, if supported by the sent coin.\n     */\n    function onTokenTransfer(\n        address from,\n        uint256 amount,\n        bytes calldata\n    ) external returns (bool) {\n        if (msg.sender == address(chf)) {\n            _mintInternal(from, amount);\n        } else if (msg.sender == address(zchf)) {\n            _burnInternal(address(this), from, amount);\n        } else {\n            require(false, \"unsupported token\");\n        }\n        return true;\n    }\n}\n"
    },
    "contracts/test/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}"
    },
    "contracts/test/MintingHubTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Strings.sol\";\nimport \"./TestToken.sol\";\nimport \"../Equity.sol\";\nimport \"../utils/Ownable.sol\";\nimport \"../Position.sol\";\nimport \"../MintingHub.sol\";\nimport \"../StablecoinBridge.sol\";\nimport \"../interface/IPosition.sol\";\nimport \"../interface/IReserve.sol\";\nimport \"../interface/IFrankencoin.sol\";\nimport \"../interface/IERC20.sol\";\n\ncontract MintingHubTest {\n    MintingHub hub;\n    StablecoinBridge swap;\n\n    IERC20 xchf;\n    TestToken col;\n    IFrankencoin zchf;\n\n    User alice;\n    User bob;\n\n    address latestPosition;\n    uint256 latestChallenge;\n\n    constructor(address hub_, address swap_) {\n        hub = MintingHub(hub_);\n        swap = StablecoinBridge(swap_);\n        col = new TestToken(\"Some Collateral\", \"COL\", uint8(0));\n        xchf = swap.chf();\n        zchf = swap.zchf();\n        alice = new User(zchf);\n        bob = new User(zchf);\n        require(\n            zchf.reserve().totalSupply() == 0,\n            Strings.toString(zchf.reserve().totalSupply())\n        );\n    }\n\n    function initiateEquity() public {\n        require(\n            zchf.equity() == 1003849100000000000001,\n            Strings.toString(zchf.equity())\n        );\n        require(\n            zchf.reserve().totalSupply() == 0,\n            Strings.toString(zchf.reserve().totalSupply())\n        );\n        // ensure there is at least 25'000 ZCHF in equity\n        bob.obtainFrankencoins(swap, 10000 ether);\n        bob.invest(1000 ether);\n        require(\n            zchf.reserve().totalSupply() == 1000 ether,\n            Strings.toString(zchf.reserve().totalSupply())\n        );\n        bob.invest(9000 ether);\n        alice.obtainFrankencoins(swap, 15000 ether);\n        alice.invest(15000 ether);\n        require(zchf.equity() > 25000 ether, Strings.toString(zchf.equity()));\n    }\n\n    function initiateAndDenyPosition() public {\n        alice.obtainFrankencoins(swap, 1000 ether);\n        address pos = alice.initiatePosition(col, hub);\n        bob.deny(hub, pos);\n    }\n\n    function initiatePosition() public {\n        alice.obtainFrankencoins(swap, 1000 ether);\n        latestPosition = alice.initiatePosition(col, hub);\n        require(col.balanceOf(address(alice)) == 0);\n    }\n\n    function testWithdraw() public {\n        alice.testWithdraw(swap, Position(latestPosition));\n    }\n\n    function letAliceMint() public {\n        alice.mint(latestPosition, 1); // test small amount to provoke rounding error\n        alice.transferOwnership(latestPosition, address(bob));\n        uint256 bobbalance = zchf.balanceOf(address(bob));\n        bob.mint(latestPosition, 7);\n        require(zchf.balanceOf(address(bob)) > bobbalance);\n        bob.transferOwnership(latestPosition, address(alice));\n        alice.mint(latestPosition, 0);\n        alice.mint(latestPosition, 100000 * (10 ** 18) - 8);\n        alice.adjustPosition(latestPosition);\n        require(Position(latestPosition).minted() == 100000 ether);\n    }\n\n    function letBobMint() public {\n        bob.mint(latestPosition, 1);\n    }\n\n    uint256 first;\n    uint256 second;\n\n    function letBobChallengePart1() public {\n        col.mint(address(bob), 1300);\n\n        // three challenges in parallel :)\n        first = bob.challenge(hub, latestPosition, 300);\n        require(hub.isChallengeOpen(first));\n        second = bob.challenge(hub, latestPosition, 400);\n        latestChallenge = bob.challenge(hub, latestPosition, 500);\n    }\n\n    function letBobChallengePart2() public returns (uint256) {\n        alice.avertChallenge(hub, swap, first);\n        bob.obtainFrankencoins(swap, 30_000 ether);\n        bob.bid(hub, second, 10_000 ether);\n        bob.bid(hub, latestChallenge, 20_000 ether);\n        (address challenger, , , , , uint256 bid) = hub.challenges(\n            latestChallenge\n        );\n        require(challenger != address(0x0), \"challenge not found\");\n        require(bid == 20_000 ether);\n        return latestChallenge;\n    }\n\n    function endChallenges() public {\n        uint256 reservesBefore = zchf.balanceOf(address(zchf.reserve())) -\n            zchf.equity();\n        // revertWith(\"reserves before \", reservesBefore);  // 21000.000000000000000000\n        endChallenge(latestChallenge); // can be absorbed with equity\n        uint256 reservesAfter = zchf.balanceOf(address(zchf.reserve())) -\n            zchf.equity();\n        require(reservesBefore - reservesAfter == 10000 ether); // latest challenge was 50'000 with 20% reserve\n        // revertWith(\"reserves before \", reservesAfter);  // 11000.000000000000000000\n        // revertWith(\"reserves before \", zchf.equity());     //  8601.000000000000000003\n        splitAndEnd(latestChallenge - 1);\n    }\n\n    function getChallenge(\n        uint256 challengeNumber\n    ) public view returns (uint256, uint256) {\n        (, , uint256 size1, , , uint256 bid1) = hub.challenges(challengeNumber);\n        return (size1, bid1);\n    }\n\n    function splitAndEnd(uint256 challengeNumber) public {\n        (uint256 size1, uint256 bid1) = getChallenge(challengeNumber);\n        // revertWith(\"bid1 \", bid1); // 10000000000000000000000\n        uint256 other = hub.splitChallenge(latestChallenge - 1, 101);\n        (uint256 size2, uint256 bid2) = getChallenge(other);\n        (uint256 size3, uint256 bid3) = getChallenge(challengeNumber);\n        // revertWith(\"bid2 \", bid2); // 2525000000000000000000\n        require(size1 == size2 + size3);\n        require(bid1 == bid2 + bid3);\n        endChallenge(challengeNumber); // devastating loss, equity wiped out\n        // revertWith(\"minted \", Position(latestPosition).minted()); 20100000000000000000000\n        alice.repay(\n            Position(latestPosition),\n            Position(latestPosition).minted() - 100\n        );\n        // revertWith(\"minted \", Position(latestPosition).minted());\n        endChallenge(other);\n        require(zchf.equity() == 0);\n    }\n\n    function endChallenge(uint256 challengeNumber) public {\n        uint256 equityBefore = zchf.equity();\n        (address challenger, IPosition p, uint256 size, , , uint256 bid) = hub\n            .challenges(challengeNumber);\n        require(challenger != address(0x0), \"challenge not found\");\n        hub.end(challengeNumber, true);\n        User user = challenger == address(bob) ? bob : alice;\n        user.reclaimCollateral(hub, p.collateral(), size);\n\n        uint256 borrowedAmount = 50000 * (10 ** 18);\n        uint256 reserve = (borrowedAmount * p.reserveContribution()) / 1000000;\n        uint256 reward = (bid * 20000) / 1000000;\n        uint256 missing = borrowedAmount + reward - bid - reserve;\n        uint256 equityAfter = zchf.equity();\n        uint256 assigned = zchf.calculateAssignedReserve(\n            1000000,\n            uint32(200000)\n        );\n        if (equityBefore >= missing) {\n            string memory message = string(\n                abi.encodePacked(\n                    Strings.toString(equityBefore),\n                    \" \",\n                    Strings.toString(equityAfter),\n                    \" \",\n                    Strings.toString(missing)\n                )\n            );\n            require(equityAfter + missing == equityBefore, message);\n        } else {\n            // revertWith(\"reserve \", assigned); // 50601000000000000000003\n            require(equityAfter == 0, Strings.toString(equityAfter)); // wiped out equity\n            require(\n                assigned == 0 ||\n                    zchf.calculateAssignedReserve(1000000, 200000) < assigned\n            );\n            // theoretical minter reserve at this point: 3000.000000000000000000, actual: 0\n        }\n    }\n\n    uint256 number;\n\n    function testExcessiveChallengePart1() public {\n        // revertWith(\"reserve \", zchf.balanceOf(address(zchf.reserve()))); // 50601000000000000000003\n        Position pos = Position(latestPosition);\n        //uint256 minted = pos.minted();\n        //        require(minted == 10000 ether, Strings.toString(minted)); // assumes the other tests have been run before\n        uint256 collateralLeft = pos.collateral().balanceOf(latestPosition);\n        require(collateralLeft == 100, Strings.toString(collateralLeft)); // test assumption\n        number = bob.challenge(hub, latestPosition, 101); // challenge more than is left\n        //   alice.repay(pos, 5000 ether);\n        // require(pos.minted() + 5000 ether == minted);\n        // minted is now 9999.999999999999995000\n    }\n\n    function testExcessiveChallengePart2() public {\n        bob.avertChallenge(hub, swap, number);\n    }\n\n    function restructure() public {\n        address[] memory empty = new address[](0);\n        zchf.reserve().checkQualified(address(alice), empty);\n        zchf.reserve().checkQualified(address(bob), empty);\n        address[] memory list = new address[](1);\n        list[0] = address(bob);\n        Equity equity = Equity(address(zchf.reserve()));\n        uint256 totalVotes = equity.totalVotes();\n        uint256 supplyBefore = equity.totalSupply();\n        uint256 bobBefore = equity.balanceOf(address(bob));\n        alice.restructure(empty, list);\n        zchf.reserve().checkQualified(address(alice), empty);\n        require(equity.totalVotes() < totalVotes);\n        require(equity.balanceOf(address(bob)) == 0);\n        uint256 supplyAfter = equity.totalSupply();\n        require(supplyAfter == supplyBefore - bobBefore);\n        // revertWith(\"Shortfall: \", zchf.minterReserve() - zchf.balanceOf(address(zchf.reserve()))); // 1000000000000000000000\n        alice.obtainFrankencoins(swap, 4000 ether);\n        alice.invest(4000 ether);\n        require(supplyAfter + 1000 ether == equity.totalSupply());\n    }\n\n    // poor man's replacement for console.out in solidity...\n    function revertWith(\n        string memory message,\n        uint256 errorNumber\n    ) public pure {\n        revert(\n            string(abi.encodePacked(message, Strings.toString(errorNumber)))\n        );\n    }\n\n    function challengeExpiredPosition() public {\n        Position pos = Position(latestPosition);\n        require(pos.calculateCurrentFee() == 0);\n        require(pos.expiration() < block.timestamp);\n        uint256 size = pos.collateral().balanceOf(latestPosition);\n        latestChallenge = bob.challenge(hub, latestPosition, size);\n        // revertWith(\"col left \", size); // 100\n        bob.obtainFrankencoins(swap, 5000 ether);\n    }\n\n    function bidNearEndOfChallenge() public {\n        (, , , uint256 end, , ) = hub.challenges(latestChallenge);\n        require(block.timestamp < end);\n        require(end < block.timestamp + 30 minutes);\n        bob.bid(hub, latestChallenge, 5000 ether);\n        (, , , uint256 end2, , ) = hub.challenges(latestChallenge);\n        require(end2 > end); // time should be increased near end of auction\n    }\n\n    function endLastChallenge() public {\n        Position pos = Position(latestPosition);\n        hub.end(latestChallenge, false);\n        require(pos.collateral().balanceOf(latestPosition) == 0);\n    }\n}\n\ncontract User {\n    IFrankencoin zchf;\n\n    constructor(IFrankencoin zchf_) {\n        zchf = zchf_;\n    }\n\n    function obtainFrankencoins(\n        StablecoinBridge bridge,\n        uint256 amount\n    ) public {\n        TestToken xchf = TestToken(address(bridge.chf()));\n        xchf.mint(address(this), amount);\n        xchf.approve(address(bridge), amount);\n        require(xchf.allowance(address(this), address(bridge)) == amount);\n        bridge.mint(amount);\n    }\n\n    function invest(uint256 amount) public {\n        zchf.transferAndCall(address(zchf.reserve()), amount, \"\");\n    }\n\n    function transfer(IERC20 token, address target, uint256 amount) public {\n        token.transfer(target, amount);\n    }\n\n    function initiatePosition(\n        TestToken col,\n        MintingHub hub\n    ) public returns (address) {\n        col.mint(address(this), 1001);\n        col.approve(address(hub), 1001);\n        uint256 balanceBefore = zchf.balanceOf(address(this));\n        address pos = hub.openPositionOneWeek(\n            address(col),\n            100,\n            1001,\n            1000000 ether,\n            100 days,\n            1 days,\n            25000,\n            100 * (10 ** 36),\n            200000\n        );\n        require(\n            (balanceBefore - hub.OPENING_FEE()) == zchf.balanceOf(address(this))\n        );\n        Position(pos).adjust(0, 1001, 200 * (10 ** 36));\n        Position(pos).adjustPrice(100 * (10 ** 36));\n        return pos;\n    }\n\n    function transferOwnership(address pos, address newOwner) public {\n        Position(pos).transferOwnership(newOwner);\n    }\n\n    function deny(MintingHub, address pos) public {\n        address[] memory empty = new address[](0);\n        Position(pos).deny(empty, \"not approved\");\n    }\n\n    function adjustPosition(address pos) public {\n        Position position = Position(pos);\n        uint256 minted = position.minted();\n        uint256 col = position.collateral().balanceOf(pos);\n        uint256 price = position.price();\n        position.adjust(minted - 100, col - 1, price);\n        position.collateral().approve(pos, 1);\n        position.adjust(minted, col, price);\n        require(position.minted() == minted);\n        require(position.collateral().balanceOf(pos) == col);\n        require(position.price() == price);\n    }\n\n    function repay(Position pos, uint256 amount) public {\n        uint256 balanceBefore = zchf.balanceOf(address(this));\n        require(balanceBefore >= amount);\n        pos.repay(amount);\n        require(zchf.balanceOf(address(this)) + amount == balanceBefore);\n    }\n\n    function testWithdraw(StablecoinBridge bridge, Position pos) public {\n        IERC20 col = pos.collateral();\n        obtainFrankencoins(bridge, 1);\n        bridge.zchf().transfer(address(pos), 1);\n        uint256 initialBalance = col.balanceOf(address(pos));\n        pos.withdraw(address(bridge.zchf()), address(this), 1);\n        Position(pos).withdraw(address(col), address(this), 1);\n        require(col.balanceOf(address(pos)) == initialBalance - 1);\n        require(col.balanceOf(address(this)) == 1);\n    }\n\n    function mint(address pos, uint256 amount) public {\n        uint256 balanceBefore = zchf.balanceOf(address(this));\n        IPosition(pos).mint(address(this), amount);\n        uint256 obtained = zchf.balanceOf(address(this)) - balanceBefore;\n        uint256 usable = IPosition(pos).getUsableMint(amount, true);\n        require(\n            obtained == usable,\n            string(\n                abi.encodePacked(\n                    Strings.toString(usable),\n                    \" should be \",\n                    Strings.toString(obtained)\n                )\n            )\n        );\n        uint256 usableBeforeFee = IPosition(pos).getUsableMint(amount, false);\n        require(\n            usable <= 100 || usableBeforeFee > usable,\n            string(\n                abi.encodePacked(\n                    Strings.toString(usableBeforeFee),\n                    \" should be larger than \",\n                    Strings.toString(usable)\n                )\n            )\n        );\n    }\n\n    function challenge(\n        MintingHub hub,\n        address pos,\n        uint256 size\n    ) public returns (uint256) {\n        IERC20 col = IPosition(pos).collateral();\n        col.approve(address(hub), size);\n        return hub.launchChallenge(pos, size, IPosition(pos).price());\n    }\n\n    function avertChallenge(\n        MintingHub hub,\n        StablecoinBridge swap,\n        uint256 first\n    ) public {\n        {\n            (, IPosition p, uint256 size, , , ) = hub.challenges(first);\n            uint256 amount = (size * p.price()) / 10 ** 18;\n            obtainFrankencoins(swap, amount);\n            hub.bid(first, amount, size); // avert challenge\n        }\n        (address challenger, , , , , ) = hub.challenges(first);\n        require(challenger == address(0x0), \"challenge not averted\");\n        require(!hub.isChallengeOpen(first));\n    }\n\n    function bid(MintingHub hub, uint256 number, uint256 amount) public {\n        (, , uint256 size, , , ) = hub.challenges(number);\n        hub.bid(number, amount, size);\n        require(hub.minBid(number) > amount); // min bid must increase\n    }\n\n    function reclaimCollateral(\n        MintingHub hub,\n        IERC20 collateral,\n        uint256 expectedAmount\n    ) public {\n        uint256 balanceBefore = collateral.balanceOf(address(this));\n        hub.returnPostponedCollateral(address(collateral), address(this));\n        uint256 balanceAfter = collateral.balanceOf(address(this));\n        require(balanceBefore + expectedAmount == balanceAfter);\n    }\n\n    function restructure(\n        address[] calldata helpers,\n        address[] calldata addressesToWipe\n    ) public {\n        Equity(address(zchf.reserve())).restructureCapTable(\n            helpers,\n            addressesToWipe\n        );\n    }\n}\n"
    },
    "contracts/test/MockVOLToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../utils/ERC20.sol\";\n\ncontract MockVOLToken is ERC20 {\n    constructor() ERC20(18) {\n        _mint(msg.sender, 1_000_000 * 1e18);\n    }\n\n    function name() external pure override returns (string memory) {\n        return \"VOL volatile mock token\";\n    }\n\n    function symbol() external pure override returns (string memory) {\n        return \"VOL\";\n    }\n\n    function mint(address _account, uint256 _amount) external {\n        _mint(_account, _amount);\n    }\n}\n"
    },
    "contracts/test/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}"
    },
    "contracts/test/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Math.sol\";\nimport \"./SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}"
    },
    "contracts/test/TestToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../utils/ERC20.sol\";\n\ncontract TestToken is ERC20 {\n    string public name;\n    string public symbol;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 dec\n    ) ERC20(dec) {\n        name = name_;\n        symbol = symbol_;\n\n        _mint(msg.sender, 1_000_000 * 1e18);\n    }\n\n    function mint(address _account, uint256 _amount) external {\n        _mint(_account, _amount);\n    }\n}\n"
    },
    "contracts/utils/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Copied and adjusted from OpenZeppelin\n// Adjustments:\n// - modifications to support ERC-677\n// - removed require messages to save space\n// - removed unnecessary require statements\n// - removed GSN Context\n// - upgraded to 0.8 to drop SafeMath\n// - let name() and symbol() be implemented by subclass\n// - infinite allowance support, with 2^255 and above considered infinite\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC20.sol\";\nimport \"../interface/IERC677Receiver.sol\";\n\n/**\n * @dev Implementation of the `IERC20` interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using `_mint`.\n * For a generic mechanism see `ERC20Mintable`.\n *\n * *For a detailed writeup see our guide [How to implement supply\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See `IERC20.approve`.\n */\n\nabstract contract ERC20 is IERC20 {\n    mapping(address account => uint256 balance) private _balances;\n\n    mapping(address account => mapping(address spender => uint256 allowance))\n        private _allowances;\n\n    uint256 internal constant INFINITY = (1 << 255);\n\n    uint256 private _totalSupply;\n\n    uint8 public immutable override decimals;\n\n    // Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/4139/files#diff-fa792f7d08644eebc519dac2c29b00a54afc4c6a76b9ef3bba56c8401fe674f6\n    // Indicates an error related to the current balance of a sender. Used in transfers.\n    error ERC20InsufficientBalance(\n        address sender,\n        uint256 balance,\n        uint256 needed\n    );\n    // Indicates a failure with the spender’s allowance. Used in transfers.\n    error ERC20InsufficientAllowance(\n        address spender,\n        uint256 allowance,\n        uint256 needed\n    );\n\n    constructor(uint8 _decimals) {\n        decimals = _decimals;\n    }\n\n    /**\n     * @dev See `IERC20.totalSupply`.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See `IERC20.balanceOf`.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See `IERC20.transfer`.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.allowance`.\n     */\n    function allowance(\n        address owner,\n        address spender\n    ) external view override returns (uint256) {\n        return _allowance(owner, spender);\n    }\n\n    function _allowance(\n        address owner,\n        address spender\n    ) internal view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See `IERC20.approve`.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(\n        address spender,\n        uint256 value\n    ) external override returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.transferFrom`.\n     *\n     * Emits an `Approval` event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of `ERC20`;\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `value`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        _transfer(sender, recipient, amount);\n        uint256 currentAllowance = _allowance(sender, msg.sender);\n        if (currentAllowance < INFINITY) {\n            // Only decrease the allowance if it was not set to 'infinite'\n            // Documented in /doc/infiniteallowance.md\n            if (currentAllowance < amount)\n                revert ERC20InsufficientAllowance(\n                    sender,\n                    currentAllowance,\n                    amount\n                );\n            _approve(sender, msg.sender, currentAllowance - amount);\n        }\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to `transfer`, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a `Transfer` event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(recipient != address(0));\n\n        _beforeTokenTransfer(sender, recipient, amount);\n        if (_balances[sender] < amount)\n            revert ERC20InsufficientBalance(sender, _balances[sender], amount);\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n    }\n\n    // ERC-677 functionality, can be useful for swapping and wrapping tokens\n    function transferAndCall(\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external override returns (bool) {\n        bool success = transfer(recipient, amount);\n        if (success) {\n            success = IERC677Receiver(recipient).onTokenTransfer(\n                msg.sender,\n                amount,\n                data\n            );\n        }\n        return success;\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a `Transfer` event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address recipient, uint256 amount) internal virtual {\n        require(recipient != address(0));\n\n        _beforeTokenTransfer(address(0), recipient, amount);\n\n        _totalSupply += amount;\n        _balances[recipient] += amount;\n        emit Transfer(address(0), recipient, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a `Transfer` event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _totalSupply -= amount;\n        _balances[account] -= amount;\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an `Approval` event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/utils/ERC20PermitLight.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Copied from https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol\n// and modified it.\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20.sol\";\n\nabstract contract ERC20PermitLight is ERC20 {\n   \n   /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(address account => uint256 nonce) public nonces;\n\n  /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        unchecked { // unchecked to save a little gas with the nonce increment...\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"),\n                                bytes32(0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n            _approve(recoveredAddress, spender, value);\n        }\n    }\n\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    //keccak256(\"EIP712Domain(uint256 chainId,address verifyingContract)\");\n                    bytes32(0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n}"
    },
    "contracts/utils/MathUtil.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/** \n * @title Functions for share valuation\n */\ncontract MathUtil {\n\n    uint256 internal constant ONE_DEC18 = 10**18;\n    uint256 internal constant THRESH_DEC18 = 10000000000000000; //0.01\n    /**\n     * @notice Cubic root with Halley approximation\n     *         Number 1e18 decimal\n     * @param _v     number for which we calculate x**(1/3)\n     * @return returns _v**(1/3)\n     */\n    function _cubicRoot(uint256 _v) internal pure returns (uint256) {\n        uint256 x = ONE_DEC18;\n        uint256 xOld;\n        bool cond;\n        do {\n            xOld = x;\n            uint256 powX3 = _mulD18(_mulD18(x, x), x);\n            x = _mulD18(x, _divD18( (powX3 + 2 * _v) , (2 * powX3 + _v)));\n            cond = xOld > x ? xOld - x > THRESH_DEC18 : x - xOld > THRESH_DEC18;\n        } while ( cond );\n        return x;\n    }\n\n    /**\n     * Divides and multiplies, with divisor > 0.\n     */\n    function _mulDiv(uint256 x, uint256 factor, uint256 divisor) internal pure returns(uint256) {\n        if (factor == 0){\n            return 0;\n        } else if (type(uint256).max / factor > x){\n            // divide first to avoid overflow\n            return x > factor ? x / divisor * factor : factor / divisor * x;\n        } else {\n            return x * factor / divisor;\n        }\n    }\n\n    function _mulD18(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        return _a * _b / ONE_DEC18;\n    }\n\n    function _divD18(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        return (_a * ONE_DEC18) / _b ;\n    }\n\n    function _power3(uint256 _x) internal pure returns(uint256) {\n        return _mulD18(_mulD18(_x, _x), _x);\n    }\n\n}"
    },
    "contracts/utils/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n//\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n//\n// Modifications:\n// - Replaced Context._msgSender() with msg.sender\n// - Made leaner\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n */\ncontract Ownable {\n\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    error NotOwner();\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        setOwner(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function setOwner(address newOwner) internal {\n        require(newOwner != address(0x0));\n        address oldOwner = owner;\n        owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    function requireOwner(address sender) internal view {\n        if (owner != sender) revert NotOwner();\n    }\n\n    modifier onlyOwner() {\n        requireOwner(msg.sender);\n        _;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
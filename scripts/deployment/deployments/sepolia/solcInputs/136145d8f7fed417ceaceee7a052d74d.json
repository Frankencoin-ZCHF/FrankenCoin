{
  "language": "Solidity",
  "sources": {
    "contracts/Equity.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"./Frankencoin.sol\";\nimport \"./IERC677Receiver.sol\";\nimport \"./ERC20PermitLight.sol\";\nimport \"./MathUtil.sol\";\nimport \"./IReserve.sol\";\n\n/** \n * @title Reserve pool for the Frankencoin\n */\ncontract Equity is ERC20PermitLight, MathUtil, IReserve {\n\n    uint32 public constant VALUATION_FACTOR = 3;\n    uint256 public constant MIN_HOLDING_DURATION = 90*10000; // about 90 days\n    uint32 private constant QUORUM = 300;\n\n    Frankencoin immutable public zchf;\n\n    // should hopefully be grouped into one storage slot\n    uint64 private totalVotesAnchorTime;\n    uint192 private totalVotesAtAnchor;\n\n    mapping (address => address) public delegates;\n    mapping (address => uint64) private voteAnchor;\n\n    event Delegation(address indexed from, address indexed to);\n\n    constructor(Frankencoin zchf_) ERC20(18) {\n        zchf = zchf_;\n    }\n\n    function name() override external pure returns (string memory) {\n        return \"Frankencoin Pool Share\";\n    }\n\n    function symbol() override external pure returns (string memory) {\n        return \"FPS\";\n    }\n\n    function price() public view returns (uint256){\n        return VALUATION_FACTOR * zchf.equity() * ONE_DEC18 / totalSupply();\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) override internal {\n        super._beforeTokenTransfer(from, to, amount);\n        if (amount > 0){\n            uint256 roundingLoss = adjustRecipientVoteAnchor(to, amount);\n            adjustTotalVotes(from, amount, roundingLoss);\n        }\n    }\n\n    function canRedeem() external view returns (bool){\n        return canRedeem(msg.sender);\n    }\n\n    function canRedeem(address owner) public view returns (bool) {\n        return block.number - voteAnchor[owner] >= MIN_HOLDING_DURATION;\n    }\n\n     /**\n     * @notice Decrease the total votes anchor when tokens lose their voting power due to being moved\n     * @param from      sender\n     * @param amount    amount to be sent\n     */\n    function adjustTotalVotes(address from, uint256 amount, uint256 roundingLoss) internal {\n        uint256 lostVotes = from == address(0x0) ? 0 : (block.number - voteAnchor[from]) * amount;\n        totalVotesAtAnchor = uint192(totalVotes() - roundingLoss - lostVotes);\n        totalVotesAnchorTime = uint64(block.number);\n    }\n\n    /**\n     * @notice the vote anchor of the recipient is moved forward such that the number of calculated\n     * votes does not change despite the higher balance.\n     * @param to        receiver address\n     * @param amount    amount to be received\n     * @return the number of votes lost due to rounding errors\n     */\n    function adjustRecipientVoteAnchor(address to, uint256 amount) internal returns (uint256){\n        if (to != address(0x0)) {\n            uint256 recipientVotes = votes(to); // for example 21 if 7 shares were held for 3 blocks\n            uint256 newbalance = balanceOf(to) + amount; // for example 11 if 4 shares are added\n            voteAnchor[to] = uint64(block.number - recipientVotes / newbalance); // new example anchor is only 21 / 11 = 1 block in the past\n            return recipientVotes % newbalance; // we have lost 21 % 11 = 10 votes\n        } else {\n            // optimization for burn, vote anchor of null address does not matter\n            return 0;\n        }\n    }\n\n    function votes(address holder) public view returns (uint256) {\n        return balanceOf(holder) * (block.number - voteAnchor[holder]);\n    }\n\n    function totalVotes() public view returns (uint256) {\n        return totalVotesAtAnchor + totalSupply() * (block.number - totalVotesAnchorTime);\n    }\n\n    function isQualified(address sender, address[] calldata helpers) external override view returns (bool) {\n        uint256 _votes = votes(sender);\n        for (uint i=0; i<helpers.length; i++){\n            address current = helpers[i];\n            require(current != sender);\n            require(canVoteFor(sender, current));\n            for (uint j=i+1; j<helpers.length; j++){\n                require(current != helpers[j]); // ensure helper unique\n            }\n            _votes += votes(current);\n        }\n        return _votes * 10000 >= QUORUM * totalVotes();\n    }\n\n    function delegateVoteTo(address delegate) external {\n        delegates[msg.sender] = delegate;\n        emit Delegation(msg.sender, delegate);\n    }\n\n    function canVoteFor(address delegate, address owner) public view returns (bool) {\n        if (owner == delegate){\n            return true;\n        } else if (owner == address(0x0)){\n            return false;\n        } else {\n            return canVoteFor(delegate, delegates[owner]);\n        }\n    }\n\n    function onTokenTransfer(address from, uint256 amount, bytes calldata) external returns (bool) {\n        require(msg.sender == address(zchf), \"caller must be zchf\");\n        if (totalSupply() == 0){\n            require(amount >= ONE_DEC18, \"initial deposit must >= 1\");\n            // initialize with 1000 shares for 1 ZCHF\n            _mint(from, 1000 * 10**18);\n            amount -= ONE_DEC18;\n        } \n        _mint(from, calculateSharesInternal(zchf.equity() - amount, amount));\n        require(totalSupply() < 2**90, \"total supply exceeded\"); // to guard against overflows with price and vote calculations\n        return true;\n    }\n\n    /**\n     * @notice Calculate shares received when depositing ZCHF\n     * @dev this function is called after the transfer of ZCHF happens\n     * @param investment ZCHF invested, in dec18 format\n     * @return amount of shares received for the ZCHF invested\n     */\n    function calculateShares(uint256 investment) public view returns (uint256) {\n        return calculateSharesInternal(zchf.equity(), investment);\n    }\n\n    function calculateSharesInternal(uint256 capitalBefore, uint256 investment) internal view returns (uint256) {\n        uint256 totalShares = totalSupply();\n        uint256 newTotalShares = _mulD18(totalShares, _cubicRoot(_divD18(capitalBefore + investment, capitalBefore)));\n        return newTotalShares - totalShares;\n    }\n\n    function redeem(address target, uint256 shares) public returns (uint256) {\n        require(canRedeem(msg.sender));\n        uint256 proceeds = calculateProceeds(shares);\n        _burn(msg.sender, shares);\n        zchf.transfer(target, proceeds);\n        return proceeds;\n    }\n\n    /**\n     * @notice Calculate ZCHF received when depositing shares\n     * @dev this function is called before any transfer happens\n     * @param shares number of shares we want to exchange for ZCHF,\n     *               in dec18 format\n     * @return amount of ZCHF received for the shares\n     */\n    function calculateProceeds(uint256 shares) public view returns (uint256) {\n        uint256 totalShares = totalSupply();\n        uint256 capital = zchf.equity();\n        require(shares + ONE_DEC18 < totalShares, \"too many shares\"); // make sure there is always at least one share\n        uint256 newTotalShares = totalShares - shares;\n        uint256 newCapital = _mulD18(capital, _power3(_divD18(newTotalShares, totalShares)));\n        return capital - newCapital;\n    }\n\n}"
    },
    "contracts/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Copied and adjusted from OpenZeppelin\n// Adjustments:\n// - modifications to support ERC-677\n// - removed require messages to save space\n// - removed unnecessary require statements\n// - removed GSN Context\n// - upgraded to 0.8 to drop SafeMath\n// - let name() and symbol() be implemented by subclass\n// - infinite allowance support, with 2^255 and above considered infinite\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IERC677Receiver.sol\";\n\n/**\n * @dev Implementation of the `IERC20` interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using `_mint`.\n * For a generic mechanism see `ERC20Mintable`.\n *\n * *For a detailed writeup see our guide [How to implement supply\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See `IERC20.approve`.\n */\n\nabstract contract ERC20 is IERC20 {\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    uint8 public immutable override decimals;\n\n    constructor(uint8 _decimals) {\n        decimals = _decimals;\n    }\n\n    /**\n     * @dev See `IERC20.totalSupply`.\n     */\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See `IERC20.balanceOf`.\n     */\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See `IERC20.transfer`.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.allowance`.\n     */\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See `IERC20.approve`.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) external override returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.transferFrom`.\n     *\n     * Emits an `Approval` event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of `ERC20`;\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `value`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        _transfer(sender, recipient, amount);\n        uint256 currentAllowance = _allowances[sender][msg.sender];\n        if (currentAllowance < (1 << 255)){\n            // Only decrease the allowance if it was not set to 'infinite'\n            // Documented in /doc/infiniteallowance.md\n            require(currentAllowance >= amount, \"approval not enough\");\n            _approve(sender, msg.sender, currentAllowance - amount);\n        }\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to `transfer`, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a `Transfer` event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(recipient != address(0));\n        \n        _beforeTokenTransfer(sender, recipient, amount);\n        require(_balances[sender]>=amount, \"balance not enough\");\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n    }\n\n    // ERC-677 functionality, can be useful for swapping and wrapping tokens\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external override returns (bool) {\n        bool success = transfer(recipient, amount);\n        if (success){\n            success = IERC677Receiver(recipient).onTokenTransfer(msg.sender, amount, data);\n        }\n        return success;\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a `Transfer` event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address recipient, uint256 amount) internal virtual {\n        require(recipient != address(0));\n\n        _beforeTokenTransfer(address(0), recipient, amount);\n\n        _totalSupply += amount;\n        _balances[recipient] += amount;\n        emit Transfer(address(0), recipient, amount);\n    }\n\n     /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a `Transfer` event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _totalSupply -= amount;\n        _balances[account] -= amount;\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an `Approval` event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) virtual internal {\n    }\n}"
    },
    "contracts/ERC20PermitLight.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Copied from https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol\n// and modified it.\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20.sol\";\n\nabstract contract ERC20PermitLight is ERC20 {\n   \n   /*//////////////////////////////////////////////////////////////\n                            EIP-2612 STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    mapping(address => uint256) public nonces;\n\n  /*//////////////////////////////////////////////////////////////\n                             EIP-2612 LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public {\n        require(deadline >= block.timestamp, \"PERMIT_DEADLINE_EXPIRED\");\n\n        unchecked { // unchecked to save a little gas with the nonce increment...\n            address recoveredAddress = ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR(),\n                        keccak256(\n                            abi.encode(\n                                // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"),\n                                bytes32(0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9),\n                                owner,\n                                spender,\n                                value,\n                                nonces[owner]++,\n                                deadline\n                            )\n                        )\n                    )\n                ),\n                v,\n                r,\n                s\n            );\n\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \"INVALID_SIGNER\");\n            _approve(recoveredAddress, spender, value);\n        }\n    }\n\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    //keccak256(\"EIP712Domain(uint256 chainId,address verifyingContract)\");\n                    bytes32(0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218),\n                    block.chainid,\n                    address(this)\n                )\n            );\n    }\n\n}"
    },
    "contracts/Frankencoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ERC20PermitLight.sol\";\nimport \"./Equity.sol\";\nimport \"./IReserve.sol\";\nimport \"./IFrankencoin.sol\";\n\ncontract Frankencoin is ERC20PermitLight, IFrankencoin {\n\n   uint256 public constant MIN_FEE = 1000 * (10**18);\n   uint256 public immutable MIN_APPLICATION_PERIOD; // for example 10 days\n\n   IReserve override public immutable reserve;\n   uint256 private minterReserveE6;\n\n   mapping (address => uint256) public minters;\n   mapping (address => address) public positions;\n\n   event MinterApplied(address indexed minter, uint256 applicationPeriod, uint256 applicationFee, string message);\n   event MinterDenied(address indexed minter, string message);\n\n   constructor(uint256 _minApplicationPeriod) ERC20(18){\n      MIN_APPLICATION_PERIOD = _minApplicationPeriod;\n      reserve = new Equity(this);\n   }\n\n   function name() override external pure returns (string memory){\n      return \"Frankencoin V1\";\n   }\n\n   function symbol() override external pure returns (string memory){\n      return \"ZCHF\";\n   }\n\n   /**\n    * @notice Minting is suggested either by (1) person applying for a new original position,\n    * or (2) by the minting hub when cloning a position. The minting hub has the priviledge\n    * to call with zero application fee and period.\n    * @param _minter             address of the position want to add to the minters\n    * @param _applicationPeriod  application period in seconds\n    * @param _applicationFee     application fee in parts per million\n    * @param _message            message string\n    */\n   function suggestMinter(address _minter, uint256 _applicationPeriod, \n      uint256 _applicationFee, string calldata _message) override external \n   {\n      require(_applicationPeriod >= MIN_APPLICATION_PERIOD || totalSupply() == 0, \"period too short\");\n      require(_applicationFee >= MIN_FEE || totalSupply() == 0, \"fee too low\");\n      require(minters[_minter] == 0, \"already registered\");\n      _transfer(msg.sender, address(reserve), _applicationFee);\n      minters[_minter] = block.timestamp + _applicationPeriod;\n      emit MinterApplied(_minter, _applicationPeriod, _applicationFee, _message);\n   }\n\n   function minterReserve() public view returns (uint256) {\n      return minterReserveE6 / 1000000;\n   }\n\n   function registerPosition(address _position) override external {\n      require(isMinter(msg.sender), \"not minter\");\n      positions[_position] = msg.sender;\n   }\n\n   /**\n    * @notice Get reserve balance (amount of ZCHF)\n    * @return ZCHF in dec18 format\n    */\n   function equity() public view returns (uint256) {\n      uint256 balance = balanceOf(address(reserve));\n      uint256 minReserve = minterReserve();\n      if (balance <= minReserve){\n        return 0;\n      } else {\n        return balance - minReserve;\n      }\n    }\n\n   function denyMinter(address _minter, address[] calldata _helpers, string calldata _message) override external {\n      require(block.timestamp <= minters[_minter], \"too late\");\n      require(reserve.isQualified(msg.sender, _helpers), \"not qualified\");\n      delete minters[_minter];\n      emit MinterDenied(_minter, _message);\n   }\n\n   /**\n * @notice Mint amount of ZCHF for address _target\n * @param _target       address that receives ZCHF if it's a minter\n * @param _amount       amount ZCHF before fees and pool contribution requested\n *                      number in dec18 format\n * @param _reservePPM   reserve requirement in parts per million\n * @param _feesPPM      fees in parts per million\n */\n   function mint(address _target, uint256 _amount, uint32 _reservePPM, uint32 _feesPPM) override external minterOnly {\n      uint256 _minterReserveE6 = _amount * _reservePPM;\n      uint256 reserveMint = (_minterReserveE6 + 999_999) / 1000_000; // make sure rounded up\n      uint256 fees = (_amount * _feesPPM + 999_999) / 1000_000; // make sure rounded up\n      _mint(_target, _amount - reserveMint - fees);\n      _mint(address(reserve), reserveMint + fees);\n      minterReserveE6 += reserveMint * 1000_000;\n   }\n\n   /**\n    * @notice Mint amount of ZCHF for address _target\n    * @param _target   address that receives ZCHF if it's a minter\n    * @param _amount   amount in dec18 format\n    */\n   function mint(address _target, uint256 _amount) override external minterOnly {\n      _mint(_target, _amount);\n   }\n\n   function burn(uint256 _amount) external {\n      _burn(msg.sender, _amount);\n   }\n\n   function burn(uint256 amount, uint32 reservePPM) external override minterOnly {\n      _burn(msg.sender, amount);\n      minterReserveE6 -= amount * reservePPM;\n   }\n\n   function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) public view returns (uint256) {\n      uint256 theoreticalReserve = _reservePPM * mintedAmount / 1000000;\n      uint256 currentReserve = balanceOf(address(reserve));\n      if (currentReserve < minterReserve()){\n         // not enough reserves, owner has to take a loss\n         return theoreticalReserve * currentReserve / minterReserve();\n      } else {\n         return theoreticalReserve;\n      }\n   }\n\n   function burnFrom(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external override minterOnly returns (uint256) {\n      uint256 assigned = calculateAssignedReserve(targetTotalBurnAmount, _reservePPM);\n      _transfer(address(reserve), payer, assigned); \n      _burn(payer, targetTotalBurnAmount); // and burn everything\n      minterReserveE6 -= targetTotalBurnAmount * _reservePPM; // reduce reserve requirements by original ratio\n      return assigned;\n   }\n\n   function burnWithReserve(uint256 _amountExcludingReserve /* 41 */, uint32 _reservePPM /* 20% */) \n      external override minterOnly returns (uint256) {\n      uint256 currentReserve = balanceOf(address(reserve)); // 18, 10% below what we should have\n      uint256 minterReserve_ = minterReserve(); // 20\n      uint256 adjustedReservePPM = currentReserve < minterReserve_ ? _reservePPM * currentReserve / minterReserve_ : _reservePPM; // 18%\n      uint256 freedAmount = _amountExcludingReserve / (1000000 - adjustedReservePPM); // 0.18 * 41 /0.82 = 50\n      minterReserveE6 -= freedAmount * _reservePPM; // reduce reserve requirements by original ratio, here 10\n      _transfer(address(reserve), msg.sender, freedAmount - _amountExcludingReserve); // collect 9 assigned reserve, maybe less than original reserve\n      _burn(msg.sender, freedAmount); // 41\n      return freedAmount;\n   }\n\n   function burn(address _owner, uint256 _amount) override external minterOnly {\n      _burn(_owner, _amount);\n   }\n\n   modifier minterOnly() {\n      require(isMinter(msg.sender) || isMinter(positions[msg.sender]), \"not approved minter\");\n      _;\n   }\n\n   function notifyLoss(uint256 _amount) override external minterOnly {\n      uint256 reserveLeft = balanceOf(address(reserve));\n      if (reserveLeft >= _amount){\n         _transfer(address(reserve), msg.sender, _amount);\n      } else {\n         _transfer(address(reserve), msg.sender, reserveLeft);\n         _mint(msg.sender, _amount - reserveLeft);\n      }\n   }\n   function isMinter(address _minter) override public view returns (bool){\n      return minters[_minter] != 0 && block.timestamp >= minters[_minter];\n   }\n\n   function isPosition(address _position) override public view returns (address){\n      return positions[_position];\n   }\n\n}\n\n"
    },
    "contracts/IERC20.sol": {
      "content": "/**\n* SPDX-License-Identifier: MIT\n*\n* Copyright (c) 2016-2019 zOS Global Limited\n*\n*/\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\n\ninterface IERC20 {\n\n    // Optional functions\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n}"
    },
    "contracts/IERC677Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC677Receiver {\n    \n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\n\n}"
    },
    "contracts/IFrankencoin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./IReserve.sol\";\n\ninterface IFrankencoin is IERC20 {\n\n    function suggestMinter(address _minter, uint256 _applicationPeriod, \n      uint256 _applicationFee, string calldata _message) external;\n\n    function registerPosition(address position) external;\n\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\n\n    function reserve() external view returns (IReserve);\n\n    function isMinter(address minter) external view returns (bool);\n\n    function isPosition(address position) external view returns (address);\n    \n    function mint(address target, uint256 amount) external;\n\n    function mint(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\n\n    function burn(uint256 amountIncludingReserve, uint32 reservePPM) external;\n\n    function burnFrom(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external returns (uint256);\n\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\n\n    function burn(address target, uint256 amount) external;\n\n    function notifyLoss(uint256 amount) external;\n\n}"
    },
    "contracts/IReserve.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IReserve {\n   function isQualified(address sender, address[] calldata helpers) external view returns (bool);\n}"
    },
    "contracts/MathUtil.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.0 <0.9.0;\n\n/** \n * @title Functions for share valuation\n */\ncontract MathUtil {\n\n    uint256 internal constant ONE_DEC18 = 10**18;\n    uint256 internal constant THRESH_DEC18 =  10000000000000000;//0.01\n    /**\n     * @notice Cubic root with Halley approximation\n     *         Number 1e18 decimal\n     * @param _v     number for which we calculate x**(1/3)\n     * @return returns _v**(1/3)\n     */\n    function _cubicRoot(uint256 _v) internal pure returns (uint256) {\n        uint256 x = ONE_DEC18;\n        uint256 xOld;\n        bool cond;\n        do {\n            xOld = x;\n            uint256 powX3 = _mulD18(_mulD18(x, x), x);\n            x = _mulD18(x, _divD18( (powX3 + 2 * _v) , (2 * powX3 + _v)));\n            cond = xOld > x ? xOld - x > THRESH_DEC18 : x - xOld > THRESH_DEC18;\n        } while ( cond );\n        return x;\n    }\n\n    function _mulD18(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        return _a * _b / ONE_DEC18;\n    }\n\n    function _divD18(uint256 _a, uint256 _b) internal pure returns(uint256) {\n        return (_a * ONE_DEC18) / _b ;\n    }\n\n    function _power3(uint256 _x) internal pure returns(uint256) {\n        return _mulD18(_mulD18(_x, _x), _x);\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
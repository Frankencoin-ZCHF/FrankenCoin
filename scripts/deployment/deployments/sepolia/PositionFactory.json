{
  "address": "0x45a91Aa0044DF3988e475a3Fb9216f22e1588076",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_existing",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zchf",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_initialCol",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialMint",
          "type": "uint256"
        }
      ],
      "name": "clonePosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zchf",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_mintingFeePPM",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_liqPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reserve",
          "type": "uint32"
        }
      ],
      "name": "createNewPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe540b69d0b52bba69dfb4b9c1e30476ca6d3fa6c07e7ef5b95648a1a92b277d2",
  "receipt": {
    "to": null,
    "from": "0x0aB6527027EcFF1144dEc3d78154fce309ac838c",
    "contractAddress": "0x45a91Aa0044DF3988e475a3Fb9216f22e1588076",
    "transactionIndex": 3,
    "gasUsed": "2330334",
    "logsBloom": "0x
    "blockHash": "0xb2c65f73beed8329be4b7d8cefaf1c8bc48571e5e13acbb2f67794c6ee1e09cf",
    "transactionHash": "0xe540b69d0b52bba69dfb4b9c1e30476ca6d3fa6c07e7ef5b95648a1a92b277d2",
    "logs": [],
    "blockNumber": 1961741,
    "cumulativeGasUsed": "2426191",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fc788ac1456ab837b35a16053ba0ab91",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_existing\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zchf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialCol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialMint\",\"type\":\"uint256\"}],\"name\":\"clonePosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zchf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_mintingFeePPM\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_liqPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reserve\",\"type\":\"uint32\"}],\"name\":\"createNewPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clonePosition(address,address,address,uint256,uint256)\":{\"params\":{\"_existing\":\"address of the position we want to clone\",\"_initialCol\":\"initial collateral to be posted by owner (dec 18)\",\"_initialMint\":\"initial amount to mint before fees/reserve by owner\",\"_owner\":\"owner address of the new clone\",\"_zchf\":\"ZCHF address\"},\"returns\":{\"_0\":\"address of the newly created clone position\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clonePosition(address,address,address,uint256,uint256)\":{\"notice\":\"clone an existing position. This can be a clone of another clone, or an origin position. If it's another clone, then the liquidation price is taken from the clone and the rest from the origin. Limit is \\\"inherited\\\" (and adjusted) from the origin.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PositionFactory.sol\":\"PositionFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CloneFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract CloneFactory {\\n\\n  function createClone(address target) internal returns (address result) {\\n    bytes20 targetBytes = bytes20(target);\\n    assembly {\\n      let clone := mload(0x40)\\n      mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(clone, 0x14), targetBytes)\\n      mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      result := create(0, clone, 0x37)\\n    }\\n  }\\n\\n}\",\"keccak256\":\"0x71bf935be02c03f3ae08585645e859516f6adca52b8adecb6d4ce5753415096e\",\"license\":\"MIT\"},\"contracts/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0xca95e6b6324b1c92dca4759b3da5fc251053691de885f2e23021eb5abdddea9c\",\"license\":\"MIT\"},\"contracts/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC677Receiver {\\n    \\n    function onTokenTransfer(address from, uint256 amount, bytes calldata data) external returns (bool);\\n\\n}\",\"keccak256\":\"0x40703acdfa2126286b117ad0cca84c0a4ca2d3b18586765186c9bdd8ad5cf744\",\"license\":\"MIT\"},\"contracts/IFrankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\n\\ninterface IFrankencoin is IERC20 {\\n\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, \\n      uint256 _applicationFee, string calldata _message) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function isPosition(address position) external view returns (address);\\n    \\n    function mint(address target, uint256 amount) external;\\n\\n    function mint(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burn(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n    function burn(address target, uint256 amount) external;\\n\\n    function notifyLoss(uint256 amount) external;\\n\\n}\",\"keccak256\":\"0x37f4fd61a80655878619a90aa41af56bcbe711477fd84d9b5d1efc13e78afce9\",\"license\":\"MIT\"},\"contracts/IPosition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\nimport \\\"./IFrankencoin.sol\\\";\\n\\ninterface IPosition {\\n\\n    function collateral() external returns (IERC20);\\n\\n    function challengePeriod() external returns (uint256);\\n\\n    function price() external returns (uint256);\\n\\n    function initializeClone(address owner, uint256 _price, uint256 _limit, uint256 _coll, uint256 _mint) external;\\n\\n    function deny(address[] calldata helpers, string calldata message) external;\\n\\n    function notifyChallengeStarted(uint256 size) external;\\n\\n    function tryAvertChallenge(uint256 size, uint256 bid) external returns (bool);\\n\\n    function notifyChallengeSucceeded(address bidder, uint256 bid, uint256 size) external returns (uint256, uint256, uint32);\\n\\n}\",\"keccak256\":\"0x6a03d6901823f91009f034eeaa9cf8b372c08ff1aac09bae42f265934806ded0\",\"license\":\"MIT\"},\"contracts/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReserve {\\n   function isQualified(address sender, address[] calldata helpers) external view returns (bool);\\n}\",\"keccak256\":\"0x0fe637cc8a87dd12b7a236a86c15d52990ea3224413a1ec0e776b093b44eca0d\",\"license\":\"MIT\"},\"contracts/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/** \\n * @title Functions for share valuation\\n */\\ncontract MathUtil {\\n\\n    uint256 internal constant ONE_DEC18 = 10**18;\\n    uint256 internal constant THRESH_DEC18 =  10000000000000000;//0.01\\n    /**\\n     * @notice Cubic root with Halley approximation\\n     *         Number 1e18 decimal\\n     * @param _v     number for which we calculate x**(1/3)\\n     * @return returns _v**(1/3)\\n     */\\n    function _cubicRoot(uint256 _v) internal pure returns (uint256) {\\n        uint256 x = ONE_DEC18;\\n        uint256 xOld;\\n        bool cond;\\n        do {\\n            xOld = x;\\n            uint256 powX3 = _mulD18(_mulD18(x, x), x);\\n            x = _mulD18(x, _divD18( (powX3 + 2 * _v) , (2 * powX3 + _v)));\\n            cond = xOld > x ? xOld - x > THRESH_DEC18 : x - xOld > THRESH_DEC18;\\n        } while ( cond );\\n        return x;\\n    }\\n\\n    function _mulD18(uint256 _a, uint256 _b) internal pure returns(uint256) {\\n        return _a * _b / ONE_DEC18;\\n    }\\n\\n    function _divD18(uint256 _a, uint256 _b) internal pure returns(uint256) {\\n        return (_a * ONE_DEC18) / _b ;\\n    }\\n\\n    function _power3(uint256 _x) internal pure returns(uint256) {\\n        return _mulD18(_mulD18(_x, _x), _x);\\n    }\\n\\n}\",\"keccak256\":\"0xb5d4f2e9e32e67daec5e87f2953a5f59b4a871d1feca79ca8703a61757215dce\",\"license\":\"MIT\"},\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n// - Extracted interface\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable {\\n\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor (address initialOwner) {\\n        require(initialOwner != address(0), \\\"0x0\\\");\\n        owner = initialOwner;\\n        emit OwnershipTransferred(address(0), owner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) virtual public onlyOwner {\\n        require(newOwner != address(0), \\\"0x0\\\");\\n        owner = newOwner;\\n        emit OwnershipTransferred(owner, newOwner);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner == msg.sender || owner == address(0x0), \\\"not owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0xeffc1aaff0fe8713402464c0d37d7f37a3e17025d40f088a6bd0f13ab321f1c3\",\"license\":\"MIT\"},\"contracts/Position.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IPosition.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\nimport \\\"./IFrankencoin.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./IERC677Receiver.sol\\\";\\nimport \\\"./MathUtil.sol\\\";\\n\\n/**\\n * A collateralized minting position.\\n */\\ncontract Position is Ownable, IERC677Receiver, IPosition, MathUtil {\\n\\n    uint256 public constant WARM_UP_PERIOD = 3600; //TODO: 1h set to 7 days for production\\n\\n    uint256 public price; // the zchf price per unit of the collateral below which challenges succeed\\n    uint256 public minted; // how much has been minted so far, including reserve\\n    uint256 public challengedAmount; // amount of the collateral that is currently under a challenge\\n    uint256 public immutable challengePeriod; //challenge period in timestamp units (seconds) for liquidation\\n\\n    uint256 public cooldown;\\n    uint256 public limit; // how many zchf can be minted at most, including reserve\\n    uint256 public immutable expiration;\\n\\n    address public immutable original; // originals point to themselves, clone to their origin\\n    address public immutable factory;\\n    address public immutable hub;\\n    IFrankencoin public immutable zchf; // currency\\n    IERC20 public override immutable collateral; // collateral\\n    uint256 public immutable minimumCollateral; // prevent dust amounts\\n\\n    uint32 public immutable mintingFeePPM;\\n    uint32 public immutable reserveContribution; // in ppm\\n\\n\\n    event PositionDenied(address indexed sender, string message);\\n    event MintingUpdate(uint256 collateral, uint256 price, uint256 minted, uint256 limit);\\n\\n    /**\\n    * @param _owner             position owner address\\n    * @param _hub               address of minting hub\\n    * @param _zchf              ZCHF address\\n    * @param _collateral        collateral address\\n    * @param _minCollateral     minimum collateral required to prevent dust amounts\\n    * @param _initialCollateral amount of initial collateral to be deposited\\n    * @param _initialLimit      maximal amount of ZCHF that can be minted by the position owner (includes reserve)\\n    * @param _duration          position tenor in unit of timestamp (seconds) from 'now'\\n    * @param _challengePeriod   challenge period. Longer for less liquid collateral.\\n    * @param _mintingFeePPM     fee to enter position in parts per million of ZCHF amount\\n    * @param _liqPrice          Liquidation price (dec18) that together with the reserve and\\n    *                           fees determines the minimal collateralization ratio\\n    * @param _reservePPM        ZCHF pool reserve requirement in parts per million of ZCHF amount\\n    */\\n    constructor(address _owner, address _hub, address _zchf, address _collateral, \\n        uint256 _minCollateral, uint256 _initialCollateral, \\n        uint256 _initialLimit, uint256 _duration, uint256 _challengePeriod, uint32 _mintingFeePPM, \\n        uint256 _liqPrice, uint32 _reservePPM) Ownable(_owner) \\n    {\\n        factory = msg.sender;\\n        original = address(this);\\n        hub = _hub;\\n        price = _liqPrice;\\n        zchf = IFrankencoin(_zchf);\\n        collateral = IERC20(_collateral);\\n        mintingFeePPM = _mintingFeePPM;\\n        reserveContribution = _reservePPM;\\n        require(_initialCollateral >= _minCollateral);\\n        minimumCollateral = _minCollateral;\\n        expiration = block.timestamp + _duration;\\n        challengePeriod = _challengePeriod;\\n        restrictMinting(WARM_UP_PERIOD);\\n        limit = _initialLimit;\\n        \\n    }\\n\\n    function initializeClone(address owner, uint256 _price, uint256 _limit, uint256 _coll, uint256 _mint) external {\\n        require(msg.sender == address(factory), \\\"factory only\\\");\\n        require(_coll >= minimumCollateral, \\\"coll not enough\\\");\\n        transferOwnership(owner);\\n        \\n        price = _price;\\n        limit = _limit;\\n        mintInternal(owner, _mint, _coll);\\n    }\\n\\n    /**\\n     * @notice adjust this position's limit to give away some limit to the clone\\n     *         invariant: global limit stays constant\\n     * @param _minimum  amount that clone wants to mint initially\\n     * @return limit for the clone\\n     */\\n    function reduceLimitForClone(uint256 _minimum) external noMintRestriction returns (uint256) {\\n        require(msg.sender == address(factory), \\\"only factory\\\");\\n        require(minted + _minimum <= limit, \\\"limit exceeded\\\");\\n        uint256 reduction = (limit - minted - _minimum)/2;\\n        limit -= reduction + _minimum;\\n        return reduction + _minimum;\\n    }\\n\\n    function deny(address[] calldata helpers, string calldata message) public {\\n        require(minted == 0, \\\"minted\\\"); // must deny before any tokens are minted\\n        require(IReserve(zchf.reserve()).isQualified(msg.sender, helpers), \\\"not qualified\\\");\\n        collateral.transfer(owner, collateral.balanceOf(address(this)));\\n        zchf.transfer(owner, zchf.balanceOf(address(this)));\\n        cooldown = expiration;\\n        emit PositionDenied(msg.sender, message);\\n    }\\n\\n    /**\\n     * This is how much the minter can actually use when minting ZCHF, with the rest being used\\n     * to buy reserve pool shares.\\n     */\\n    function getUsableMint(uint256 totalMint, bool beforeFees) public view returns (uint256){\\n        uint256 usable = totalMint * (1000_000 - reserveContribution) / 1000_000;\\n        if (beforeFees){\\n            return usable;\\n        } else {\\n            return totalMint * (1000_000 - mintingFeePPM) / 1000_000;\\n        }\\n    }\\n\\n    // TODO Add function to push limit?\\n\\n    function adjustPrice(uint256 newPrice) public onlyOwner noChallenge {\\n        if (newPrice > price) {\\n            restrictMinting(3 days);\\n        } else {\\n            require(isWellCollateralized(collateralBalance(), newPrice));\\n        }\\n        price = newPrice;\\n        emitUpdate();\\n    }\\n\\n    function collateralBalance() internal view returns (uint256){\\n        return IERC20(collateral).balanceOf(address(this));\\n    }\\n\\n    function mint(address target, uint256 amount) public onlyOwner noChallenge noMintRestriction {\\n        mintInternal(target, amount, collateralBalance());\\n    }\\n\\n    function mintInternal(address target, uint256 amount, uint256 collateral_) internal {\\n        require(minted + amount <= limit, \\\"limit exceeded\\\");\\n        zchf.mint(target, amount, reserveContribution, mintingFeePPM);\\n        minted += amount;\\n\\n        require(isWellCollateralized(collateral_, price), \\\"not well collateralized\\\");\\n        emitUpdate();\\n    }\\n\\n    function restrictMinting(uint256 period) internal {\\n        uint256 horizon = block.timestamp + period;\\n        if (horizon > cooldown){\\n            cooldown = horizon;\\n        }\\n    }\\n    \\n    function onTokenTransfer(address, uint256 amount, bytes calldata) override external returns (bool) {\\n        if (msg.sender == address(zchf)){\\n            repayInternal(amount);\\n        } else {\\n            require(false);\\n        }\\n        return true;\\n    }\\n\\n    function repay(uint256 amount) public onlyOwner {\\n        IERC20(zchf).transferFrom(msg.sender, address(this), amount);\\n        repayInternal(amount);\\n    }\\n\\n    function repay() public onlyOwner {\\n        repayInternal(IERC20(zchf).balanceOf(address(this)));\\n    }\\n\\n    function repayInternal(uint256 burnable) internal noChallenge {\\n        uint256 actuallyBurned = IFrankencoin(zchf).burnWithReserve(burnable, reserveContribution);\\n        notifyRepaidInternal(actuallyBurned);\\n    }\\n\\n    function notifyRepaidInternal(uint256 amount) internal {\\n        require(amount <= minted);\\n        minted -= amount;\\n        emitUpdate();\\n    }\\n\\n    /**\\n     * Withdraw any token that might have ended up on this address, except for collateral\\n     * and reserve tokens, which also serve as a collateral.\\n     */\\n    function withdraw(address token, address target, uint256 amount) external onlyOwner {\\n        if (token == address(collateral)){\\n            withdrawCollateral(target, amount);\\n        } else {\\n            IERC20(token).transfer(target, amount);\\n        }\\n    }\\n\\n    function withdrawCollateral(address target, uint256 amount) public onlyOwner noChallenge {\\n        IERC20(collateral).transfer(target, amount);\\n        uint256 balance = collateralBalance();\\n        require(isWellCollateralized(balance, price));\\n        if (balance == 0){\\n            // Close\\n            cooldown = expiration;\\n        } else {\\n            require(balance >= minimumCollateral);\\n        }\\n        emitUpdate();\\n    }\\n\\n    function isWellCollateralized(uint256 collateralReserve, uint256 atPrice) internal view returns (bool) {\\n        return collateralReserve * atPrice >= minted;\\n    }\\n\\n    function emitUpdate() internal {\\n        emit MintingUpdate(collateralBalance(), price, minted, limit);\\n    }\\n\\n    function notifyChallengeStarted(uint256 size) external onlyHub {\\n        uint256 colbal = collateralBalance();\\n        require(size <= colbal, \\\"size exeeds collateral\\\");\\n        require(colbal > 0, \\\"no collateral\\\"); // nothing to challenge\\n        require(size >= colbal / 20, \\\"size too small\\\"); // must challenge at least 5% of the position\\n        challengedAmount += size;\\n    }\\n\\n    /**\\n     * @notice check whether challenge can be averted\\n     * @param _collateralAmount   amount of collateral challenged (dec18)\\n     * @param _bidAmountZCHF      bid amount in ZCHF (dec18)\\n     * @return true if challenge can be averted\\n     */\\n    function tryAvertChallenge(uint256 _collateralAmount, uint256 _bidAmountZCHF) external onlyHub returns (bool) {\\n        if (block.timestamp >= expiration){\\n            return false; // position expired, let every challenge succeed\\n        } else if (_bidAmountZCHF * ONE_DEC18 >= price * _collateralAmount){\\n            // challenge averted, bid is high enough\\n            challengedAmount -= _collateralAmount;\\n            // don't allow minter to close the position immediately so challenge can be repeated\\n            restrictMinting(1 days);\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Notifies the position that a challenge was successful.\\n     * Triggers the payout of the challenged part of the collateral.\\n     * Returns three important numbers:\\n     *  - repay: the amount that is needed to repay for the actually minted zchf wit the challenged collateral\\n     *  - minted: the number of zchf that where actually minted and used using the challenged collateral\\n     *  - mintmax: the maximum number of zchf that could have been minted and used using the challenged collateral \\n     * @param _bidder   address of the bidder that receives the collateral\\n     * @param _bid      bid amount in ZCHF (dec18)\\n     * @param _size     size of the collateral bid for (dec 18)\\n     * @return adjusted bid size, repaied xchf, reserve contribution ppm\\n     */\\n    function notifyChallengeSucceeded(address _bidder, uint256 _bid, uint256 _size) \\n        external onlyHub returns (uint256, uint256, uint32)\\n    {\\n        challengedAmount -= _size;\\n        uint256 volumeZCHF = _mulD18(price, _size);\\n        if (volumeZCHF > minted){\\n            _size = _divD18(_mulD18(_size, minted), volumeZCHF);\\n            _bid = _divD18(_mulD18(_bid, minted), volumeZCHF);\\n            volumeZCHF = minted;\\n        }\\n        require(_bid < volumeZCHF, \\\"challenge not successful\\\");\\n        // transfer collateral to the bidder\\n        IERC20(collateral).transfer(_bidder, _size);\\n        notifyRepaidInternal(volumeZCHF); // we assume the caller takes care of the actual repayment\\n        return (_bid, volumeZCHF, reserveContribution);\\n    }\\n\\n    modifier noMintRestriction() {\\n       require(cooldown < block.timestamp, \\\"cooldown\\\");\\n       require(block.timestamp <= expiration, \\\"expired\\\");\\n        _;\\n    }\\n\\n    modifier noChallenge() {\\n        require(challengedAmount == 0, \\\"challenges pending\\\");\\n        _;\\n    }\\n\\n    modifier onlyHub() {\\n        require(msg.sender == address(hub), \\\"not hub\\\");\\n        _;\\n    }\\n\\n}\",\"keccak256\":\"0x71d44691eb8247332ba10cff9b18b1382dd6dc0e025b387ca411532691c35475\",\"license\":\"MIT\"},\"contracts/PositionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CloneFactory.sol\\\";\\nimport \\\"./Position.sol\\\";\\nimport \\\"./IFrankencoin.sol\\\";\\n\\ncontract PositionFactory is CloneFactory {\\n\\n    function createNewPosition(address _owner, address _zchf, address _collateral, \\n        uint256 _minCollateral, uint256 _initialCollateral, \\n        uint256 _initialLimit, uint256 _duration, uint256 _challengePeriod, \\n        uint32 _mintingFeePPM, uint256 _liqPrice, uint32 _reserve) \\n        external returns (address) \\n    {\\n        return address(new Position(_owner, msg.sender, _zchf, _collateral, \\n            _minCollateral, _initialCollateral, _initialLimit, _duration, \\n            _challengePeriod, _mintingFeePPM, _liqPrice, _reserve));\\n    }\\n\\n    /**\\n    * @notice clone an existing position. This can be a clone of another clone,\\n    * or an origin position. If it's another clone, then the liquidation price\\n    * is taken from the clone and the rest from the origin. Limit is \\\"inherited\\\"\\n    * (and adjusted) from the origin.\\n    * @param _existing     address of the position we want to clone\\n    * @param _zchf         ZCHF address\\n    * @param _owner        owner address of the new clone\\n    * @param _initialCol   initial collateral to be posted by owner (dec 18)\\n    * @param _initialMint  initial amount to mint before fees/reserve by owner\\n    * @return address of the newly created clone position\\n    */\\n    function clonePosition(address _existing, address _zchf, address _owner, \\n        uint256 _initialCol, uint256 _initialMint) \\n        external returns (address) \\n    {\\n        Position existing = Position(_existing);\\n        uint256 limit = existing.reduceLimitForClone(_initialMint);\\n        Position clone = Position(createClone(existing.original()));\\n        // suggest minter\\n        IFrankencoin(_zchf).suggestMinter(address(clone), 0, 0, \\\"clone\\\");\\n        // initialize and mint\\n        clone.initializeClone(_owner, existing.price(), limit, _initialCol, _initialMint);\\n        return address(clone);\\n    }\\n\\n}\",\"keccak256\":\"0xbfa051228c119948b7c6e0d4a4ef5c8311ee7385b3bd6f8f7341b38b71fef2bf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061297b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632e292e8d1461003b57806353af18071461006a575b600080fd5b61004e6100493660046103fe565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610472565b6102d8565b604051635861764160e11b815260048101829052600090869082906001600160a01b0383169063b0c2ec82906024016020604051808303816000875af11580156100cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ef919061051a565b9050600061015d836001600160a01b03166346c715fa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101589190610533565b610387565b60405163d1a15ff160e01b81526001600160a01b0380831660048301526000602483018190526044830152608060648301526005608483015264636c6f6e6560d81b60a48301529192509089169063d1a15ff19060c401600060405180830381600087803b1580156101ce57600080fd5b505af11580156101e2573d6000803e3d6000fd5b50505050806001600160a01b031663aee1a95988856001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610234573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610258919061051a565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260448101859052606481018990526084810188905260a401600060405180830381600087803b1580156102b357600080fd5b505af11580156102c7573d6000803e3d6000fd5b50929b9a5050505050505050505050565b60008b338c8c8c8c8c8c8c8c8c8c6040516102f2906103d9565b6001600160a01b039c8d1681529a8c1660208c0152988b1660408b0152969099166060890152608088019490945260a087019290925260c086015260e085015261010084015263ffffffff9384166101208401526101408301529190911661016082015261018001604051809103906000f080158015610376573d6000803e3d6000fd5b509c9b505050505050505050505050565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0949350505050565b6123ee8061055883390190565b6001600160a01b03811681146103fb57600080fd5b50565b600080600080600060a0868803121561041657600080fd5b8535610421816103e6565b94506020860135610431816103e6565b93506040860135610441816103e6565b94979396509394606081013594506080013592915050565b803563ffffffff8116811461046d57600080fd5b919050565b60008060008060008060008060008060006101608c8e03121561049457600080fd5b8b3561049f816103e6565b9a5060208c01356104af816103e6565b995060408c01356104bf816103e6565b985060608c0135975060808c0135965060a08c0135955060c08c0135945060e08c013593506104f16101008d01610459565b92506101208c013591506105086101408d01610459565b90509295989b509295989b9093969950565b60006020828403121561052c57600080fd5b5051919050565b60006020828403121561054557600080fd5b8151610550816103e6565b939250505056fe6101c06040523480156200001257600080fd5b50604051620023ee380380620023ee83398101604081905262000035916200019f565b8b6001600160a01b038116620000775760405162461bcd60e51b815260206004820152600360248201526203078360ec1b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03831690811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3503360e0523060c0526001600160a01b038b81166101005260018390558a81166101205289166101405263ffffffff8084166101805281166101a052878710156200010957600080fd5b6101608890526200011b85426200025e565b60a052608084905262000130610e1062000148565b50505060059290925550620002859650505050505050565b60006200015682426200025e565b9050600454811115620001695760048190555b5050565b80516001600160a01b03811681146200018557600080fd5b919050565b805163ffffffff811681146200018557600080fd5b6000806000806000806000806000806000806101808d8f031215620001c357600080fd5b620001ce8d6200016d565b9b50620001de60208e016200016d565b9a50620001ee60408e016200016d565b9950620001fe60608e016200016d565b985060808d0151975060a08d0151965060c08d0151955060e08d015194506101008d01519350620002336101208e016200018a565b92506101408d015191506200024c6101608e016200018a565b90509295989b509295989b509295989b565b600082198211156200028057634e487b7160e01b600052601160045260246000fd5b500190565b60805160a05160c05160e05161010051610120516101405161016051610180516101a05161201b620003d3600039600081816102a301528181610555015281816111c50152818161186601526119a90152600081816103fc015281816105ac01526119d101526000818161046501528181610b1b015261133b0152600081816104da0152818161078101528181610a5901528181611147015281816115ac01526117430152600081816104b3015281816106350152818161088801528181610bb301528181610d5e015281816112980152818161189001526119f801526000818161025101528181610c4201528181610eed015261103401526000818161048c015281816112dd0152611463015260006103570152600081816103300152818161097101528181610af201528181610c8101528181610e74015261140001526000610527015261201b6000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c8063787a08a61161010f578063b0c2ec82116100a2578063d8dfeb4511610071578063d8dfeb45146104d5578063d9caed12146104fc578063f2fde38b1461050f578063f3f480d91461052257600080fd5b8063b0c2ec821461044d578063babe7c7414610460578063c45a015514610487578063c4d4803a146104ae57600080fd5b8063a1362033116100de578063a1362033146103f7578063a4c0ed361461041e578063a4d66daf14610431578063aee1a9591461043a57600080fd5b8063787a08a6146103c95780638da5cb5b146103d257806397fbdf08146103e5578063a035b1fe146103ee57600080fd5b8063402d88831161018757806346c715fa1161015657806346c715fa146103525780634f02c42014610379578063707271b11461038257806372bf079e146103b657600080fd5b8063402d8883146102fd57806340c10f191461030557806342d02041146103185780634665096d1461032b57600080fd5b8063365a86fc116101c3578063365a86fc1461024c578063371fd8e61461028b5780633a7c29fb1461029e5780633e94e242146102da57600080fd5b806308262940146101f55780631bbea34c1461021b57806324e657fe14610230578063350c35e914610239575b600080fd5b610208610203366004611b36565b610549565b6040519081526020015b60405180910390f35b61022e610229366004611baf565b6105f5565b005b61020860035481565b61022e610247366004611c5e565b6109d5565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610212565b61022e610299366004611c8a565b610b53565b6102c57f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610212565b6102ed6102e8366004611ca3565b610c35565b6040519015158152602001610212565b61022e610d07565b61022e610313366004611c5e565b610dd8565b61022e610326366004611c8a565b610ee2565b6102087f000000000000000000000000000000000000000000000000000000000000000081565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b61020860025481565b610395610390366004611cc5565b611025565b60408051938452602084019290925263ffffffff1690820152606001610212565b61022e6103c4366004611c8a565b6111ec565b61020860045481565b600054610273906001600160a01b031681565b610208610e1081565b61020860015481565b6102c57f000000000000000000000000000000000000000000000000000000000000000081565b6102ed61042c366004611cfa565b61128c565b61020860055481565b61022e610448366004611d4a565b6112d2565b61020861045b366004611c8a565b6113c0565b6102087f000000000000000000000000000000000000000000000000000000000000000081565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b61022e61050a366004611d8e565b61156c565b61022e61051d366004611dcf565b611666565b6102087f000000000000000000000000000000000000000000000000000000000000000081565b600080620f424061057a7f000000000000000000000000000000000000000000000000000000000000000082611e02565b61058a9063ffffffff1686611e27565b6105949190611e46565b905082156105a35790506105ef565b620f42406105d17f000000000000000000000000000000000000000000000000000000000000000082611e02565b6105e19063ffffffff1686611e27565b6105eb9190611e46565b9150505b92915050565b600254156106335760405162461bcd60e51b81526020600482015260066024820152651b5a5b9d195960d21b60448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b59190611e68565b6001600160a01b0316635e1121cf3386866040518463ffffffff1660e01b81526004016106e493929190611e85565b602060405180830381865afa158015610701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107259190611ee1565b6107615760405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081c5d585b1a599a5959609a1b604482015260640161062a565b6000546040516370a0823160e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263a9059cbb9291169083906370a0823190602401602060405180830381865afa1580156107d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f89190611efe565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108679190611ee1565b506000546040516370a0823160e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263a9059cbb9291169083906370a0823190602401602060405180830381865afa1580156108db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ff9190611efe565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e9190611ee1565b507f000000000000000000000000000000000000000000000000000000000000000060045560405133907faca80c800ec0d2aa9d9d31b7f886a1dd3067d4676abc637626a18ffb9381653d906109c79085908590611f17565b60405180910390a250505050565b6000546001600160a01b03163314806109f757506000546001600160a01b0316155b610a135760405162461bcd60e51b815260040161062a90611f46565b60035415610a335760405162461bcd60e51b815260040161062a90611f69565b60405163a9059cbb60e01b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac69190611ee1565b506000610ad161172b565b9050610adf816001546117bb565b610ae857600080fd5b80600003610b19577f0000000000000000000000000000000000000000000000000000000000000000600455610b46565b7f0000000000000000000000000000000000000000000000000000000000000000811015610b4657600080fd5b610b4e6117d4565b505050565b6000546001600160a01b0316331480610b7557506000546001600160a01b0316155b610b915760405162461bcd60e51b815260040161062a90611f46565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610c04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c289190611ee1565b50610c328161182b565b50565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c7f5760405162461bcd60e51b815260040161062a90611f95565b7f00000000000000000000000000000000000000000000000000000000000000004210610cae575060006105ef565b82600154610cbc9190611e27565b610cce670de0b6b3a764000084611e27565b10610cff578260036000828254610ce59190611fb6565b90915550610cf7905062015180611910565b5060016105ef565b5060006105ef565b6000546001600160a01b0316331480610d2957506000546001600160a01b0316155b610d455760405162461bcd60e51b815260040161062a90611f46565b6040516370a0823160e01b8152306004820152610dd6907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd19190611efe565b61182b565b565b6000546001600160a01b0316331480610dfa57506000546001600160a01b0316155b610e165760405162461bcd60e51b815260040161062a90611f46565b60035415610e365760405162461bcd60e51b815260040161062a90611f69565b4260045410610e725760405162461bcd60e51b815260206004820152600860248201526731b7b7b63237bbb760c11b604482015260640161062a565b7f0000000000000000000000000000000000000000000000000000000000000000421115610ecc5760405162461bcd60e51b8152602060048201526007602482015266195e1c1a5c995960ca1b604482015260640161062a565b610ede8282610ed961172b565b61192e565b5050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f2a5760405162461bcd60e51b815260040161062a90611f95565b6000610f3461172b565b905080821115610f7f5760405162461bcd60e51b81526020600482015260166024820152751cda5e9948195e1959591cc818dbdb1b185d195c985b60521b604482015260640161062a565b60008111610fbf5760405162461bcd60e51b815260206004820152600d60248201526c1b9bc818dbdb1b185d195c985b609a1b604482015260640161062a565b610fca601482611e46565b82101561100a5760405162461bcd60e51b815260206004820152600e60248201526d1cda5e99481d1bdbc81cdb585b1b60921b604482015260640161062a565b816003600082825461101c9190611fcd565b90915550505050565b60008080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110715760405162461bcd60e51b815260040161062a90611f95565b83600360008282546110839190611fb6565b92505081905550600061109860015486611ac5565b90506002548111156110d2576110b96110b386600254611ac5565b82611ae4565b94506110ca6110b387600254611ac5565b955060025490505b8086106111215760405162461bcd60e51b815260206004820152601860248201527f6368616c6c656e6765206e6f74207375636365737366756c0000000000000000604482015260640161062a565b60405163a9059cbb60e01b81526001600160a01b038881166004830152602482018790527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b49190611ee1565b506111be81611af9565b94969495507f0000000000000000000000000000000000000000000000000000000000000000949350505050565b6000546001600160a01b031633148061120e57506000546001600160a01b0316155b61122a5760405162461bcd60e51b815260040161062a90611f46565b6003541561124a5760405162461bcd60e51b815260040161062a90611f69565b600154811115611265576112606203f480611910565b61127f565b61127661127061172b565b826117bb565b61127f57600080fd5b6001819055610c326117d4565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633036101f0576112c78461182b565b506001949350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113395760405162461bcd60e51b815260206004820152600c60248201526b666163746f7279206f6e6c7960a01b604482015260640161062a565b7f000000000000000000000000000000000000000000000000000000000000000082101561139b5760405162461bcd60e51b815260206004820152600f60248201526e0c6ded8d840dcdee840cadcdeeaced608b1b604482015260640161062a565b6113a485611666565b600184905560058390556113b985828461192e565b5050505050565b600042600454106113fe5760405162461bcd60e51b815260206004820152600860248201526731b7b7b63237bbb760c11b604482015260640161062a565b7f00000000000000000000000000000000000000000000000000000000000000004211156114585760405162461bcd60e51b8152602060048201526007602482015266195e1c1a5c995960ca1b604482015260640161062a565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114bf5760405162461bcd60e51b815260206004820152600c60248201526b6f6e6c7920666163746f727960a01b604482015260640161062a565b600554826002546114d09190611fcd565b111561150f5760405162461bcd60e51b815260206004820152600e60248201526d1b1a5b5a5d08195e18d95959195960921b604482015260640161062a565b60006002836002546005546115249190611fb6565b61152e9190611fb6565b6115389190611e46565b90506115448382611fcd565b600560008282546115559190611fb6565b9091555061156590508382611fcd565b9392505050565b6000546001600160a01b031633148061158e57506000546001600160a01b0316155b6115aa5760405162461bcd60e51b815260040161062a90611f46565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316036115ed57610b4e82826109d5565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af115801561163c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116609190611ee1565b50505050565b6000546001600160a01b031633148061168857506000546001600160a01b0316155b6116a45760405162461bcd60e51b815260040161062a90611f46565b6001600160a01b0381166116e05760405162461bcd60e51b815260206004820152600360248201526203078360ec1b604482015260640161062a565b600080546001600160a01b0319166001600160a01b0383169081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b69190611efe565b905090565b6002546000906117cb8385611e27565b10159392505050565b7fcb2040b7eb3265a4335698c9ecbe81a5f9857e92aa32e07ce235f44c321a7e356117fd61172b565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a1565b6003541561184b5760405162461bcd60e51b815260040161062a90611f69565b60405163a47d75ad60e01b81526004810182905263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a47d75ad906044016020604051808303816000875af11580156118e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119059190611efe565b9050610ede81611af9565b600061191c8242611fcd565b9050600454811115610ede5760045550565b6005548260025461193f9190611fcd565b111561197e5760405162461bcd60e51b815260206004820152600e60248201526d1b1a5b5a5d08195e18d95959195960921b604482015260640161062a565b6040516365e5314760e11b81526001600160a01b0384811660048301526024820184905263ffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660448401527f00000000000000000000000000000000000000000000000000000000000000001660648301527f0000000000000000000000000000000000000000000000000000000000000000169063cbca628e90608401600060405180830381600087803b158015611a3c57600080fd5b505af1158015611a50573d6000803e3d6000fd5b505050508160026000828254611a669190611fcd565b92505081905550611a79816001546117bb565b610b465760405162461bcd60e51b815260206004820152601760248201527f6e6f742077656c6c20636f6c6c61746572616c697a6564000000000000000000604482015260640161062a565b6000670de0b6b3a7640000611ada8385611e27565b6115659190611e46565b600081611ada670de0b6b3a764000085611e27565b600254811115611b0857600080fd5b8060026000828254611b1a9190611fb6565b90915550610c3290506117d4565b8015158114610c3257600080fd5b60008060408385031215611b4957600080fd5b823591506020830135611b5b81611b28565b809150509250929050565b60008083601f840112611b7857600080fd5b50813567ffffffffffffffff811115611b9057600080fd5b602083019150836020828501011115611ba857600080fd5b9250929050565b60008060008060408587031215611bc557600080fd5b843567ffffffffffffffff80821115611bdd57600080fd5b818701915087601f830112611bf157600080fd5b813581811115611c0057600080fd5b8860208260051b8501011115611c1557600080fd5b602092830196509450908601359080821115611c3057600080fd5b50611c3d87828801611b66565b95989497509550505050565b6001600160a01b0381168114610c3257600080fd5b60008060408385031215611c7157600080fd5b8235611c7c81611c49565b946020939093013593505050565b600060208284031215611c9c57600080fd5b5035919050565b60008060408385031215611cb657600080fd5b50508035926020909101359150565b600080600060608486031215611cda57600080fd5b8335611ce581611c49565b95602085013595506040909401359392505050565b60008060008060608587031215611d1057600080fd5b8435611d1b81611c49565b935060208501359250604085013567ffffffffffffffff811115611d3e57600080fd5b611c3d87828801611b66565b600080600080600060a08688031215611d6257600080fd5b8535611d6d81611c49565b97602087013597506040870135966060810135965060800135945092505050565b600080600060608486031215611da357600080fd5b8335611dae81611c49565b92506020840135611dbe81611c49565b929592945050506040919091013590565b600060208284031215611de157600080fd5b813561156581611c49565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff83811690831681811015611e1f57611e1f611dec565b039392505050565b6000816000190483118215151615611e4157611e41611dec565b500290565b600082611e6357634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611e7a57600080fd5b815161156581611c49565b6001600160a01b03848116825260406020808401829052908301849052600091859160608501845b87811015611ed4578435611ec081611c49565b841682529382019390820190600101611ead565b5098975050505050505050565b600060208284031215611ef357600080fd5b815161156581611b28565b600060208284031215611f1057600080fd5b5051919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b6020808252601290820152716368616c6c656e6765732070656e64696e6760701b604082015260600190565b6020808252600790820152663737ba10343ab160c91b604082015260600190565b600082821015611fc857611fc8611dec565b500390565b60008219821115611fe057611fe0611dec565b50019056fea26469706673582212203576468f9ec3ce33ed2223ac2419ce0258382a0d163b9954b4036e6582a83ec064736f6c634300080d0033a2646970667358221220353a13207fe4f7ffb818f21c9638b7b1c54e4a0a0c7153c540278b81b866db6e64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80632e292e8d1461003b57806353af18071461006a575b600080fd5b61004e6100493660046103fe565b61007d565b6040516001600160a01b03909116815260200160405180910390f35b61004e610078366004610472565b6102d8565b604051635861764160e11b815260048101829052600090869082906001600160a01b0383169063b0c2ec82906024016020604051808303816000875af11580156100cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ef919061051a565b9050600061015d836001600160a01b03166346c715fa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610134573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101589190610533565b610387565b60405163d1a15ff160e01b81526001600160a01b0380831660048301526000602483018190526044830152608060648301526005608483015264636c6f6e6560d81b60a48301529192509089169063d1a15ff19060c401600060405180830381600087803b1580156101ce57600080fd5b505af11580156101e2573d6000803e3d6000fd5b50505050806001600160a01b031663aee1a95988856001600160a01b031663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610234573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610258919061051a565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015260448101859052606481018990526084810188905260a401600060405180830381600087803b1580156102b357600080fd5b505af11580156102c7573d6000803e3d6000fd5b50929b9a5050505050505050505050565b60008b338c8c8c8c8c8c8c8c8c8c6040516102f2906103d9565b6001600160a01b039c8d1681529a8c1660208c0152988b1660408b0152969099166060890152608088019490945260a087019290925260c086015260e085015261010084015263ffffffff9384166101208401526101408301529190911661016082015261018001604051809103906000f080158015610376573d6000803e3d6000fd5b509c9b505050505050505050505050565b6000808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f0949350505050565b6123ee8061055883390190565b6001600160a01b03811681146103fb57600080fd5b50565b600080600080600060a0868803121561041657600080fd5b8535610421816103e6565b94506020860135610431816103e6565b93506040860135610441816103e6565b94979396509394606081013594506080013592915050565b803563ffffffff8116811461046d57600080fd5b919050565b60008060008060008060008060008060006101608c8e03121561049457600080fd5b8b3561049f816103e6565b9a5060208c01356104af816103e6565b995060408c01356104bf816103e6565b985060608c0135975060808c0135965060a08c0135955060c08c0135945060e08c013593506104f16101008d01610459565b92506101208c013591506105086101408d01610459565b90509295989b509295989b9093969950565b60006020828403121561052c57600080fd5b5051919050565b60006020828403121561054557600080fd5b8151610550816103e6565b939250505056fe6101c06040523480156200001257600080fd5b50604051620023ee380380620023ee83398101604081905262000035916200019f565b8b6001600160a01b038116620000775760405162461bcd60e51b815260206004820152600360248201526203078360ec1b604482015260640160405180910390fd5b600080546001600160a01b0319166001600160a01b03831690811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3503360e0523060c0526001600160a01b038b81166101005260018390558a81166101205289166101405263ffffffff8084166101805281166101a052878710156200010957600080fd5b6101608890526200011b85426200025e565b60a052608084905262000130610e1062000148565b50505060059290925550620002859650505050505050565b60006200015682426200025e565b9050600454811115620001695760048190555b5050565b80516001600160a01b03811681146200018557600080fd5b919050565b805163ffffffff811681146200018557600080fd5b6000806000806000806000806000806000806101808d8f031215620001c357600080fd5b620001ce8d6200016d565b9b50620001de60208e016200016d565b9a50620001ee60408e016200016d565b9950620001fe60608e016200016d565b985060808d0151975060a08d0151965060c08d0151955060e08d015194506101008d01519350620002336101208e016200018a565b92506101408d015191506200024c6101608e016200018a565b90509295989b509295989b509295989b565b600082198211156200028057634e487b7160e01b600052601160045260246000fd5b500190565b60805160a05160c05160e05161010051610120516101405161016051610180516101a05161201b620003d3600039600081816102a301528181610555015281816111c50152818161186601526119a90152600081816103fc015281816105ac01526119d101526000818161046501528181610b1b015261133b0152600081816104da0152818161078101528181610a5901528181611147015281816115ac01526117430152600081816104b3015281816106350152818161088801528181610bb301528181610d5e015281816112980152818161189001526119f801526000818161025101528181610c4201528181610eed015261103401526000818161048c015281816112dd0152611463015260006103570152600081816103300152818161097101528181610af201528181610c8101528181610e74015261140001526000610527015261201b6000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c8063787a08a61161010f578063b0c2ec82116100a2578063d8dfeb4511610071578063d8dfeb45146104d5578063d9caed12146104fc578063f2fde38b1461050f578063f3f480d91461052257600080fd5b8063b0c2ec821461044d578063babe7c7414610460578063c45a015514610487578063c4d4803a146104ae57600080fd5b8063a1362033116100de578063a1362033146103f7578063a4c0ed361461041e578063a4d66daf14610431578063aee1a9591461043a57600080fd5b8063787a08a6146103c95780638da5cb5b146103d257806397fbdf08146103e5578063a035b1fe146103ee57600080fd5b8063402d88831161018757806346c715fa1161015657806346c715fa146103525780634f02c42014610379578063707271b11461038257806372bf079e146103b657600080fd5b8063402d8883146102fd57806340c10f191461030557806342d02041146103185780634665096d1461032b57600080fd5b8063365a86fc116101c3578063365a86fc1461024c578063371fd8e61461028b5780633a7c29fb1461029e5780633e94e242146102da57600080fd5b806308262940146101f55780631bbea34c1461021b57806324e657fe14610230578063350c35e914610239575b600080fd5b610208610203366004611b36565b610549565b6040519081526020015b60405180910390f35b61022e610229366004611baf565b6105f5565b005b61020860035481565b61022e610247366004611c5e565b6109d5565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610212565b61022e610299366004611c8a565b610b53565b6102c57f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610212565b6102ed6102e8366004611ca3565b610c35565b6040519015158152602001610212565b61022e610d07565b61022e610313366004611c5e565b610dd8565b61022e610326366004611c8a565b610ee2565b6102087f000000000000000000000000000000000000000000000000000000000000000081565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b61020860025481565b610395610390366004611cc5565b611025565b60408051938452602084019290925263ffffffff1690820152606001610212565b61022e6103c4366004611c8a565b6111ec565b61020860045481565b600054610273906001600160a01b031681565b610208610e1081565b61020860015481565b6102c57f000000000000000000000000000000000000000000000000000000000000000081565b6102ed61042c366004611cfa565b61128c565b61020860055481565b61022e610448366004611d4a565b6112d2565b61020861045b366004611c8a565b6113c0565b6102087f000000000000000000000000000000000000000000000000000000000000000081565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b61022e61050a366004611d8e565b61156c565b61022e61051d366004611dcf565b611666565b6102087f000000000000000000000000000000000000000000000000000000000000000081565b600080620f424061057a7f000000000000000000000000000000000000000000000000000000000000000082611e02565b61058a9063ffffffff1686611e27565b6105949190611e46565b905082156105a35790506105ef565b620f42406105d17f000000000000000000000000000000000000000000000000000000000000000082611e02565b6105e19063ffffffff1686611e27565b6105eb9190611e46565b9150505b92915050565b600254156106335760405162461bcd60e51b81526020600482015260066024820152651b5a5b9d195960d21b60448201526064015b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610691573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b59190611e68565b6001600160a01b0316635e1121cf3386866040518463ffffffff1660e01b81526004016106e493929190611e85565b602060405180830381865afa158015610701573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107259190611ee1565b6107615760405162461bcd60e51b815260206004820152600d60248201526c1b9bdd081c5d585b1a599a5959609a1b604482015260640161062a565b6000546040516370a0823160e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263a9059cbb9291169083906370a0823190602401602060405180830381865afa1580156107d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f89190611efe565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610843573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108679190611ee1565b506000546040516370a0823160e01b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263a9059cbb9291169083906370a0823190602401602060405180830381865afa1580156108db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ff9190611efe565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561094a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096e9190611ee1565b507f000000000000000000000000000000000000000000000000000000000000000060045560405133907faca80c800ec0d2aa9d9d31b7f886a1dd3067d4676abc637626a18ffb9381653d906109c79085908590611f17565b60405180910390a250505050565b6000546001600160a01b03163314806109f757506000546001600160a01b0316155b610a135760405162461bcd60e51b815260040161062a90611f46565b60035415610a335760405162461bcd60e51b815260040161062a90611f69565b60405163a9059cbb60e01b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610aa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac69190611ee1565b506000610ad161172b565b9050610adf816001546117bb565b610ae857600080fd5b80600003610b19577f0000000000000000000000000000000000000000000000000000000000000000600455610b46565b7f0000000000000000000000000000000000000000000000000000000000000000811015610b4657600080fd5b610b4e6117d4565b505050565b6000546001600160a01b0316331480610b7557506000546001600160a01b0316155b610b915760405162461bcd60e51b815260040161062a90611f46565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303816000875af1158015610c04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c289190611ee1565b50610c328161182b565b50565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c7f5760405162461bcd60e51b815260040161062a90611f95565b7f00000000000000000000000000000000000000000000000000000000000000004210610cae575060006105ef565b82600154610cbc9190611e27565b610cce670de0b6b3a764000084611e27565b10610cff578260036000828254610ce59190611fb6565b90915550610cf7905062015180611910565b5060016105ef565b5060006105ef565b6000546001600160a01b0316331480610d2957506000546001600160a01b0316155b610d455760405162461bcd60e51b815260040161062a90611f46565b6040516370a0823160e01b8152306004820152610dd6907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610dad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd19190611efe565b61182b565b565b6000546001600160a01b0316331480610dfa57506000546001600160a01b0316155b610e165760405162461bcd60e51b815260040161062a90611f46565b60035415610e365760405162461bcd60e51b815260040161062a90611f69565b4260045410610e725760405162461bcd60e51b815260206004820152600860248201526731b7b7b63237bbb760c11b604482015260640161062a565b7f0000000000000000000000000000000000000000000000000000000000000000421115610ecc5760405162461bcd60e51b8152602060048201526007602482015266195e1c1a5c995960ca1b604482015260640161062a565b610ede8282610ed961172b565b61192e565b5050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f2a5760405162461bcd60e51b815260040161062a90611f95565b6000610f3461172b565b905080821115610f7f5760405162461bcd60e51b81526020600482015260166024820152751cda5e9948195e1959591cc818dbdb1b185d195c985b60521b604482015260640161062a565b60008111610fbf5760405162461bcd60e51b815260206004820152600d60248201526c1b9bc818dbdb1b185d195c985b609a1b604482015260640161062a565b610fca601482611e46565b82101561100a5760405162461bcd60e51b815260206004820152600e60248201526d1cda5e99481d1bdbc81cdb585b1b60921b604482015260640161062a565b816003600082825461101c9190611fcd565b90915550505050565b60008080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110715760405162461bcd60e51b815260040161062a90611f95565b83600360008282546110839190611fb6565b92505081905550600061109860015486611ac5565b90506002548111156110d2576110b96110b386600254611ac5565b82611ae4565b94506110ca6110b387600254611ac5565b955060025490505b8086106111215760405162461bcd60e51b815260206004820152601860248201527f6368616c6c656e6765206e6f74207375636365737366756c0000000000000000604482015260640161062a565b60405163a9059cbb60e01b81526001600160a01b038881166004830152602482018790527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b49190611ee1565b506111be81611af9565b94969495507f0000000000000000000000000000000000000000000000000000000000000000949350505050565b6000546001600160a01b031633148061120e57506000546001600160a01b0316155b61122a5760405162461bcd60e51b815260040161062a90611f46565b6003541561124a5760405162461bcd60e51b815260040161062a90611f69565b600154811115611265576112606203f480611910565b61127f565b61127661127061172b565b826117bb565b61127f57600080fd5b6001819055610c326117d4565b60006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633036101f0576112c78461182b565b506001949350505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146113395760405162461bcd60e51b815260206004820152600c60248201526b666163746f7279206f6e6c7960a01b604482015260640161062a565b7f000000000000000000000000000000000000000000000000000000000000000082101561139b5760405162461bcd60e51b815260206004820152600f60248201526e0c6ded8d840dcdee840cadcdeeaced608b1b604482015260640161062a565b6113a485611666565b600184905560058390556113b985828461192e565b5050505050565b600042600454106113fe5760405162461bcd60e51b815260206004820152600860248201526731b7b7b63237bbb760c11b604482015260640161062a565b7f00000000000000000000000000000000000000000000000000000000000000004211156114585760405162461bcd60e51b8152602060048201526007602482015266195e1c1a5c995960ca1b604482015260640161062a565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114bf5760405162461bcd60e51b815260206004820152600c60248201526b6f6e6c7920666163746f727960a01b604482015260640161062a565b600554826002546114d09190611fcd565b111561150f5760405162461bcd60e51b815260206004820152600e60248201526d1b1a5b5a5d08195e18d95959195960921b604482015260640161062a565b60006002836002546005546115249190611fb6565b61152e9190611fb6565b6115389190611e46565b90506115448382611fcd565b600560008282546115559190611fb6565b9091555061156590508382611fcd565b9392505050565b6000546001600160a01b031633148061158e57506000546001600160a01b0316155b6115aa5760405162461bcd60e51b815260040161062a90611f46565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316036115ed57610b4e82826109d5565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af115801561163c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116609190611ee1565b50505050565b6000546001600160a01b031633148061168857506000546001600160a01b0316155b6116a45760405162461bcd60e51b815260040161062a90611f46565b6001600160a01b0381166116e05760405162461bcd60e51b815260206004820152600360248201526203078360ec1b604482015260640161062a565b600080546001600160a01b0319166001600160a01b0383169081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b69190611efe565b905090565b6002546000906117cb8385611e27565b10159392505050565b7fcb2040b7eb3265a4335698c9ecbe81a5f9857e92aa32e07ce235f44c321a7e356117fd61172b565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a1565b6003541561184b5760405162461bcd60e51b815260040161062a90611f69565b60405163a47d75ad60e01b81526004810182905263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a47d75ad906044016020604051808303816000875af11580156118e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119059190611efe565b9050610ede81611af9565b600061191c8242611fcd565b9050600454811115610ede5760045550565b6005548260025461193f9190611fcd565b111561197e5760405162461bcd60e51b815260206004820152600e60248201526d1b1a5b5a5d08195e18d95959195960921b604482015260640161062a565b6040516365e5314760e11b81526001600160a01b0384811660048301526024820184905263ffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660448401527f00000000000000000000000000000000000000000000000000000000000000001660648301527f0000000000000000000000000000000000000000000000000000000000000000169063cbca628e90608401600060405180830381600087803b158015611a3c57600080fd5b505af1158015611a50573d6000803e3d6000fd5b505050508160026000828254611a669190611fcd565b92505081905550611a79816001546117bb565b610b465760405162461bcd60e51b815260206004820152601760248201527f6e6f742077656c6c20636f6c6c61746572616c697a6564000000000000000000604482015260640161062a565b6000670de0b6b3a7640000611ada8385611e27565b6115659190611e46565b600081611ada670de0b6b3a764000085611e27565b600254811115611b0857600080fd5b8060026000828254611b1a9190611fb6565b90915550610c3290506117d4565b8015158114610c3257600080fd5b60008060408385031215611b4957600080fd5b823591506020830135611b5b81611b28565b809150509250929050565b60008083601f840112611b7857600080fd5b50813567ffffffffffffffff811115611b9057600080fd5b602083019150836020828501011115611ba857600080fd5b9250929050565b60008060008060408587031215611bc557600080fd5b843567ffffffffffffffff80821115611bdd57600080fd5b818701915087601f830112611bf157600080fd5b813581811115611c0057600080fd5b8860208260051b8501011115611c1557600080fd5b602092830196509450908601359080821115611c3057600080fd5b50611c3d87828801611b66565b95989497509550505050565b6001600160a01b0381168114610c3257600080fd5b60008060408385031215611c7157600080fd5b8235611c7c81611c49565b946020939093013593505050565b600060208284031215611c9c57600080fd5b5035919050565b60008060408385031215611cb657600080fd5b50508035926020909101359150565b600080600060608486031215611cda57600080fd5b8335611ce581611c49565b95602085013595506040909401359392505050565b60008060008060608587031215611d1057600080fd5b8435611d1b81611c49565b935060208501359250604085013567ffffffffffffffff811115611d3e57600080fd5b611c3d87828801611b66565b600080600080600060a08688031215611d6257600080fd5b8535611d6d81611c49565b97602087013597506040870135966060810135965060800135945092505050565b600080600060608486031215611da357600080fd5b8335611dae81611c49565b92506020840135611dbe81611c49565b929592945050506040919091013590565b600060208284031215611de157600080fd5b813561156581611c49565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff83811690831681811015611e1f57611e1f611dec565b039392505050565b6000816000190483118215151615611e4157611e41611dec565b500290565b600082611e6357634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611e7a57600080fd5b815161156581611c49565b6001600160a01b03848116825260406020808401829052908301849052600091859160608501845b87811015611ed4578435611ec081611c49565b841682529382019390820190600101611ead565b5098975050505050505050565b600060208284031215611ef357600080fd5b815161156581611b28565b600060208284031215611f1057600080fd5b5051919050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b6020808252601290820152716368616c6c656e6765732070656e64696e6760701b604082015260600190565b6020808252600790820152663737ba10343ab160c91b604082015260600190565b600082821015611fc857611fc8611dec565b500390565b60008219821115611fe057611fe0611dec565b50019056fea26469706673582212203576468f9ec3ce33ed2223ac2419ce0258382a0d163b9954b4036e6582a83ec064736f6c634300080d0033a2646970667358221220353a13207fe4f7ffb818f21c9638b7b1c54e4a0a0c7153c540278b81b866db6e64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "clonePosition(address,address,address,uint256,uint256)": {
        "params": {
          "_existing": "address of the position we want to clone",
          "_initialCol": "initial collateral to be posted by owner (dec 18)",
          "_initialMint": "initial amount to mint before fees/reserve by owner",
          "_owner": "owner address of the new clone",
          "_zchf": "ZCHF address"
        },
        "returns": {
          "_0": "address of the newly created clone position"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "clonePosition(address,address,address,uint256,uint256)": {
        "notice": "clone an existing position. This can be a clone of another clone, or an origin position. If it's another clone, then the liquidation price is taken from the clone and the rest from the origin. Limit is \"inherited\" (and adjusted) from the origin."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0x87a81A66F1716A971e1513bF2fAc7572b06bc8DD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_existing",
          "type": "address"
        }
      ],
      "name": "clonePosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zchf",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_challengePeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_yearlyInterestPPM",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_liqPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reserve",
          "type": "uint32"
        }
      ],
      "name": "createNewPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xddcf2985f3e565d181bbdf1601fb844b627f7db2b3a56616c76e7e0e0b44a2ff",
  "receipt": {
    "to": null,
    "from": "0xaA770D646be470BA8Cb97566DD83662334D5D7CF",
    "contractAddress": "0x87a81A66F1716A971e1513bF2fAc7572b06bc8DD",
    "transactionIndex": 51,
    "gasUsed": "2045176",
    "logsBloom": "0x
    "blockHash": "0xa1ccb6d9112962e55fe2eb312572d493db905ad33f8094eb7cc764727430e495",
    "transactionHash": "0xddcf2985f3e565d181bbdf1601fb844b627f7db2b3a56616c76e7e0e0b44a2ff",
    "logs": [],
    "blockNumber": 4058772,
    "cumulativeGasUsed": "17246036",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "68aa8913e8e7f7f4e6fdb421178eaa91",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_existing\",\"type\":\"address\"}],\"name\":\"clonePosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zchf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_challengePeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_yearlyInterestPPM\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_liqPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reserve\",\"type\":\"uint32\"}],\"name\":\"createNewPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clonePosition(address)\":{\"params\":{\"_existing\":\"address of the position we want to clone\"},\"returns\":{\"_0\":\"address of the newly created clone position\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clonePosition(address)\":{\"notice\":\"clone an existing position. This can be a clone of another clone, or an original position.\"},\"createNewPosition(address,address,address,uint256,uint256,uint256,uint256,uint256,uint32,uint256,uint32)\":{\"notice\":\"Create a completely new position in a newly deployed contract. Must be called through minting hub to be recognized as valid position.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PositionFactory.sol\":\"PositionFactory\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Position.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./utils/MathUtil.sol\\\";\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IPosition.sol\\\";\\nimport \\\"./interface/IReserve.sol\\\";\\nimport \\\"./interface/IFrankencoin.sol\\\";\\n\\n/**\\n * A collateralized minting position.\\n */\\ncontract Position is Ownable, IPosition, MathUtil {\\n    /**\\n     * Note that this contract is intended to be cloned. All clones will share the same values for\\n     * the constant and immutable fields, but have their own values for the other fields.\\n     */\\n\\n    /**\\n     * The zchf price per unit of the collateral below which challenges succeed, (36 - collateral.decimals) decimals\\n     */\\n    uint256 public price;\\n\\n    /**\\n     * Net minted amount, including reserve.\\n     */\\n    uint256 public minted;\\n\\n    /**\\n     * Amount of the collateral that is currently under a challenge.\\n     * Used to figure out whether there are pending challenges.\\n     */\\n    uint256 public challengedAmount;\\n\\n    /**\\n     * Challenge period in seconds.\\n     */\\n    uint256 public immutable challengePeriod;\\n\\n    /**\\n     * End of the latest cooldown. If this is in the future, minting is suspended.\\n     */\\n    uint256 public cooldown;\\n\\n    /**\\n     * How much can be minted at most.\\n     */\\n    uint256 public limit;\\n\\n    /**\\n     * Timestamp when minting can start and the position no longer denied.\\n     */\\n    uint256 public immutable start;\\n\\n    /**\\n     * Timestamp of the expiration of the position. After expiration, challenges cannot be averted\\n     * any more. This is also the basis for fee calculations.\\n     */\\n    uint256 public expiration;\\n\\n    /**\\n     * The original position to help identifying clones.\\n     */\\n    address public immutable original;\\n\\n    /**\\n     * Pointer to the minting hub.\\n     */\\n    address public immutable hub;\\n\\n    /**\\n     * The Frankencoin contract.\\n     */\\n    IFrankencoin public immutable zchf;\\n\\n    /**\\n     * The collateral token.\\n     */\\n    IERC20 public immutable override collateral;\\n\\n    /**\\n     * Minimum acceptable collateral amount to prevent dust.\\n     */\\n    uint256 public immutable override minimumCollateral;\\n\\n    /**\\n     * The interest in parts per million per year that is deducted when minting Frankencoins.\\n     * To be paid upfront.\\n     */\\n    uint32 public immutable yearlyInterestPPM;\\n\\n    /**\\n     * The reserve contribution in parts per million of the minted amount.\\n     */\\n    uint32 public immutable reserveContribution;\\n\\n    event PositionOpened(\\n        address indexed owner,\\n        address original,\\n        address zchf,\\n        address collateral,\\n        uint256 price\\n    );\\n    event MintingUpdate(\\n        uint256 collateral,\\n        uint256 price,\\n        uint256 minted,\\n        uint256 limit\\n    );\\n    event PositionDenied(address indexed sender, string message); // emitted if closed by governance\\n\\n    error InsufficientCollateral();\\n\\n    /**\\n     * See MintingHub.openPosition\\n     */\\n    constructor(\\n        address _owner,\\n        address _hub,\\n        address _zchf,\\n        address _collateral,\\n        uint256 _minCollateral,\\n        uint256 _initialLimit,\\n        uint256 _initPeriod,\\n        uint256 _duration,\\n        uint256 _challengePeriod,\\n        uint32 _yearlyInterestPPM,\\n        uint256 _liqPrice,\\n        uint32 _reservePPM\\n    ) {\\n        require(_initPeriod >= 3 days); // must be at least three days, recommended to use higher values\\n        _setOwner(_owner);\\n        original = address(this);\\n        hub = _hub;\\n        price = _liqPrice;\\n        zchf = IFrankencoin(_zchf);\\n        collateral = IERC20(_collateral);\\n        yearlyInterestPPM = _yearlyInterestPPM;\\n        reserveContribution = _reservePPM;\\n        minimumCollateral = _minCollateral;\\n        challengePeriod = _challengePeriod;\\n        start = block.timestamp + _initPeriod; // at least three days time to deny the position\\n        cooldown = start;\\n        expiration = start + _duration;\\n        limit = _initialLimit;\\n\\n        emit PositionOpened(\\n            _owner,\\n            original,\\n            _zchf,\\n            address(collateral),\\n            _liqPrice\\n        );\\n    }\\n\\n    /**\\n     * Method to initialize a freshly created clone. It is the responsibility of the creator to make sure this is only\\n     * called once and to call reduceLimitForClone on the original position before initializing the clone.\\n     */\\n    function initializeClone(\\n        address owner,\\n        uint256 _price,\\n        uint256 _coll,\\n        uint256 _initialMint,\\n        uint256 expirationTime\\n    ) external onlyHub {\\n        if (_coll < minimumCollateral) revert InsufficientCollateral();\\n        price = (_initialMint * ONE_DEC18) / _coll;\\n        _initialMint = (price * _coll) / ONE_DEC18; // to cancel potential rounding errors\\n        if (price > _price) revert InsufficientCollateral();\\n        _setOwner(owner);\\n        limit = _initialMint;\\n        expiration = expirationTime;\\n        _mint(owner, _initialMint, _coll);\\n\\n        emit PositionOpened(\\n            owner,\\n            original,\\n            address(zchf),\\n            address(collateral),\\n            _price\\n        );\\n    }\\n\\n    /**\\n     * Adjust this position's limit to allow a clone to mint its own Frankencoins.\\n     * Invariant: global limit stays the same.\\n     *\\n     * Cloning a position is only allowed if the position is not challenged, not expired and not in cooldown.\\n     */\\n    function reduceLimitForClone(\\n        uint256 mint_,\\n        uint256 exp\\n    ) external noChallenge noCooldown alive onlyHub {\\n        if (exp > expiration || exp < start) revert TooLate();\\n        uint256 newLimit = limit - mint_;\\n        if (minted > newLimit) revert LimitExceeded();\\n        limit = newLimit;\\n    }\\n\\n    error TooLate();\\n\\n    /**\\n     * Qualified pool share holders can call this method to immediately expire a freshly proposed position.\\n     */\\n    function deny(\\n        address[] calldata helpers,\\n        string calldata message\\n    ) external {\\n        if (block.timestamp >= start) revert TooLate();\\n        IReserve(zchf.reserve()).checkQualified(msg.sender, helpers);\\n        _close(); // since expiration is immutable, we put it under eternal cooldown\\n        emit PositionDenied(msg.sender, message);\\n    }\\n\\n    function _close() internal {\\n        cooldown = type(uint256).max;\\n    }\\n\\n    function isClosed() public view returns (bool) {\\n        return cooldown == type(uint256).max;\\n    }\\n\\n    /**\\n     * This is how much the minter can actually use when minting ZCHF, with the rest being used\\n     * to buy reserve pool shares.\\n     */\\n    function getUsableMint(\\n        uint256 totalMint,\\n        bool afterFees\\n    ) public view returns (uint256) {\\n        if (afterFees) {\\n            return\\n                (totalMint *\\n                    (1000_000 - reserveContribution - calculateCurrentFee())) /\\n                1000_000;\\n        } else {\\n            return (totalMint * (1000_000 - reserveContribution)) / 1000_000;\\n        }\\n    }\\n\\n    /**\\n     * \\\"All in one\\\" function to adjust the outstanding amount of ZCHF, the collateral amount,\\n     * and the price in one transaction.\\n     */\\n    function adjust(\\n        uint256 newMinted,\\n        uint256 newCollateral,\\n        uint256 newPrice\\n    ) external onlyOwner {\\n        uint256 colbal = _collateralBalance();\\n        if (newCollateral > colbal) {\\n            collateral.transferFrom(\\n                msg.sender,\\n                address(this),\\n                newCollateral - colbal\\n            );\\n        }\\n        // Must be called after collateral deposit, but before withdrawal\\n        if (newMinted < minted) {\\n            zchf.burnFromWithReserve(\\n                msg.sender,\\n                minted - newMinted,\\n                reserveContribution\\n            );\\n            minted = newMinted;\\n        }\\n        if (newCollateral < colbal) {\\n            withdrawCollateral(msg.sender, colbal - newCollateral);\\n        }\\n        // Must be called after collateral withdrawal\\n        if (newMinted > minted) {\\n            mint(msg.sender, newMinted - minted);\\n        }\\n        if (newPrice != price) {\\n            adjustPrice(newPrice);\\n        }\\n    }\\n\\n    /**\\n     * Allows the position owner to adjust the liquidation price as long as there is no pending challenge.\\n     * Lowering the liquidation price can be done with immediate effect, given that there is enough collateral.\\n     * Increasing the liquidation price triggers a cooldown period of 3 days, during which minting is suspended.\\n     */\\n    function adjustPrice(uint256 newPrice) public onlyOwner noChallenge {\\n        if (newPrice > price) {\\n            _restrictMinting(3 days);\\n        } else {\\n            _checkCollateral(_collateralBalance(), newPrice);\\n        }\\n        price = newPrice;\\n        emit MintingUpdate(_collateralBalance(), price, minted, limit);\\n    }\\n\\n    function _collateralBalance() internal view returns (uint256) {\\n        return IERC20(collateral).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * Mint ZCHF as long as there is no open challenge, the position is not subject to a cooldown,\\n     * and there is sufficient collateral.\\n     */\\n    function mint(\\n        address target,\\n        uint256 amount\\n    ) public onlyOwner noChallenge noCooldown alive {\\n        _mint(target, amount, _collateralBalance());\\n    }\\n\\n    function calculateCurrentFee() public view returns (uint32) {\\n        uint256 exp = expiration;\\n        uint256 time = block.timestamp;\\n        if (time >= exp) {\\n            return 0;\\n        } else {\\n            if (time < start) {\\n                time = start;\\n            }\\n            // Time resolution is in the range of minutes for typical interest rates.\\n            return uint32(((exp - time) * yearlyInterestPPM) / 365 days);\\n        }\\n    }\\n\\n    error LimitExceeded();\\n\\n    function _mint(\\n        address target,\\n        uint256 amount,\\n        uint256 collateral_\\n    ) internal {\\n        if (minted + amount > limit) revert LimitExceeded();\\n        zchf.mintWithReserve(\\n            target,\\n            amount,\\n            reserveContribution,\\n            calculateCurrentFee()\\n        );\\n        minted += amount;\\n\\n        _checkCollateral(collateral_, price);\\n        emit MintingUpdate(_collateralBalance(), price, minted, limit);\\n    }\\n\\n    function _restrictMinting(uint256 period) internal {\\n        uint256 horizon = block.timestamp + period;\\n        if (horizon > cooldown) {\\n            cooldown = horizon;\\n        }\\n    }\\n\\n    /**\\n     * Repay some ZCHF. Requires an allowance to be in place. If too much is repaid, the call fails.\\n     * It is possible to repay while there are challenges, but the collateral is locked until all is clear again.\\n     *\\n     * The repaid amount should fulfill the following equation in order to close the position, i.e. bring the minted amount to 0:\\n     * minted = amount + zchf.calculateAssignedReserve(amount, reservePPM)\\n     *\\n     * Under normal circumstances, this implies:\\n     * amount = minted * (1000000 - reservePPM)\\n     *\\n     * For example, if minted is 50 and reservePPM is 200000, it is necessary to repay 40 to be able to close the position.\\n     */\\n    function repay(uint256 amount) public {\\n        IERC20(zchf).transferFrom(msg.sender, address(this), amount);\\n        uint256 actuallyRepaid = IFrankencoin(zchf).burnWithReserve(\\n            amount,\\n            reserveContribution\\n        );\\n        _notifyRepaidInternal(actuallyRepaid);\\n        emit MintingUpdate(_collateralBalance(), price, minted, limit);\\n    }\\n\\n    error RepaidTooMuch(uint256 excess);\\n\\n    function _notifyRepaidInternal(uint256 amount) internal {\\n        if (amount > minted) revert RepaidTooMuch(amount - minted);\\n        minted -= amount;\\n    }\\n\\n    /**\\n     * Withdraw any ERC20 token that might have ended up on this address.\\n     * Withdrawing collateral is subject to the same restrictions as withdrawCollateral(...).\\n     */\\n    function withdraw(\\n        address token,\\n        address target,\\n        uint256 amount\\n    ) external onlyOwner {\\n        if (token == address(collateral)) {\\n            withdrawCollateral(target, amount);\\n        } else {\\n            uint256 balance = _collateralBalance();\\n            IERC20(token).transfer(target, amount);\\n            require(balance == _collateralBalance()); // guard against double-entry-point tokens\\n        }\\n    }\\n\\n    /**\\n     * Withdraw collateral from the position up to the extent that it is still well collateralized afterwards.\\n     * Not possible as long as there is an open challenge or the contract is subject to a cooldown.\\n     *\\n     * Withdrawing collateral below the minimum collateral amount formally closes the position.\\n     */\\n    function withdrawCollateral(\\n        address target,\\n        uint256 amount\\n    ) public onlyOwner noChallenge {\\n        if (block.timestamp <= cooldown && !isClosed()) revert Hot();\\n        uint256 balance = _withdrawCollateral(target, amount);\\n        _checkCollateral(balance, price);\\n    }\\n\\n    function _withdrawCollateral(\\n        address target,\\n        uint256 amount\\n    ) internal returns (uint256) {\\n        if (amount > 0) {\\n            // Some weird tokens fail when trying to transfer 0 amounts\\n            IERC20(collateral).transfer(target, amount);\\n        }\\n        uint256 balance = _collateralBalance();\\n        if (balance < minimumCollateral && challengedAmount == 0) {\\n            // This leaves a slightly unsatisfying possibility open: if the withdrawal happens due to a successful challenge,\\n            // there might be a small amount of collateral left that is not withheld in case there are no other pending challenges.\\n            // The only way to cleanly solve this would be to have two distinct cooldowns, one for minting and one for withdrawals.\\n            _close();\\n        }\\n\\n        emit MintingUpdate(_collateralBalance(), price, minted, limit);\\n        return balance;\\n    }\\n\\n    /**\\n     * This invariant must always hold and must always be checked when any of the three\\n     * variables change in an adverse way.\\n     */\\n    function _checkCollateral(\\n        uint256 collateralReserve,\\n        uint256 atPrice\\n    ) internal view {\\n        if (collateralReserve * atPrice < minted * ONE_DEC18)\\n            revert InsufficientCollateral();\\n    }\\n\\n    error ChallengeTooSmall();\\n\\n    function notifyChallengeStarted(uint256 size) external onlyHub {\\n        // require minimum size, note that collateral balance can be below minimum if it was partially challenged before\\n        if (size < minimumCollateral && size < _collateralBalance())\\n            revert ChallengeTooSmall();\\n        if (size == 0) revert ChallengeTooSmall();\\n        challengedAmount += size;\\n    }\\n\\n    /**\\n     * @notice check whether challenge can be averted\\n     * @param _collateralAmount   amount of collateral challenged (dec18)\\n     * @param _bidAmountZCHF      bid amount in ZCHF (dec18)\\n     * @return true if challenge can be averted\\n     */\\n    function tryAvertChallenge(\\n        uint256 _collateralAmount,\\n        uint256 _bidAmountZCHF,\\n        uint256 challengeEnd\\n    ) external onlyHub returns (bool) {\\n        if (block.timestamp >= expiration) {\\n            return false; // position expired, let every challenge succeed\\n        } else {\\n            uint256 p_ = price;\\n            if (type(uint256).max / _collateralAmount < p_) {\\n                // note that _collateralAmount > 0 is assumed\\n                return false; // price was set absurdly high, let challenge succeed\\n            } else if (_bidAmountZCHF * ONE_DEC18 >= p_ * _collateralAmount) {\\n                // Challenge cannot be started and averted in same block\\n                // This prevents a malicious challenger + bidder to postpone minting forver without risking anything\\n                require(block.timestamp != challengeEnd - challengePeriod);\\n\\n                // challenge averted, bid is high enough\\n                challengedAmount -= _collateralAmount;\\n\\n                // Don't allow minter to close the position immediately so challenge can be repeated before\\n                // the owner has a chance to mint more on an undercollateralized position\\n                _restrictMinting(1 days);\\n                return true;\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Notifies the position that a challenge was successful.\\n     * Triggers the payout of the challenged part of the collateral.\\n     * Everything else is assumed to be handled by the hub.\\n     *\\n     * @param _bidder   address of the bidder that receives the collateral\\n     * @param _bid      bid amount in ZCHF (dec18)\\n     * @param _size     size of the collateral bid for (dec 18)\\n     * @return (position owner, effective bid size in ZCHF, effective challenge size in ZCHF, repaid amount, reserve ppm)\\n     */\\n    function notifyChallengeSucceeded(\\n        address _bidder,\\n        uint256 _bid,\\n        uint256 _size\\n    ) external onlyHub returns (address, uint256, uint256, uint32) {\\n        challengedAmount -= _size;\\n        uint256 repayment = minted; // Default repayment is the amount the owner has minted\\n        uint256 colBal = _collateralBalance();\\n        if (_size > colBal) {\\n            // Challenge is larger than the position. This can for example happen if there are multiple concurrent\\n            // challenges that exceed the collateral balance in size. In this case, we need to redimension the bid and\\n            // tell the caller that a part of the bid needs to be returned to the bidder.\\n            _bid = _mulDiv(_bid, colBal, _size);\\n            _size = colBal;\\n        } else if (_size < colBal) {\\n            repayment = _mulDiv(repayment, _size, colBal);\\n        }\\n\\n        _notifyRepaidInternal(repayment); // we assume the caller takes care of the actual repayment\\n        _withdrawCollateral(_bidder, _size); // transfer collateral to the bidder and emit update\\n\\n        // Give time for additional challenges before the owner can mint again\\n        // In particular, the owner might have added collateral only seconds before the challenge ended, preventing a close\\n        _restrictMinting(3 days);\\n\\n        return (owner, _bid, repayment, reserveContribution);\\n    }\\n\\n    error Expired();\\n\\n    modifier alive() {\\n        if (block.timestamp >= expiration) revert Expired();\\n        _;\\n    }\\n\\n    error Hot();\\n\\n    modifier noCooldown() {\\n        if (block.timestamp <= cooldown) revert Hot();\\n        _;\\n    }\\n\\n    error Challenged();\\n\\n    modifier noChallenge() {\\n        if (challengedAmount > 0) revert Challenged();\\n        _;\\n    }\\n\\n    error NotHub();\\n\\n    modifier onlyHub() {\\n        if (msg.sender != address(hub)) revert NotHub();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb731ebd810e242bf9b7b1daf98e0433b0305b15113dabc64fb7a8059cb6cb925\",\"license\":\"MIT\"},\"contracts/PositionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Position.sol\\\";\\nimport \\\"./interface/IFrankencoin.sol\\\";\\n\\ncontract PositionFactory {\\n    /**\\n     * Create a completely new position in a newly deployed contract.\\n     * Must be called through minting hub to be recognized as valid position.\\n     */\\n    function createNewPosition(\\n        address _owner,\\n        address _zchf,\\n        address _collateral,\\n        uint256 _minCollateral,\\n        uint256 _initialLimit,\\n        uint256 _initPeriod,\\n        uint256 _duration,\\n        uint256 _challengePeriod,\\n        uint32 _yearlyInterestPPM,\\n        uint256 _liqPrice,\\n        uint32 _reserve\\n    ) external returns (address) {\\n        return\\n            address(\\n                new Position(\\n                    _owner,\\n                    msg.sender,\\n                    _zchf,\\n                    _collateral,\\n                    _minCollateral,\\n                    _initialLimit,\\n                    _initPeriod,\\n                    _duration,\\n                    _challengePeriod,\\n                    _yearlyInterestPPM,\\n                    _liqPrice,\\n                    _reserve\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice clone an existing position. This can be a clone of another clone,\\n     * or an original position.\\n     * @param _existing address of the position we want to clone\\n     * @return address of the newly created clone position\\n     */\\n    function clonePosition(address _existing) external returns (address) {\\n        Position existing = Position(_existing);\\n        Position clone = Position(_createClone(existing.original()));\\n        return address(clone);\\n    }\\n\\n    // copied from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n    function _createClone(address target) internal returns (address result) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(\\n                add(clone, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            result := create(0, clone, 0x37)\\n        }\\n        require(result != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x14f995ebf2a217d7e914b4a111437e75735a8f99f6e62005727bf7337cd94861\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"/**\\n* SPDX-License-Identifier: MIT\\n*\\n* Copyright (c) 2016-2019 zOS Global Limited\\n*\\n*/\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n\\n    // Optional functions\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function transferAndCall(address recipient, uint256 amount, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value changes when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0xca95e6b6324b1c92dca4759b3da5fc251053691de885f2e23021eb5abdddea9c\",\"license\":\"MIT\"},\"contracts/interface/IFrankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\n\\ninterface IFrankencoin is IERC20 {\\n    function suggestMinter(\\n        address _minter,\\n        uint256 _applicationPeriod,\\n        uint256 _applicationFee,\\n        string calldata _message\\n    ) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(\\n        address minter,\\n        address[] calldata helpers,\\n        string calldata message\\n    ) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function minterReserve() external view returns (uint256);\\n\\n    function calculateAssignedReserve(\\n        uint256 mintedAmount,\\n        uint32 _reservePPM\\n    ) external view returns (uint256);\\n\\n    function equity() external view returns (uint256);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function isPosition(address position) external view returns (address);\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function mintWithReserve(\\n        address target,\\n        uint256 amount,\\n        uint32 reservePPM,\\n        uint32 feePPM\\n    ) external;\\n\\n    function burnFrom(address target, uint256 amount) external;\\n\\n    function burnWithourReserve(\\n        uint256 amountIncludingReserve,\\n        uint32 reservePPM\\n    ) external;\\n\\n    function burnFromWithReserve(\\n        address payer,\\n        uint256 targetTotalBurnAmount,\\n        uint32 _reservePPM\\n    ) external returns (uint256);\\n\\n    function burnWithReserve(\\n        uint256 amountExcludingReserve,\\n        uint32 reservePPM\\n    ) external returns (uint256);\\n\\n    function notifyLoss(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x480b5b0995e5018f73dc18c6fee19497e2ea8b549a0cdec3dc09832bdaf85b12\",\"license\":\"MIT\"},\"contracts/interface/IPosition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\nimport \\\"./IFrankencoin.sol\\\";\\n\\ninterface IPosition {\\n\\n    function collateral() external returns (IERC20);\\n\\n    function minimumCollateral() external returns (uint256);\\n\\n    function challengePeriod() external returns (uint256);\\n\\n    function expiration() external returns (uint256);\\n\\n    function price() external returns (uint256);\\n\\n    function reduceLimitForClone(uint256 amount, uint256 expiration) external;\\n\\n    function initializeClone(address owner, uint256 _price, uint256 _coll, uint256 _mint, uint256 expiration) external;\\n\\n    function deny(address[] calldata helpers, string calldata message) external;\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function minted() external returns (uint256);\\n\\n    function reserveContribution() external returns (uint32);\\n\\n    function getUsableMint(uint256 totalMint, bool beforeFees) external view returns (uint256);\\n\\n    function notifyChallengeStarted(uint256 size) external;\\n\\n    function tryAvertChallenge(uint256 size, uint256 bid, uint256 challengeEnd) external returns (bool);\\n\\n    function notifyChallengeSucceeded(address bidder, uint256 bid, uint256 size) external returns (address, uint256, uint256, uint32);\\n\\n}\",\"keccak256\":\"0xc26cb71852ab7d7f0745c652284e69540ea2a733b8295fdb4134c1863c30d0a0\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IReserve is IERC20 {\\n   function checkQualified(address sender, address[] calldata helpers) external view;\\n}\",\"keccak256\":\"0xbbb5f65cee6a43065dc16b2fa4540ab2462de86b689cc15a1e8dd2c7b87411d0\",\"license\":\"MIT\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/** \\n * @title Functions for share valuation\\n */\\ncontract MathUtil {\\n\\n    uint256 internal constant ONE_DEC18 = 10**18;\\n    uint256 internal constant THRESH_DEC18 = 10000000000000000; //0.01\\n    /**\\n     * @notice Cubic root with Halley approximation\\n     *         Number 1e18 decimal\\n     * @param _v     number for which we calculate x**(1/3)\\n     * @return returns _v**(1/3)\\n     */\\n    function _cubicRoot(uint256 _v) internal pure returns (uint256) {\\n        uint256 x = ONE_DEC18;\\n        uint256 xOld;\\n        bool cond;\\n        do {\\n            xOld = x;\\n            uint256 powX3 = _mulD18(_mulD18(x, x), x);\\n            x = _mulD18(x, _divD18( (powX3 + 2 * _v) , (2 * powX3 + _v)));\\n            cond = xOld > x ? xOld - x > THRESH_DEC18 : x - xOld > THRESH_DEC18;\\n        } while ( cond );\\n        return x;\\n    }\\n\\n    /**\\n     * Divides and multiplies, with divisor > 0.\\n     */\\n    function _mulDiv(uint256 x, uint256 factor, uint256 divisor) internal pure returns(uint256) {\\n        if (factor == 0){\\n            return 0;\\n        } else if (type(uint256).max / factor > x){\\n            // divide first to avoid overflow\\n            return x > factor ? x / divisor * factor : factor / divisor * x;\\n        } else {\\n            return x * factor / divisor;\\n        }\\n    }\\n\\n    function _mulD18(uint256 _a, uint256 _b) internal pure returns(uint256) {\\n        return _a * _b / ONE_DEC18;\\n    }\\n\\n    function _divD18(uint256 _a, uint256 _b) internal pure returns(uint256) {\\n        return (_a * ONE_DEC18) / _b ;\\n    }\\n\\n    function _power3(uint256 _x) internal pure returns(uint256) {\\n        return _mulD18(_mulD18(_x, _x), _x);\\n    }\\n\\n}\",\"keccak256\":\"0x3fb2629d5ca88e1c313daf791faa0e6c3e4a830784f319a24e592c78b94266a6\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    error NotOwner();\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _setOwner(address newOwner) internal {\\n        require(newOwner != address(0x0));\\n        address oldOwner = owner;\\n        owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    function _requireOwner(address sender) internal view {\\n        if (owner != sender) revert NotOwner();\\n    }\\n\\n    modifier onlyOwner() {\\n        _requireOwner(msg.sender);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9e5333955195741ef45be1462d80eb09730ee0e7f8832c78b020a619d8047c67\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b506124468061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c806353af180714610038578063b3e8918014610067575b5f80fd5b61004b61004636600461027b565b61007a565b6040516001600160a01b03909116815260200160405180910390f35b61004b61007536600461031c565b610125565b5f8b338c8c8c8c8c8c8c8c8c8c6040516100939061023f565b6001600160a01b039c8d1681529a8c1660208c0152988b1660408b0152969099166060890152608088019490945260a087019290925260c086015260e085015261010084015263ffffffff9384166101208401526101408301529190911661016082015261018001604051809103905ff080158015610114573d5f803e3d5ffd5b509c9b505050505050505050505050565b5f808290505f610193826001600160a01b03166346c715fa6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561016a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061018e919061033e565b61019b565b949350505050565b5f808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037815ff09250506001600160a01b0382166102395760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b50919050565b6120b78061035a83390190565b6001600160a01b0381168114610260575f80fd5b50565b803563ffffffff81168114610276575f80fd5b919050565b5f805f805f805f805f805f6101608c8e031215610296575f80fd5b8b356102a18161024c565b9a5060208c01356102b18161024c565b995060408c01356102c18161024c565b985060608c0135975060808c0135965060a08c0135955060c08c0135945060e08c013593506102f36101008d01610263565b92506101208c0135915061030a6101408d01610263565b90509295989b509295989b9093969950565b5f6020828403121561032c575f80fd5b81356103378161024c565b9392505050565b5f6020828403121561034e575f80fd5b81516103378161024c56fe6101a060405234801562000011575f80fd5b50604051620020b7380380620020b78339810160408190526200003491620001bc565b6203f48086101562000044575f80fd5b6200004f8c6200012a565b3060c0526001600160a01b038b811660e05260018390558a81166101005289166101205263ffffffff8084166101605281166101805261014088905260808490526200009c864262000274565b60a08190526004819055620000b390869062000274565b600655600587905560c05161012051604080516001600160a01b0393841681528d84166020820152918316828201526060820185905251918e16917f591ede549d7e337ac63249acd2d7849532b0a686377bbf0b0cca6c8abd9552f29181900360800190a25050505050505050505050506200029a565b6001600160a01b0381166200013d575f80fd5b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001a3575f80fd5b919050565b805163ffffffff81168114620001a3575f80fd5b5f805f805f805f805f805f806101808d8f031215620001d9575f80fd5b620001e48d6200018c565b9b50620001f460208e016200018c565b9a506200020460408e016200018c565b99506200021460608e016200018c565b985060808d0151975060a08d0151965060c08d0151955060e08d015194506101008d01519350620002496101208e01620001a8565b92506101408d01519150620002626101608e01620001a8565b90509295989b509295989b509295989b565b808201808211156200029457634e487b7160e01b5f52601160045260245ffd5b92915050565b60805160a05160c05160e0516101005161012051610140516101605161018051611cd7620003e05f395f81816102dd01528181610545015281816105a10152818161086501528181610ca101528181610e3101526116c701525f818161023401526109bd01525f818161041f01528181610ad10152818161107a01526114c601525f81816104be01528181610b81015281816111990152818161130d0152818161144d01526115ee01525f81816104970152818161060e015281816107d70152818161088e01528181610c3501528181611171015261169601525f818161028301528181610a9101528181610d6901528181610f690152818161103a015261120801525f8181610333015261114301525f8181610446015281816105ce01528181610968015281816109910152610fb401525f818161050b015261129a0152611cd75ff3fe608060405234801561000f575f80fd5b50600436106101e7575f3560e01c806372bf079e11610109578063be9a65551161009e578063d8dfeb451161006e578063d8dfeb45146104b9578063d9caed12146104e0578063f2fde38b146104f3578063f3f480d914610506575f80fd5b8063be9a655514610441578063c2b6b58c14610468578063c3c518631461047f578063c4d4803a14610492575f80fd5b8063a4d66daf116100d9578063a4d66daf146103eb578063a6e503af146103f4578063aee1a95914610407578063babe7c741461041a575f80fd5b806372bf079e146103b4578063787a08a6146103c75780638da5cb5b146103d0578063a035b1fe146103e2575f80fd5b80633a7c29fb1161017f57806346c715fa1161014f57806346c715fa1461032e5780634f02c420146103555780636f871cec1461035e578063707271b114610371575f80fd5b80633a7c29fb146102d857806340c10f19146102ff57806342d02041146103125780634665096d14610325575f80fd5b8063350c35e9116101ba578063350c35e91461026b578063365a86fc1461027e578063371fd8e6146102bd578063383ef46e146102d0575f80fd5b806308262940146101eb5780631bbea34c1461021157806324e657fe14610226578063293ff70a1461022f575b5f80fd5b6101fe6101f93660046118c6565b61052d565b6040519081526020015b60405180910390f35b61022461021f3660046118f4565b6105cc565b005b6101fe60035481565b6102567f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610208565b6102246102793660046119c2565b61073a565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610208565b6102246102cb3660046119ec565b6107b5565b610256610951565b6102567f000000000000000000000000000000000000000000000000000000000000000081565b61022461030d3660046119c2565b610a02565b6102246103203660046119ec565b610a86565b6101fe60065481565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6101fe60025481565b61022461036c366004611a03565b610b5b565b61038461037f366004611a2c565b610d5a565b604080516001600160a01b03909516855260208501939093529183015263ffffffff166060820152608001610208565b6102246103c23660046119ec565b610e59565b6101fe60045481565b5f546102a5906001600160a01b031681565b6101fe60015481565b6101fe60055481565b610224610402366004611a5e565b610ef9565b610224610415366004611a7e565b61102f565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6004545f19145b6040519015158152602001610208565b61046f61048d366004611a03565b6111fc565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6102246104ee366004611abe565b611302565b610224610501366004611afc565b6113de565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b5f811561059857620f4240610540610951565b61056d7f0000000000000000000000000000000000000000000000000000000000000000620f4240611b2b565b6105779190611b2b565b6105879063ffffffff1685611b4f565b6105919190611b66565b90506105c6565b620f42406105777f000000000000000000000000000000000000000000000000000000000000000082611b2b565b92915050565b7f0000000000000000000000000000000000000000000000000000000000000000421061060c5760405163ecdd1c2960e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610668573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061068c9190611b85565b6001600160a01b031663352e3a833386866040518463ffffffff1660e01b81526004016106bb93929190611ba0565b5f6040518083038186803b1580156106d1575f80fd5b505afa1580156106e3573d5f803e3d5ffd5b505050506106f15f19600455565b336001600160a01b03167faca80c800ec0d2aa9d9d31b7f886a1dd3067d4676abc637626a18ffb9381653d838360405161072c929190611bfb565b60405180910390a250505050565b610743336113f3565b600354156107645760405163d26e2de960e01b815260040160405180910390fd5b600454421115801561077957506004545f1914155b1561079757604051631c02820f60e21b815260040160405180910390fd5b5f6107a28383611420565b90506107b08160015461154b565b505050565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af1158015610825573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108499190611c29565b5060405163a47d75ad60e01b81526004810182905263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a47d75ad906044016020604051808303815f875af11580156108dc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109009190611c44565b905061090b8161158a565b5f80516020611c828339815191526109216115d7565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a15050565b6006545f9042818110610966575f9250505090565b7f00000000000000000000000000000000000000000000000000000000000000008110156109b157507f00000000000000000000000000000000000000000000000000000000000000005b6301e1338063ffffffff7f0000000000000000000000000000000000000000000000000000000000000000166109e78385611c5b565b6109f19190611b4f565b6109fb9190611b66565b9250505090565b610a0b336113f3565b60035415610a2c5760405163d26e2de960e01b815260040160405180910390fd5b6004544211610a4e57604051631c02820f60e21b815260040160405180910390fd5b6006544210610a7057604051630407b05b60e31b815260040160405180910390fd5b610a828282610a7d6115d7565b611664565b5050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610acf576040516313bd2e8360e31b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081108015610b045750610b016115d7565b81105b15610b2257604051633c80636b60e21b815260040160405180910390fd5b805f03610b4257604051633c80636b60e21b815260040160405180910390fd5b8060035f828254610b539190611c6e565b909155505050565b610b64336113f3565b5f610b6d6115d7565b905080831115610c29576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd3330610bb28588611c5b565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303815f875af1158015610c03573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c279190611c29565b505b600254841015610d10577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663315f3e723386600254610c719190611c5b565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660448201526064016020604051808303815f875af1158015610ce5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d099190611c44565b5060028490555b80831015610d2657610d26336102798584611c5b565b600254841115610d4257610d42336002548661030d9190611c5b565b6001548214610d5457610d5482610e59565b50505050565b5f808080336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610da7576040516313bd2e8360e31b815260040160405180910390fd5b8460035f828254610db89190611c5b565b90915550506002545f610dc96115d7565b905080871115610de857610dde8882896117c8565b9750809650610dfe565b80871015610dfe57610dfb8288836117c8565b91505b610e078261158a565b610e118988611420565b50610e1e6203f48061183b565b505f546001600160a01b031698969750957f000000000000000000000000000000000000000000000000000000000000000095509350505050565b610e62336113f3565b60035415610e835760405163d26e2de960e01b815260040160405180910390fd5b600154811115610e9e57610e996203f48061183b565b610eaf565b610eaf610ea96115d7565b8261154b565b60018190555f80516020611c82833981519152610eca6115d7565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a150565b60035415610f1a5760405163d26e2de960e01b815260040160405180910390fd5b6004544211610f3c57604051631c02820f60e21b815260040160405180910390fd5b6006544210610f5e57604051630407b05b60e31b815260040160405180910390fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fa7576040516313bd2e8360e31b815260040160405180910390fd5b600654811180610fd657507f000000000000000000000000000000000000000000000000000000000000000081105b15610ff45760405163ecdd1c2960e01b815260040160405180910390fd5b5f826005546110039190611c5b565b905080600254111561102857604051631930e3c960e11b815260040160405180910390fd5b6005555050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611078576040516313bd2e8360e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008310156110b957604051633a23d82560e01b815260040160405180910390fd5b826110cc670de0b6b3a764000084611b4f565b6110d69190611b66565b6001819055670de0b6b3a7640000906110f0908590611b4f565b6110fa9190611b66565b915083600154111561111f57604051633a23d82560e01b815260040160405180910390fd5b61112885611858565b6005829055600681905561113d858385611664565b604080517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811682527f0000000000000000000000000000000000000000000000000000000000000000811660208301527f0000000000000000000000000000000000000000000000000000000000000000811682840152606082018790529151918716917f591ede549d7e337ac63249acd2d7849532b0a686377bbf0b0cca6c8abd9552f29181900360800190a25050505050565b5f336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611246576040516313bd2e8360e31b815260040160405180910390fd5b600654421061125657505f6112fb565b60015480611265865f19611b66565b1015611274575f9150506112fb565b61127e8582611b4f565b611290670de0b6b3a764000086611b4f565b106112f6576112bf7f000000000000000000000000000000000000000000000000000000000000000084611c5b565b42036112c9575f80fd5b8460035f8282546112da9190611c5b565b909155506112ec90506201518061183b565b60019150506112fb565b5f9150505b9392505050565b61130b336113f3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03160361134e576107b0828261073a565b5f6113576115d7565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529192509085169063a9059cbb906044016020604051808303815f875af11580156113a7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113cb9190611c29565b506113d46115d7565b8114610d54575f80fd5b6113e7336113f3565b6113f081611858565b50565b5f546001600160a01b038281169116146113f0576040516330cd747160e01b815260040160405180910390fd5b5f81156114b95760405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303815f875af1158015611493573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114b79190611c29565b505b5f6114c26115d7565b90507f0000000000000000000000000000000000000000000000000000000000000000811080156114f35750600354155b15611502576115025f19600455565b5f80516020611c828339815191526115186115d7565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a19392505050565b670de0b6b3a76400006002546115619190611b4f565b61156b8284611b4f565b1015610a8257604051633a23d82560e01b815260040160405180910390fd5b6002548111156115c6576002546115a19082611c5b565b604051635795d46960e11b81526004016115bd91815260200190565b60405180910390fd5b8060025f828254610b539190611c5b565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561163b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061165f9190611c44565b905090565b600554826002546116759190611c6e565b111561169457604051631930e3c960e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638112eb2b84847f00000000000000000000000000000000000000000000000000000000000000006116ee610951565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925263ffffffff90811660448401521660648201526084015f604051808303815f87803b158015611747575f80fd5b505af1158015611759573d5f803e3d5ffd5b505050508160025f82825461176e9190611c6e565b925050819055506117818160015461154b565b5f80516020611c828339815191526117976115d7565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a1505050565b5f825f036117d757505f6112fb565b836117e3845f19611b66565b11156118265782841161180a57836117fb8385611b66565b6118059190611b4f565b61181f565b826118158386611b66565b61181f9190611b4f565b90506112fb565b816118318486611b4f565b61181f9190611b66565b5f6118468242611c6e565b9050600454811115610a825760045550565b6001600160a01b03811661186a575f80fd5b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80151581146113f0575f80fd5b5f80604083850312156118d7575f80fd5b8235915060208301356118e9816118b9565b809150509250929050565b5f805f8060408587031215611907575f80fd5b843567ffffffffffffffff8082111561191e575f80fd5b818701915087601f830112611931575f80fd5b81358181111561193f575f80fd5b8860208260051b8501011115611953575f80fd5b60209283019650945090860135908082111561196d575f80fd5b818701915087601f830112611980575f80fd5b81358181111561198e575f80fd5b88602082850101111561199f575f80fd5b95989497505060200194505050565b6001600160a01b03811681146113f0575f80fd5b5f80604083850312156119d3575f80fd5b82356119de816119ae565b946020939093013593505050565b5f602082840312156119fc575f80fd5b5035919050565b5f805f60608486031215611a15575f80fd5b505081359360208301359350604090920135919050565b5f805f60608486031215611a3e575f80fd5b8335611a49816119ae565b95602085013595506040909401359392505050565b5f8060408385031215611a6f575f80fd5b50508035926020909101359150565b5f805f805f60a08688031215611a92575f80fd5b8535611a9d816119ae565b97602087013597506040870135966060810135965060800135945092505050565b5f805f60608486031215611ad0575f80fd5b8335611adb816119ae565b92506020840135611aeb816119ae565b929592945050506040919091013590565b5f60208284031215611b0c575f80fd5b81356112fb816119ae565b634e487b7160e01b5f52601160045260245ffd5b63ffffffff828116828216039080821115611b4857611b48611b17565b5092915050565b80820281158282048414176105c6576105c6611b17565b5f82611b8057634e487b7160e01b5f52601260045260245ffd5b500490565b5f60208284031215611b95575f80fd5b81516112fb816119ae565b6001600160a01b038481168252604060208084018290529083018490525f91859160608501845b87811015611bee578435611bda816119ae565b841682529382019390820190600101611bc7565b5098975050505050505050565b60208152816020820152818360408301375f818301604090810191909152601f909201601f19160101919050565b5f60208284031215611c39575f80fd5b81516112fb816118b9565b5f60208284031215611c54575f80fd5b5051919050565b818103818111156105c6576105c6611b17565b808201808211156105c6576105c6611b1756fecb2040b7eb3265a4335698c9ecbe81a5f9857e92aa32e07ce235f44c321a7e35a26469706673582212200992b4e8f99f5cb322568f76ca4a994aec617749c03daf03b4b6e10c867d0f1c64736f6c63430008140033a26469706673582212206221f7dc1e44e81b88f2f7d37cee4bd36502de8accc8909d1f1c49bbc2c4e15564736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610034575f3560e01c806353af180714610038578063b3e8918014610067575b5f80fd5b61004b61004636600461027b565b61007a565b6040516001600160a01b03909116815260200160405180910390f35b61004b61007536600461031c565b610125565b5f8b338c8c8c8c8c8c8c8c8c8c6040516100939061023f565b6001600160a01b039c8d1681529a8c1660208c0152988b1660408b0152969099166060890152608088019490945260a087019290925260c086015260e085015261010084015263ffffffff9384166101208401526101408301529190911661016082015261018001604051809103905ff080158015610114573d5f803e3d5ffd5b509c9b505050505050505050505050565b5f808290505f610193826001600160a01b03166346c715fa6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561016a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061018e919061033e565b61019b565b949350505050565b5f808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037815ff09250506001600160a01b0382166102395760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b50919050565b6120b78061035a83390190565b6001600160a01b0381168114610260575f80fd5b50565b803563ffffffff81168114610276575f80fd5b919050565b5f805f805f805f805f805f6101608c8e031215610296575f80fd5b8b356102a18161024c565b9a5060208c01356102b18161024c565b995060408c01356102c18161024c565b985060608c0135975060808c0135965060a08c0135955060c08c0135945060e08c013593506102f36101008d01610263565b92506101208c0135915061030a6101408d01610263565b90509295989b509295989b9093969950565b5f6020828403121561032c575f80fd5b81356103378161024c565b9392505050565b5f6020828403121561034e575f80fd5b81516103378161024c56fe6101a060405234801562000011575f80fd5b50604051620020b7380380620020b78339810160408190526200003491620001bc565b6203f48086101562000044575f80fd5b6200004f8c6200012a565b3060c0526001600160a01b038b811660e05260018390558a81166101005289166101205263ffffffff8084166101605281166101805261014088905260808490526200009c864262000274565b60a08190526004819055620000b390869062000274565b600655600587905560c05161012051604080516001600160a01b0393841681528d84166020820152918316828201526060820185905251918e16917f591ede549d7e337ac63249acd2d7849532b0a686377bbf0b0cca6c8abd9552f29181900360800190a25050505050505050505050506200029a565b6001600160a01b0381166200013d575f80fd5b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001a3575f80fd5b919050565b805163ffffffff81168114620001a3575f80fd5b5f805f805f805f805f805f806101808d8f031215620001d9575f80fd5b620001e48d6200018c565b9b50620001f460208e016200018c565b9a506200020460408e016200018c565b99506200021460608e016200018c565b985060808d0151975060a08d0151965060c08d0151955060e08d015194506101008d01519350620002496101208e01620001a8565b92506101408d01519150620002626101608e01620001a8565b90509295989b509295989b509295989b565b808201808211156200029457634e487b7160e01b5f52601160045260245ffd5b92915050565b60805160a05160c05160e0516101005161012051610140516101605161018051611cd7620003e05f395f81816102dd01528181610545015281816105a10152818161086501528181610ca101528181610e3101526116c701525f818161023401526109bd01525f818161041f01528181610ad10152818161107a01526114c601525f81816104be01528181610b81015281816111990152818161130d0152818161144d01526115ee01525f81816104970152818161060e015281816107d70152818161088e01528181610c3501528181611171015261169601525f818161028301528181610a9101528181610d6901528181610f690152818161103a015261120801525f8181610333015261114301525f8181610446015281816105ce01528181610968015281816109910152610fb401525f818161050b015261129a0152611cd75ff3fe608060405234801561000f575f80fd5b50600436106101e7575f3560e01c806372bf079e11610109578063be9a65551161009e578063d8dfeb451161006e578063d8dfeb45146104b9578063d9caed12146104e0578063f2fde38b146104f3578063f3f480d914610506575f80fd5b8063be9a655514610441578063c2b6b58c14610468578063c3c518631461047f578063c4d4803a14610492575f80fd5b8063a4d66daf116100d9578063a4d66daf146103eb578063a6e503af146103f4578063aee1a95914610407578063babe7c741461041a575f80fd5b806372bf079e146103b4578063787a08a6146103c75780638da5cb5b146103d0578063a035b1fe146103e2575f80fd5b80633a7c29fb1161017f57806346c715fa1161014f57806346c715fa1461032e5780634f02c420146103555780636f871cec1461035e578063707271b114610371575f80fd5b80633a7c29fb146102d857806340c10f19146102ff57806342d02041146103125780634665096d14610325575f80fd5b8063350c35e9116101ba578063350c35e91461026b578063365a86fc1461027e578063371fd8e6146102bd578063383ef46e146102d0575f80fd5b806308262940146101eb5780631bbea34c1461021157806324e657fe14610226578063293ff70a1461022f575b5f80fd5b6101fe6101f93660046118c6565b61052d565b6040519081526020015b60405180910390f35b61022461021f3660046118f4565b6105cc565b005b6101fe60035481565b6102567f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610208565b6102246102793660046119c2565b61073a565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610208565b6102246102cb3660046119ec565b6107b5565b610256610951565b6102567f000000000000000000000000000000000000000000000000000000000000000081565b61022461030d3660046119c2565b610a02565b6102246103203660046119ec565b610a86565b6101fe60065481565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6101fe60025481565b61022461036c366004611a03565b610b5b565b61038461037f366004611a2c565b610d5a565b604080516001600160a01b03909516855260208501939093529183015263ffffffff166060820152608001610208565b6102246103c23660046119ec565b610e59565b6101fe60045481565b5f546102a5906001600160a01b031681565b6101fe60015481565b6101fe60055481565b610224610402366004611a5e565b610ef9565b610224610415366004611a7e565b61102f565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b6004545f19145b6040519015158152602001610208565b61046f61048d366004611a03565b6111fc565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6102a57f000000000000000000000000000000000000000000000000000000000000000081565b6102246104ee366004611abe565b611302565b610224610501366004611afc565b6113de565b6101fe7f000000000000000000000000000000000000000000000000000000000000000081565b5f811561059857620f4240610540610951565b61056d7f0000000000000000000000000000000000000000000000000000000000000000620f4240611b2b565b6105779190611b2b565b6105879063ffffffff1685611b4f565b6105919190611b66565b90506105c6565b620f42406105777f000000000000000000000000000000000000000000000000000000000000000082611b2b565b92915050565b7f0000000000000000000000000000000000000000000000000000000000000000421061060c5760405163ecdd1c2960e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610668573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061068c9190611b85565b6001600160a01b031663352e3a833386866040518463ffffffff1660e01b81526004016106bb93929190611ba0565b5f6040518083038186803b1580156106d1575f80fd5b505afa1580156106e3573d5f803e3d5ffd5b505050506106f15f19600455565b336001600160a01b03167faca80c800ec0d2aa9d9d31b7f886a1dd3067d4676abc637626a18ffb9381653d838360405161072c929190611bfb565b60405180910390a250505050565b610743336113f3565b600354156107645760405163d26e2de960e01b815260040160405180910390fd5b600454421115801561077957506004545f1914155b1561079757604051631c02820f60e21b815260040160405180910390fd5b5f6107a28383611420565b90506107b08160015461154b565b505050565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af1158015610825573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108499190611c29565b5060405163a47d75ad60e01b81526004810182905263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a47d75ad906044016020604051808303815f875af11580156108dc573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109009190611c44565b905061090b8161158a565b5f80516020611c828339815191526109216115d7565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a15050565b6006545f9042818110610966575f9250505090565b7f00000000000000000000000000000000000000000000000000000000000000008110156109b157507f00000000000000000000000000000000000000000000000000000000000000005b6301e1338063ffffffff7f0000000000000000000000000000000000000000000000000000000000000000166109e78385611c5b565b6109f19190611b4f565b6109fb9190611b66565b9250505090565b610a0b336113f3565b60035415610a2c5760405163d26e2de960e01b815260040160405180910390fd5b6004544211610a4e57604051631c02820f60e21b815260040160405180910390fd5b6006544210610a7057604051630407b05b60e31b815260040160405180910390fd5b610a828282610a7d6115d7565b611664565b5050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610acf576040516313bd2e8360e31b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081108015610b045750610b016115d7565b81105b15610b2257604051633c80636b60e21b815260040160405180910390fd5b805f03610b4257604051633c80636b60e21b815260040160405180910390fd5b8060035f828254610b539190611c6e565b909155505050565b610b64336113f3565b5f610b6d6115d7565b905080831115610c29576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd3330610bb28588611c5b565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303815f875af1158015610c03573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c279190611c29565b505b600254841015610d10577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663315f3e723386600254610c719190611c5b565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660448201526064016020604051808303815f875af1158015610ce5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d099190611c44565b5060028490555b80831015610d2657610d26336102798584611c5b565b600254841115610d4257610d42336002548661030d9190611c5b565b6001548214610d5457610d5482610e59565b50505050565b5f808080336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610da7576040516313bd2e8360e31b815260040160405180910390fd5b8460035f828254610db89190611c5b565b90915550506002545f610dc96115d7565b905080871115610de857610dde8882896117c8565b9750809650610dfe565b80871015610dfe57610dfb8288836117c8565b91505b610e078261158a565b610e118988611420565b50610e1e6203f48061183b565b505f546001600160a01b031698969750957f000000000000000000000000000000000000000000000000000000000000000095509350505050565b610e62336113f3565b60035415610e835760405163d26e2de960e01b815260040160405180910390fd5b600154811115610e9e57610e996203f48061183b565b610eaf565b610eaf610ea96115d7565b8261154b565b60018190555f80516020611c82833981519152610eca6115d7565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a150565b60035415610f1a5760405163d26e2de960e01b815260040160405180910390fd5b6004544211610f3c57604051631c02820f60e21b815260040160405180910390fd5b6006544210610f5e57604051630407b05b60e31b815260040160405180910390fd5b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610fa7576040516313bd2e8360e31b815260040160405180910390fd5b600654811180610fd657507f000000000000000000000000000000000000000000000000000000000000000081105b15610ff45760405163ecdd1c2960e01b815260040160405180910390fd5b5f826005546110039190611c5b565b905080600254111561102857604051631930e3c960e11b815260040160405180910390fd5b6005555050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611078576040516313bd2e8360e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000008310156110b957604051633a23d82560e01b815260040160405180910390fd5b826110cc670de0b6b3a764000084611b4f565b6110d69190611b66565b6001819055670de0b6b3a7640000906110f0908590611b4f565b6110fa9190611b66565b915083600154111561111f57604051633a23d82560e01b815260040160405180910390fd5b61112885611858565b6005829055600681905561113d858385611664565b604080517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811682527f0000000000000000000000000000000000000000000000000000000000000000811660208301527f0000000000000000000000000000000000000000000000000000000000000000811682840152606082018790529151918716917f591ede549d7e337ac63249acd2d7849532b0a686377bbf0b0cca6c8abd9552f29181900360800190a25050505050565b5f336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611246576040516313bd2e8360e31b815260040160405180910390fd5b600654421061125657505f6112fb565b60015480611265865f19611b66565b1015611274575f9150506112fb565b61127e8582611b4f565b611290670de0b6b3a764000086611b4f565b106112f6576112bf7f000000000000000000000000000000000000000000000000000000000000000084611c5b565b42036112c9575f80fd5b8460035f8282546112da9190611c5b565b909155506112ec90506201518061183b565b60019150506112fb565b5f9150505b9392505050565b61130b336113f3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03160361134e576107b0828261073a565b5f6113576115d7565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529192509085169063a9059cbb906044016020604051808303815f875af11580156113a7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113cb9190611c29565b506113d46115d7565b8114610d54575f80fd5b6113e7336113f3565b6113f081611858565b50565b5f546001600160a01b038281169116146113f0576040516330cd747160e01b815260040160405180910390fd5b5f81156114b95760405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303815f875af1158015611493573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114b79190611c29565b505b5f6114c26115d7565b90507f0000000000000000000000000000000000000000000000000000000000000000811080156114f35750600354155b15611502576115025f19600455565b5f80516020611c828339815191526115186115d7565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a19392505050565b670de0b6b3a76400006002546115619190611b4f565b61156b8284611b4f565b1015610a8257604051633a23d82560e01b815260040160405180910390fd5b6002548111156115c6576002546115a19082611c5b565b604051635795d46960e11b81526004016115bd91815260200190565b60405180910390fd5b8060025f828254610b539190611c5b565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561163b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061165f9190611c44565b905090565b600554826002546116759190611c6e565b111561169457604051631930e3c960e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638112eb2b84847f00000000000000000000000000000000000000000000000000000000000000006116ee610951565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925263ffffffff90811660448401521660648201526084015f604051808303815f87803b158015611747575f80fd5b505af1158015611759573d5f803e3d5ffd5b505050508160025f82825461176e9190611c6e565b925050819055506117818160015461154b565b5f80516020611c828339815191526117976115d7565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a1505050565b5f825f036117d757505f6112fb565b836117e3845f19611b66565b11156118265782841161180a57836117fb8385611b66565b6118059190611b4f565b61181f565b826118158386611b66565b61181f9190611b4f565b90506112fb565b816118318486611b4f565b61181f9190611b66565b5f6118468242611c6e565b9050600454811115610a825760045550565b6001600160a01b03811661186a575f80fd5b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80151581146113f0575f80fd5b5f80604083850312156118d7575f80fd5b8235915060208301356118e9816118b9565b809150509250929050565b5f805f8060408587031215611907575f80fd5b843567ffffffffffffffff8082111561191e575f80fd5b818701915087601f830112611931575f80fd5b81358181111561193f575f80fd5b8860208260051b8501011115611953575f80fd5b60209283019650945090860135908082111561196d575f80fd5b818701915087601f830112611980575f80fd5b81358181111561198e575f80fd5b88602082850101111561199f575f80fd5b95989497505060200194505050565b6001600160a01b03811681146113f0575f80fd5b5f80604083850312156119d3575f80fd5b82356119de816119ae565b946020939093013593505050565b5f602082840312156119fc575f80fd5b5035919050565b5f805f60608486031215611a15575f80fd5b505081359360208301359350604090920135919050565b5f805f60608486031215611a3e575f80fd5b8335611a49816119ae565b95602085013595506040909401359392505050565b5f8060408385031215611a6f575f80fd5b50508035926020909101359150565b5f805f805f60a08688031215611a92575f80fd5b8535611a9d816119ae565b97602087013597506040870135966060810135965060800135945092505050565b5f805f60608486031215611ad0575f80fd5b8335611adb816119ae565b92506020840135611aeb816119ae565b929592945050506040919091013590565b5f60208284031215611b0c575f80fd5b81356112fb816119ae565b634e487b7160e01b5f52601160045260245ffd5b63ffffffff828116828216039080821115611b4857611b48611b17565b5092915050565b80820281158282048414176105c6576105c6611b17565b5f82611b8057634e487b7160e01b5f52601260045260245ffd5b500490565b5f60208284031215611b95575f80fd5b81516112fb816119ae565b6001600160a01b038481168252604060208084018290529083018490525f91859160608501845b87811015611bee578435611bda816119ae565b841682529382019390820190600101611bc7565b5098975050505050505050565b60208152816020820152818360408301375f818301604090810191909152601f909201601f19160101919050565b5f60208284031215611c39575f80fd5b81516112fb816118b9565b5f60208284031215611c54575f80fd5b5051919050565b818103818111156105c6576105c6611b17565b808201808211156105c6576105c6611b1756fecb2040b7eb3265a4335698c9ecbe81a5f9857e92aa32e07ce235f44c321a7e35a26469706673582212200992b4e8f99f5cb322568f76ca4a994aec617749c03daf03b4b6e10c867d0f1c64736f6c63430008140033a26469706673582212206221f7dc1e44e81b88f2f7d37cee4bd36502de8accc8909d1f1c49bbc2c4e15564736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "clonePosition(address)": {
        "params": {
          "_existing": "address of the position we want to clone"
        },
        "returns": {
          "_0": "address of the newly created clone position"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "clonePosition(address)": {
        "notice": "clone an existing position. This can be a clone of another clone, or an original position."
      },
      "createNewPosition(address,address,address,uint256,uint256,uint256,uint256,uint256,uint32,uint256,uint32)": {
        "notice": "Create a completely new position in a newly deployed contract. Must be called through minting hub to be recognized as valid position."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
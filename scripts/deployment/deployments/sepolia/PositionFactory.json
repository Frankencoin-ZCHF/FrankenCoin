{
  "address": "0x895eaA01CaFe0985B5A90728d0395DA41CDA77Ba",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_existing",
          "type": "address"
        }
      ],
      "name": "clonePosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zchf",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initialLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_initPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_challengePeriod",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_annualInterestPPM",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_liqPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_reserve",
          "type": "uint32"
        }
      ],
      "name": "createNewPosition",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbcbc8e2a96b936989f04fb0d25c2f962de74fcaa9e352aab6c2a2df6696386d4",
  "receipt": {
    "to": null,
    "from": "0xaA770D646be470BA8Cb97566DD83662334D5D7CF",
    "contractAddress": "0x895eaA01CaFe0985B5A90728d0395DA41CDA77Ba",
    "transactionIndex": 27,
    "gasUsed": "2028121",
    "logsBloom": "0x
    "blockHash": "0x8cd8948c45ad17bbac324bafea97cfe569810be8b807f6236f5c5ff8e7262af3",
    "transactionHash": "0xbcbc8e2a96b936989f04fb0d25c2f962de74fcaa9e352aab6c2a2df6696386d4",
    "logs": [],
    "blockNumber": 4320473,
    "cumulativeGasUsed": "27429722",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "024db87fd1b3ed736bed5abfcf48ad8d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_existing\",\"type\":\"address\"}],\"name\":\"clonePosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zchf\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initialLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_initPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_challengePeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_annualInterestPPM\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_liqPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_reserve\",\"type\":\"uint32\"}],\"name\":\"createNewPosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clonePosition(address)\":{\"params\":{\"_existing\":\"address of the position we want to clone\"},\"returns\":{\"_0\":\"address of the newly created clone position\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clonePosition(address)\":{\"notice\":\"clone an existing position. This can be a clone of another clone, or an original position.\"},\"createNewPosition(address,address,address,uint256,uint256,uint256,uint256,uint64,uint32,uint256,uint32)\":{\"notice\":\"Create a completely new position in a newly deployed contract. Must be called through minting hub to be recognized as valid position.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PositionFactory.sol\":\"PositionFactory\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Position.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Ownable.sol\\\";\\nimport \\\"./utils/MathUtil.sol\\\";\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IPosition.sol\\\";\\nimport \\\"./interface/IReserve.sol\\\";\\nimport \\\"./interface/IFrankencoin.sol\\\";\\n\\n/**\\n * @title Position\\n * @notice A collateralized minting position.\\n */\\ncontract Position is Ownable, IPosition, MathUtil {\\n    /**\\n     * @notice Note that this contract is intended to be cloned. All clones will share the same values for\\n     * the constant and immutable fields, but have their own values for the other fields.\\n     */\\n\\n    /**\\n     * @notice The zchf price per unit of the collateral below which challenges succeed, (36 - collateral.decimals) decimals\\n     */\\n    uint256 public price;\\n\\n    /**\\n     * @notice Net minted amount, including reserve.\\n     */\\n    uint256 public minted;\\n\\n    /**\\n     * @notice Amount of the collateral that is currently under a challenge.\\n     * Used to figure out whether there are pending challenges.\\n     */\\n    uint256 public challengedAmount;\\n\\n    /**\\n     * @notice Challenge period in seconds.\\n     */\\n    uint64 public immutable challengePeriod;\\n\\n    /**\\n     * @notice End of the latest cooldown. If this is in the future, minting is suspended.\\n     */\\n    uint256 public cooldown;\\n\\n    /**\\n     * @notice How much can be minted at most.\\n     */\\n    uint256 public limit;\\n\\n    /**\\n     * @notice Timestamp when minting can start and the position no longer denied.\\n     */\\n    uint256 public immutable start;\\n\\n    /**\\n     * @notice Timestamp of the expiration of the position. After expiration, challenges cannot be averted\\n     * any more. This is also the basis for fee calculations.\\n     */\\n    uint256 public expiration;\\n\\n    /**\\n     * @notice The original position to help identifying clones.\\n     */\\n    address public immutable original;\\n\\n    /**\\n     * @notice Pointer to the minting hub.\\n     */\\n    address public immutable hub;\\n\\n    /**\\n     * @notice The Frankencoin contract.\\n     */\\n    IFrankencoin public immutable zchf;\\n\\n    /**\\n     * @notice The collateral token.\\n     */\\n    IERC20 public immutable override collateral;\\n\\n    /**\\n     * @notice Minimum acceptable collateral amount to prevent dust.\\n     */\\n    uint256 public immutable override minimumCollateral;\\n\\n    /**\\n     * @notice Always pay interest for at least four weeks.\\n     */\\n    uint256 private constant MIN_INTEREST_DURATION = 4 weeks;\\n\\n    /**\\n     * @notice The interest in parts per million per year that is deducted when minting Frankencoins.\\n     * To be paid upfront.\\n     */\\n    uint32 public immutable annualInterestPPM;\\n\\n    /**\\n     * @notice The reserve contribution in parts per million of the minted amount.\\n     */\\n    uint32 public immutable reserveContribution;\\n\\n    event MintingUpdate(uint256 collateral, uint256 price, uint256 minted, uint256 limit);\\n    event PositionDenied(address indexed sender, string message); // emitted if closed by governance\\n\\n    error InsufficientCollateral();\\n    error TooLate();\\n    error RepaidTooMuch(uint256 excess);\\n    error LimitExceeded();\\n    error ChallengeTooSmall();\\n    error Expired();\\n    error Hot();\\n    error Challenged();\\n    error NotHub();\\n\\n    modifier alive() {\\n        if (block.timestamp >= expiration) revert Expired();\\n        _;\\n    }\\n\\n    modifier noCooldown() {\\n        if (block.timestamp <= cooldown) revert Hot();\\n        _;\\n    }\\n\\n    modifier noChallenge() {\\n        if (challengedAmount > 0) revert Challenged();\\n        _;\\n    }\\n\\n    modifier onlyHub() {\\n        if (msg.sender != address(hub)) revert NotHub();\\n        _;\\n    }\\n\\n    /**\\n     * @dev See MintingHub.openPosition\\n     */\\n    constructor(\\n        address _owner,\\n        address _hub,\\n        address _zchf,\\n        address _collateral,\\n        uint256 _minCollateral,\\n        uint256 _initialLimit,\\n        uint256 _initPeriod,\\n        uint256 _duration,\\n        uint64 _challengePeriod,\\n        uint32 _annualInterestPPM,\\n        uint256 _liqPrice,\\n        uint32 _reservePPM\\n    ) {\\n        require(_initPeriod >= 3 days); // must be at least three days, recommended to use higher values\\n        _setOwner(_owner);\\n        original = address(this);\\n        hub = _hub;\\n        zchf = IFrankencoin(_zchf);\\n        collateral = IERC20(_collateral);\\n        annualInterestPPM = _annualInterestPPM;\\n        reserveContribution = _reservePPM;\\n        minimumCollateral = _minCollateral;\\n        challengePeriod = _challengePeriod;\\n        start = block.timestamp + _initPeriod; // at least three days time to deny the position\\n        cooldown = start;\\n        expiration = start + _duration;\\n        limit = _initialLimit;\\n        _setPrice(_liqPrice);\\n    }\\n\\n    /**\\n     * @notice Method to initialize a freshly created clone. It is the responsibility of the creator to make sure this is only\\n     * called once and to call reduceLimitForClone on the original position before initializing the clone.\\n     */\\n    function initializeClone(\\n        address owner,\\n        uint256 _price,\\n        uint256 _coll,\\n        uint256 _initialMint,\\n        uint256 expirationTime\\n    ) external onlyHub {\\n        if (_coll < minimumCollateral) revert InsufficientCollateral();\\n        uint256 impliedPrice = (_initialMint * ONE_DEC18) / _coll;\\n        _initialMint = (impliedPrice * _coll) / ONE_DEC18; // to cancel potential rounding errors\\n        if (impliedPrice > _price) revert InsufficientCollateral();\\n        _setOwner(owner);\\n        limit = _initialMint;\\n        expiration = expirationTime;\\n        _setPrice(impliedPrice);\\n        _mint(owner, _initialMint, _coll);\\n    }\\n\\n    function limitForClones() public view returns (uint256) {\\n        uint256 backedLimit = (_collateralBalance() * price) / ONE_DEC18;\\n        if (backedLimit >= limit) {\\n            return 0;\\n        } else {\\n            // due to invariants, this is always below (limit - minted)\\n            return limit - backedLimit;\\n        }\\n    }\\n\\n    /**\\n     * @notice Adjust this position's limit to allow a clone to mint its own Frankencoins.\\n     * Invariant: global limit stays the same.\\n     *\\n     * Cloning a position is only allowed if the position is not challenged, not expired and not in cooldown.\\n     */\\n    function reduceLimitForClone(uint256 mint_) external noChallenge noCooldown alive onlyHub {\\n        if (mint_ > limitForClones()) revert LimitExceeded();\\n        limit -= mint_;\\n    }\\n\\n    /**\\n     * @notice Qualified pool share holders can call this method to immediately expire a freshly proposed position.\\n     */\\n    function deny(address[] calldata helpers, string calldata message) external {\\n        if (block.timestamp >= start) revert TooLate();\\n        IReserve(zchf.reserve()).checkQualified(msg.sender, helpers);\\n        _close(); // since expiration is immutable, we put it under eternal cooldown\\n        emit PositionDenied(msg.sender, message);\\n    }\\n\\n    function _close() internal {\\n        cooldown = type(uint256).max;\\n    }\\n\\n    function isClosed() public view returns (bool) {\\n        return cooldown == type(uint256).max;\\n    }\\n\\n    /**\\n     * @notice This is how much the minter can actually use when minting ZCHF, with the rest being used\\n     * assigned to the minter reserve or (if applicable) fees.\\n     */\\n    function getUsableMint(uint256 totalMint, bool afterFees) external view returns (uint256) {\\n        if (afterFees) {\\n            return (totalMint * (1000_000 - reserveContribution - calculateCurrentFee())) / 1000_000;\\n        } else {\\n            return (totalMint * (1000_000 - reserveContribution)) / 1000_000;\\n        }\\n    }\\n\\n    /**\\n     * @notice \\\"All in one\\\" function to adjust the outstanding amount of ZCHF, the collateral amount,\\n     * and the price in one transaction.\\n     */\\n    function adjust(uint256 newMinted, uint256 newCollateral, uint256 newPrice) external onlyOwner {\\n        uint256 colbal = _collateralBalance();\\n        if (newCollateral > colbal) {\\n            collateral.transferFrom(msg.sender, address(this), newCollateral - colbal);\\n        }\\n        // Must be called after collateral deposit, but before withdrawal\\n        if (newMinted < minted) {\\n            zchf.burnFromWithReserve(msg.sender, minted - newMinted, reserveContribution);\\n            minted = newMinted;\\n        }\\n        if (newCollateral < colbal) {\\n            withdrawCollateral(msg.sender, colbal - newCollateral);\\n        }\\n        // Must be called after collateral withdrawal\\n        if (newMinted > minted) {\\n            mint(msg.sender, newMinted - minted);\\n        }\\n        if (newPrice != price) {\\n            adjustPrice(newPrice);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows the position owner to adjust the liquidation price as long as there is no pending challenge.\\n     * Lowering the liquidation price can be done with immediate effect, given that there is enough collateral.\\n     * Increasing the liquidation price triggers a cooldown period of 3 days, during which minting is suspended.\\n     */\\n    function adjustPrice(uint256 newPrice) public onlyOwner noChallenge {\\n        if (newPrice > price) {\\n            _restrictMinting(3 days);\\n        } else {\\n            _checkCollateral(_collateralBalance(), newPrice);\\n        }\\n        _setPrice(newPrice);\\n        emit MintingUpdate(_collateralBalance(), price, minted, limit);\\n    }\\n\\n    function _setPrice(uint256 newPrice) internal {\\n        require(newPrice * minimumCollateral <= limit * ONE_DEC18); // sanity check\\n        price = newPrice;\\n    }\\n\\n    function _collateralBalance() internal view returns (uint256) {\\n        return IERC20(collateral).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Mint ZCHF as long as there is no open challenge, the position is not subject to a cooldown,\\n     * and there is sufficient collateral.\\n     */\\n    function mint(address target, uint256 amount) public onlyOwner noChallenge noCooldown alive {\\n        _mint(target, amount, _collateralBalance());\\n    }\\n\\n    function calculateCurrentFee() public view returns (uint32) {\\n        uint256 exp = expiration;\\n        uint256 time = block.timestamp < start ? start : block.timestamp;\\n        uint256 timePassed = time >= exp - MIN_INTEREST_DURATION ? MIN_INTEREST_DURATION : exp - time;\\n        // Time resolution is in the range of minutes for typical interest rates.\\n        return uint32((timePassed * annualInterestPPM) / 365 days);\\n    }\\n\\n    function _mint(address target, uint256 amount, uint256 collateral_) internal {\\n        if (minted + amount > limit) revert LimitExceeded();\\n        zchf.mintWithReserve(target, amount, reserveContribution, calculateCurrentFee());\\n        minted += amount;\\n\\n        _checkCollateral(collateral_, price);\\n        emit MintingUpdate(_collateralBalance(), price, minted, limit);\\n    }\\n\\n    function _restrictMinting(uint256 period) internal {\\n        uint256 horizon = block.timestamp + period;\\n        if (horizon > cooldown) {\\n            cooldown = horizon;\\n        }\\n    }\\n\\n    /**\\n     * @notice Repay some ZCHF. If too much is repaid, the call fails.\\n     * It is possible to repay while there are challenges, but the collateral is locked until all is clear again.\\n     *\\n     * The repaid amount should fulfill the following equation in order to close the position,\\n     * i.e. bring the minted amount to 0:\\n     * minted = amount + zchf.calculateAssignedReserve(amount, reservePPM)\\n     *\\n     * Under normal circumstances, this implies:\\n     * amount = minted * (1000000 - reservePPM)\\n     *\\n     * E.g. if minted is 50 and reservePPM is 200000, it is necessary to repay 40 to be able to close the position.\\n     */\\n    function repay(uint256 amount) public {\\n        IERC20(zchf).transferFrom(msg.sender, address(this), amount);\\n        uint256 actuallyRepaid = IFrankencoin(zchf).burnWithReserve(amount, reserveContribution);\\n        _notifyRepaid(actuallyRepaid);\\n        emit MintingUpdate(_collateralBalance(), price, minted, limit);\\n    }\\n\\n    function _notifyRepaid(uint256 amount) internal {\\n        if (amount > minted) revert RepaidTooMuch(amount - minted);\\n        minted -= amount;\\n    }\\n\\n    /**\\n     * @notice Withdraw any ERC20 token that might have ended up on this address.\\n     * Withdrawing collateral is subject to the same restrictions as withdrawCollateral(...).\\n     */\\n    function withdraw(address token, address target, uint256 amount) external onlyOwner {\\n        if (token == address(collateral)) {\\n            withdrawCollateral(target, amount);\\n        } else {\\n            uint256 balance = _collateralBalance();\\n            IERC20(token).transfer(target, amount);\\n            require(balance == _collateralBalance()); // guard against double-entry-point tokens\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw collateral from the position up to the extent that it is still well collateralized afterwards.\\n     * Not possible as long as there is an open challenge or the contract is subject to a cooldown.\\n     *\\n     * Withdrawing collateral below the minimum collateral amount formally closes the position.\\n     */\\n    function withdrawCollateral(address target, uint256 amount) public onlyOwner noChallenge {\\n        if (block.timestamp <= cooldown && !isClosed()) revert Hot();\\n        uint256 balance = _withdrawCollateral(target, amount);\\n        _checkCollateral(balance, price);\\n        if (balance < minimumCollateral && balance > 0) revert InsufficientCollateral(); // Prevent dust amounts\\n    }\\n\\n    function _withdrawCollateral(address target, uint256 amount) internal returns (uint256) {\\n        if (amount > 0) {\\n            // Some weird tokens fail when trying to transfer 0 amounts\\n            IERC20(collateral).transfer(target, amount);\\n        }\\n        uint256 balance = _collateralBalance();\\n        if (balance < minimumCollateral && challengedAmount == 0) {\\n            // This leaves a slightly unsatisfying possibility open: if the withdrawal happens due to a successful\\n            // challenge, there might be a small amount of collateral left that is not withheld in case there are no\\n            // other pending challenges. The only way to cleanly solve this would be to have two distinct cooldowns,\\n            // one for minting and one for withdrawals.\\n            _close();\\n        }\\n\\n        emit MintingUpdate(balance, price, minted, limit);\\n        return balance;\\n    }\\n\\n    /**\\n     * @notice This invariant must always hold and must always be checked when any of the three\\n     * variables change in an adverse way.\\n     */\\n    function _checkCollateral(uint256 collateralReserve, uint256 atPrice) internal view {\\n        if (collateralReserve * atPrice < minted * ONE_DEC18) revert InsufficientCollateral();\\n    }\\n\\n    /**\\n     * @notice Returns the liquidation price and the durations for phase1 and phase2 of the challenge.\\n     * In this implementation, both phases are always of equal length.\\n     */\\n    function challengeData() external view returns (uint256 liqPrice, uint64 phase1, uint64 phase2) {\\n        return (price, challengePeriod, challengePeriod);\\n    }\\n\\n    function notifyChallengeStarted(uint256 size) external onlyHub {\\n        // Require minimum size. Collateral balance can be below minimum if it was partially challenged before.\\n        if (size < minimumCollateral && size < _collateralBalance()) revert ChallengeTooSmall();\\n        if (size == 0) revert ChallengeTooSmall();\\n        challengedAmount += size;\\n    }\\n\\n    /**\\n     * @param size   amount of collateral challenged (dec18)\\n     */\\n    function notifyChallengeAverted(uint256 size) external onlyHub {\\n        challengedAmount -= size;\\n        // Don't allow minter to close the position immediately so challenge can be repeated before\\n        // the owner has a chance to mint more on an undercollateralized position\\n        _restrictMinting(1 days);\\n    }\\n\\n    /**\\n     * @notice Notifies the position that a challenge was successful.\\n     * Triggers the payout of the challenged part of the collateral.\\n     * Everything else is assumed to be handled by the hub.\\n     *\\n     * @param _bidder   address of the bidder that receives the collateral\\n     * @param _size     size of the collateral bid for (dec 18)\\n     * @return (position owner, effective challenge size in ZCHF, repaid amount, reserve ppm)\\n     */\\n    function notifyChallengeSucceeded(\\n        address _bidder,\\n        uint256 _size\\n    ) external onlyHub returns (address, uint256, uint256, uint32) {\\n        challengedAmount -= _size;\\n        uint256 colBal = _collateralBalance();\\n        if (colBal < _size) {\\n            _size = colBal;\\n        }\\n        uint256 repayment = _mulDiv(minted, _size, colBal);\\n        _notifyRepaid(repayment); // we assume the caller takes care of the actual repayment\\n        _withdrawCollateral(_bidder, _size); // transfer collateral to the bidder and emit update\\n\\n        // Give time for additional challenges before the owner can mint again. In particular,\\n        // the owner might have added collateral only seconds before the challenge ended, preventing a close.\\n        _restrictMinting(3 days);\\n\\n        return (owner, _size, repayment, reserveContribution);\\n    }\\n}\\n\",\"keccak256\":\"0xf169f127aa1e2f88f732beb37e626967cb265402bb1a2c049fcf1f8647b066b0\",\"license\":\"MIT\"},\"contracts/PositionFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Position.sol\\\";\\nimport \\\"./interface/IFrankencoin.sol\\\";\\n\\ncontract PositionFactory {\\n    /**\\n     * Create a completely new position in a newly deployed contract.\\n     * Must be called through minting hub to be recognized as valid position.\\n     */\\n    function createNewPosition(\\n        address _owner,\\n        address _zchf,\\n        address _collateral,\\n        uint256 _minCollateral,\\n        uint256 _initialLimit,\\n        uint256 _initPeriod,\\n        uint256 _duration,\\n        uint64 _challengePeriod,\\n        uint32 _annualInterestPPM,\\n        uint256 _liqPrice,\\n        uint32 _reserve\\n    ) external returns (address) {\\n        return\\n            address(\\n                new Position(\\n                    _owner,\\n                    msg.sender,\\n                    _zchf,\\n                    _collateral,\\n                    _minCollateral,\\n                    _initialLimit,\\n                    _initPeriod,\\n                    _duration,\\n                    _challengePeriod,\\n                    _annualInterestPPM,\\n                    _liqPrice,\\n                    _reserve\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice clone an existing position. This can be a clone of another clone,\\n     * or an original position.\\n     * @param _existing address of the position we want to clone\\n     * @return address of the newly created clone position\\n     */\\n    function clonePosition(address _existing) external returns (address) {\\n        Position existing = Position(_existing);\\n        Position clone = Position(_createClone(existing.original()));\\n        return address(clone);\\n    }\\n\\n    // github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\\n    function _createClone(address target) internal returns (address result) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            result := create(0, clone, 0x37)\\n        }\\n        require(result != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x75f6e97ec51fc7e5ccd66ad826b13cf257f90b200160df14e642b7f1fd50e167\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: MIT\\n *\\n * Copyright (c) 2016-2019 zOS Global Limited\\n *\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see `ERC20Detailed`.\\n */\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns always true. Throws error on failure.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\\n     * zero by default.\\n     *\\n     * This value can change when `approve` or `transferFrom` are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * > Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an `Approval` event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns always true. Throws error on failure.\\n     *\\n     * Emits a `Transfer` event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to `approve`. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6c4823424e1d0c53e2d3e978b81929fcec2583b96ed286abc955b71a5aad5544\",\"license\":\"MIT\"},\"contracts/interface/IFrankencoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\n\\ninterface IFrankencoin is IERC20 {\\n    function suggestMinter(address _minter, uint256 _applicationPeriod, uint256 _applicationFee, string calldata _message) external;\\n\\n    function registerPosition(address position) external;\\n\\n    function denyMinter(address minter, address[] calldata helpers, string calldata message) external;\\n\\n    function reserve() external view returns (IReserve);\\n\\n    function minterReserve() external view returns (uint256);\\n\\n    function calculateAssignedReserve(uint256 mintedAmount, uint32 _reservePPM) external view returns (uint256);\\n\\n    function equity() external view returns (uint256);\\n\\n    function isMinter(address minter) external view returns (bool);\\n\\n    function getPositionParent(address position) external view returns (address);\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function mintWithReserve(address target, uint256 amount, uint32 reservePPM, uint32 feePPM) external;\\n\\n    function burnFrom(address target, uint256 amount) external;\\n\\n    function burnWithoutReserve(uint256 amountIncludingReserve, uint32 reservePPM) external;\\n\\n    function burnFromWithReserve(address payer, uint256 targetTotalBurnAmount, uint32 _reservePPM) external returns (uint256);\\n\\n    function burnWithReserve(uint256 amountExcludingReserve, uint32 reservePPM) external returns (uint256);\\n\\n    function notifyLoss(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xb06c0141cd64d092f192123055154ef58f9aafe3f7b4fc56ac41e75659727990\",\"license\":\"MIT\"},\"contracts/interface/IPosition.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./IReserve.sol\\\";\\nimport \\\"./IFrankencoin.sol\\\";\\n\\ninterface IPosition {\\n\\n    function original() external returns (address);\\n\\n    function collateral() external returns (IERC20);\\n\\n    function minimumCollateral() external returns (uint256);\\n\\n    function challengePeriod() external returns (uint64);\\n\\n    function expiration() external returns (uint256);\\n\\n    function price() external returns (uint256);\\n\\n    function reduceLimitForClone(uint256 amount) external;\\n\\n    function initializeClone(address owner, uint256 _price, uint256 _coll, uint256 _mint, uint256 expiration) external;\\n\\n    function deny(address[] calldata helpers, string calldata message) external;\\n\\n    function mint(address target, uint256 amount) external;\\n\\n    function minted() external returns (uint256);\\n\\n    function reserveContribution() external returns (uint32);\\n\\n    function getUsableMint(uint256 totalMint, bool beforeFees) external view returns (uint256);\\n\\n    function challengeData() external view returns (uint256 liqPrice, uint64 phase1, uint64 phase2);\\n\\n    function notifyChallengeStarted(uint256 size) external;\\n\\n    function notifyChallengeAverted(uint256 size) external;\\n\\n    function notifyChallengeSucceeded(address _bidder, uint256 _size) external returns (address, uint256, uint256, uint32);\\n\\n}\",\"keccak256\":\"0x23af50053d6d1a5e3aab18e9e9300399c8ab24efa64645299572b27934dd7b9f\",\"license\":\"MIT\"},\"contracts/interface/IReserve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IReserve is IERC20 {\\n   function invest(uint256 amount, uint256 expected) external returns (uint256);\\n   function checkQualified(address sender, address[] calldata helpers) external view;\\n}\",\"keccak256\":\"0x3b46b47f54a43bf2da382a4e5cc70e72a1aeb7845c75d30a04809ecccf2019dc\",\"license\":\"MIT\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Functions for share valuation\\n */\\ncontract MathUtil {\\n    uint256 internal constant ONE_DEC18 = 10 ** 18;\\n\\n    // Let's go for 12 digits of precision (18-6)\\n    uint256 internal constant THRESH_DEC18 = 10 ** 6;\\n\\n    /**\\n     * @notice Cubic root with Halley approximation\\n     *         Number 1e18 decimal\\n     * @param _v     number for which we calculate x**(1/3)\\n     * @return returns _v**(1/3)\\n     */\\n    function _cubicRoot(uint256 _v) internal pure returns (uint256) {\\n        // Good first guess for _v slightly above 1.0, which is often the case in the Frankencoin system\\n        uint256 x = _v > ONE_DEC18 && _v < 10 ** 19 ? (_v - ONE_DEC18) / 3 + ONE_DEC18 : ONE_DEC18;\\n        uint256 diff;\\n        do {\\n            uint256 powX3 = _mulD18(_mulD18(x, x), x);\\n            uint256 xnew = _mulDiv(x, (powX3 + 2 * _v), (2 * powX3 + _v));\\n            diff = xnew > x ? xnew - x : x - xnew;\\n            x = xnew;\\n        } while (diff > THRESH_DEC18);\\n        return x;\\n    }\\n\\n    /**\\n     * Divides and multiplies, with divisor > 0.\\n     */\\n    function _mulDiv(uint256 x, uint256 factor, uint256 divisor) internal pure returns (uint256) {\\n        if (factor == 0) {\\n            return 0;\\n        } else if (type(uint256).max / factor > x) {\\n            return (x * factor) / divisor;\\n        } else {\\n            // divide first to avoid overflow\\n            return x > factor ? (x / divisor) * factor : (factor / divisor) * x;\\n        }\\n    }\\n\\n    function _mulD18(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a * _b) / ONE_DEC18;\\n    }\\n\\n    function _divD18(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        return (_a * ONE_DEC18) / _b;\\n    }\\n\\n    function _power3(uint256 _x) internal pure returns (uint256) {\\n        return _mulD18(_mulD18(_x, _x), _x);\\n    }\\n\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xf07578927e4a63cac944e3e757a0b14a524b022c78e8789732ef90cedc3c322e\",\"license\":\"MIT\"},\"contracts/utils/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\n//\\n// Modifications:\\n// - Replaced Context._msgSender() with msg.sender\\n// - Made leaner\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n */\\ncontract Ownable {\\n    address public owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    error NotOwner();\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _setOwner(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _setOwner(address newOwner) internal {\\n        require(newOwner != address(0x0));\\n        address oldOwner = owner;\\n        owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    function _requireOwner(address sender) internal view {\\n        if (owner != sender) revert NotOwner();\\n    }\\n\\n    modifier onlyOwner() {\\n        _requireOwner(msg.sender);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xaff4680eddefdce704475923bd24cf6b9fec0fe04edc8d10b44ecf7fdc62902a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561000f575f80fd5b506123f58061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063b3e8918014610038578063c3fd1c3714610067575b5f80fd5b61004b61004636600461026d565b61007a565b6040516001600160a01b03909116815260200160405180910390f35b61004b6100753660046102a7565b6100f0565b5f808290505f6100e8826001600160a01b03166346c715fa6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100bf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100e3919061035d565b6101a5565b949350505050565b5f8b338c8c8c8c8c8c8c8c8c8c60405161010990610249565b6001600160a01b039c8d1681529a8c1660208c0152988b1660408b0152969099166060890152608088019490945260a087019290925260c086015260e085015267ffffffffffffffff1661010084015263ffffffff9384166101208401526101408301529190911661016082015261018001604051809103905ff080158015610194573d5f803e3d5ffd5b509c9b505050505050505050505050565b5f808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037815ff09250506001600160a01b0382166102435760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b50919050565b6120478061037983390190565b6001600160a01b038116811461026a575f80fd5b50565b5f6020828403121561027d575f80fd5b813561028881610256565b9392505050565b803563ffffffff811681146102a2575f80fd5b919050565b5f805f805f805f805f805f6101608c8e0312156102c2575f80fd5b8b356102cd81610256565b9a5060208c01356102dd81610256565b995060408c01356102ed81610256565b985060608c0135975060808c0135965060a08c0135955060c08c0135945060e08c013567ffffffffffffffff81168114610325575f80fd5b93506103346101008d0161028f565b92506101208c0135915061034b6101408d0161028f565b90509295989b509295989b9093969950565b5f6020828403121561036d575f80fd5b81516102888161025656fe6101a060405234801562000011575f80fd5b5060405162002047380380620020478339810160408190526200003491620001a5565b6203f48086101562000044575f80fd5b6200004f8c620000db565b3060c0526001600160a01b038b811660e0528a81166101005289166101205263ffffffff808416610160528116610180526101408890526001600160401b0384166080526200009f864262000285565b60a08190526004819055620000b690869062000285565b6006556005879055620000c9826200013d565b505050505050505050505050620002bb565b6001600160a01b038116620000ee575f80fd5b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b670de0b6b3a7640000600554620001559190620002a1565b61014051620001659083620002a1565b111562000170575f80fd5b600155565b80516001600160a01b03811681146200018c575f80fd5b919050565b805163ffffffff811681146200018c575f80fd5b5f805f805f805f805f805f806101808d8f031215620001c2575f80fd5b620001cd8d62000175565b9b50620001dd60208e0162000175565b9a50620001ed60408e0162000175565b9950620001fd60608e0162000175565b985060808d0151975060a08d0151965060c08d0151955060e08d015194506101008d015160018060401b038116811462000235575f80fd5b9350620002466101208e0162000191565b92506101408d015191506200025f6101608e0162000191565b90509295989b509295989b509295989b565b634e487b7160e01b5f52601160045260245ffd5b808201808211156200029b576200029b62000271565b92915050565b80820281158282048414176200029b576200029b62000271565b60805160a05160c05160e0516101005161012051610140516101605161018051611c54620003f35f395f8181610357015281816105c20152818161061e0152818161087401528181610a1301528181610ed601526116d701525f818161041f0152610b9001525f81816104980152818161091401528181610c97015281816110ce0152818161156b01526117f301525f818161052201528181610db60152818161128e0152818161138801526114f201525f81816104fb0152818161068b0152818161098501528181610a3c01528181610e6a01526116a601525f81816102e8015281816107c601528181610c5701528181610d2c0152818161108e015261120c01525f6103ad01525f81816104bf0152818161064b01528181610b070152610b3401525f818161029d015261056f0152611c545ff3fe608060405234801561000f575f80fd5b50600436106101fd575f3560e01c806372bf079e11610114578063b0c2ec82116100a9578063c4d4803a11610079578063c4d4803a146104f6578063d8dfeb451461051d578063d9caed1214610544578063f2fde38b14610557578063f3f480d91461056a575f80fd5b8063b0c2ec8214610480578063babe7c7414610493578063be9a6555146104ba578063c2b6b58c146104e1575f80fd5b8063a035b1fe116100e4578063a035b1fe14610453578063a4d66daf1461045c578063a9ced3f014610465578063aee1a9591461046d575f80fd5b806372bf079e146103fe578063787a08a6146104115780637bd6fb9b1461041a5780638da5cb5b14610441575f80fd5b8063383ef46e116101955780634665096d116101655780634665096d1461039f57806346c715fa146103a857806349746f10146103cf5780634f02c420146103e25780636f871cec146103eb575f80fd5b8063383ef46e146103355780633a7c29fb1461035257806340c10f191461037957806342d020411461038c575f80fd5b8063329864aa116101d0578063329864aa14610288578063350c35e9146102d0578063365a86fc146102e3578063371fd8e614610322575f80fd5b806308262940146102015780631bbea34c1461022757806320aa9e721461023c57806324e657fe1461027f575b5f80fd5b61021461020f366004611895565b6105aa565b6040519081526020015b60405180910390f35b61023a6102353660046118c3565b610649565b005b61024f61024a366004611991565b6107b7565b604080516001600160a01b03909516855260208501939093529183015263ffffffff16606082015260800161021e565b61021460035481565b6001546040805191825267ffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016602083018190529082015260600161021e565b61023a6102de366004611991565b61089c565b61030a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161021e565b61023a6103303660046119bb565b610963565b61033d610aff565b60405163ffffffff909116815260200161021e565b61033d7f000000000000000000000000000000000000000000000000000000000000000081565b61023a610387366004611991565b610bc8565b61023a61039a3660046119bb565b610c4c565b61021460065481565b61030a7f000000000000000000000000000000000000000000000000000000000000000081565b61023a6103dd3660046119bb565b610d21565b61021460025481565b61023a6103f93660046119d2565b610d90565b61023a61040c3660046119bb565b610f8f565b61021460045481565b61033d7f000000000000000000000000000000000000000000000000000000000000000081565b5f5461030a906001600160a01b031681565b61021460015481565b61021460055481565b610214611033565b61023a61047b3660046119fb565b611083565b61023a61048e3660046119bb565b61119c565b6102147f000000000000000000000000000000000000000000000000000000000000000081565b6102147f000000000000000000000000000000000000000000000000000000000000000081565b6004546040515f19909114815260200161021e565b61030a7f000000000000000000000000000000000000000000000000000000000000000081565b61030a7f000000000000000000000000000000000000000000000000000000000000000081565b61023a610552366004611a3b565b611283565b61023a610565366004611a79565b61135f565b6105917f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff909116815260200161021e565b5f811561061557620f42406105bd610aff565b6105ea7f0000000000000000000000000000000000000000000000000000000000000000620f4240611aa8565b6105f49190611aa8565b6106049063ffffffff1685611acc565b61060e9190611ae3565b9050610643565b620f42406105f47f000000000000000000000000000000000000000000000000000000000000000082611aa8565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000042106106895760405163ecdd1c2960e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107099190611b02565b6001600160a01b031663352e3a833386866040518463ffffffff1660e01b815260040161073893929190611b1d565b5f6040518083038186803b15801561074e575f80fd5b505afa158015610760573d5f803e3d5ffd5b5050505061076e5f19600455565b336001600160a01b03167faca80c800ec0d2aa9d9d31b7f886a1dd3067d4676abc637626a18ffb9381653d83836040516107a9929190611b78565b60405180910390a250505050565b5f808080336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610804576040516313bd2e8360e31b815260040160405180910390fd5b8460035f8282546108159190611ba6565b909155505f9050610824611371565b905085811015610832578095505b5f61084060025488846113fe565b905061084b81611478565b61085588886114c5565b506108626203f4806115eb565b5f546001600160a01b031698969750957f000000000000000000000000000000000000000000000000000000000000000095509350505050565b6108a533611608565b600354156108c65760405163d26e2de960e01b815260040160405180910390fd5b60045442111580156108db57506004545f1914155b156108f957604051631c02820f60e21b815260040160405180910390fd5b5f61090483836114c5565b905061091281600154611635565b7f00000000000000000000000000000000000000000000000000000000000000008110801561094057505f81115b1561095e57604051633a23d82560e01b815260040160405180910390fd5b505050565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af11580156109d3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109f79190611bb9565b5060405163a47d75ad60e01b81526004810182905263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a47d75ad906044016020604051808303815f875af1158015610a8a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aae9190611bd4565b9050610ab981611478565b5f80516020611bff833981519152610acf611371565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a15050565b6006545f90817f00000000000000000000000000000000000000000000000000000000000000004210610b325742610b54565b7f00000000000000000000000000000000000000000000000000000000000000005b90505f610b646224ea0084611ba6565b821015610b7a57610b758284611ba6565b610b7f565b6224ea005b90506301e13380610bb663ffffffff7f00000000000000000000000000000000000000000000000000000000000000001683611acc565b610bc09190611ae3565b935050505090565b610bd133611608565b60035415610bf25760405163d26e2de960e01b815260040160405180910390fd5b6004544211610c1457604051631c02820f60e21b815260040160405180910390fd5b6006544210610c3657604051630407b05b60e31b815260040160405180910390fd5b610c488282610c43611371565b611674565b5050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c95576040516313bd2e8360e31b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081108015610cca5750610cc7611371565b81105b15610ce857604051633c80636b60e21b815260040160405180910390fd5b805f03610d0857604051633c80636b60e21b815260040160405180910390fd5b8060035f828254610d199190611beb565b909155505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d6a576040516313bd2e8360e31b815260040160405180910390fd5b8060035f828254610d7b9190611ba6565b90915550610d8d9050620151806115eb565b50565b610d9933611608565b5f610da2611371565b905080831115610e5e576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd3330610de78588611ba6565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303815f875af1158015610e38573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e5c9190611bb9565b505b600254841015610f45577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663315f3e723386600254610ea69190611ba6565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660448201526064016020604051808303815f875af1158015610f1a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f3e9190611bd4565b5060028490555b80831015610f5b57610f5b336102de8584611ba6565b600254841115610f7757610f7733600254866103879190611ba6565b6001548214610f8957610f8982610f8f565b50505050565b610f9833611608565b60035415610fb95760405163d26e2de960e01b815260040160405180910390fd5b600154811115610fd457610fcf6203f4806115eb565b610fe5565b610fe5610fdf611371565b82611635565b610fee816117d8565b5f80516020611bff833981519152611004611371565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a150565b5f80670de0b6b3a7640000600154611049611371565b6110539190611acc565b61105d9190611ae3565b9050600554811061106f575f91505090565b8060055461107d9190611ba6565b91505090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110cc576040516313bd2e8360e31b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000083101561110d57604051633a23d82560e01b815260040160405180910390fd5b5f83611121670de0b6b3a764000085611acc565b61112b9190611ae3565b9050670de0b6b3a76400006111408583611acc565b61114a9190611ae3565b92508481111561116d57604051633a23d82560e01b815260040160405180910390fd5b61117686611827565b60058390556006829055611189816117d8565b611194868486611674565b505050505050565b600354156111bd5760405163d26e2de960e01b815260040160405180910390fd5b60045442116111df57604051631c02820f60e21b815260040160405180910390fd5b600654421061120157604051630407b05b60e31b815260040160405180910390fd5b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461124a576040516313bd2e8360e31b815260040160405180910390fd5b611252611033565b81111561127257604051631930e3c960e11b815260040160405180910390fd5b8060055f828254610d199190611ba6565b61128c33611608565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316036112cf5761095e828261089c565b5f6112d8611371565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529192509085169063a9059cbb906044016020604051808303815f875af1158015611328573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061134c9190611bb9565b50611355611371565b8114610f89575f80fd5b61136833611608565b610d8d81611827565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156113d5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113f99190611bd4565b905090565b5f825f0361140d57505f611471565b83611419845f19611ae3565b111561143b578161142a8486611acc565b6114349190611ae3565b9050611471565b82841161145c578361144d8385611ae3565b6114579190611acc565b611434565b826114678386611ae3565b6114349190611acc565b9392505050565b6002548111156114b45760025461148f9082611ba6565b604051635795d46960e11b81526004016114ab91815260200190565b60405180910390fd5b8060025f828254610d199190611ba6565b5f811561155e5760405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303815f875af1158015611538573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061155c9190611bb9565b505b5f611567611371565b90507f0000000000000000000000000000000000000000000000000000000000000000811080156115985750600354155b156115a7576115a75f19600455565b60015460025460055460408051858152602081019490945283019190915260608201525f80516020611bff8339815191529060800160405180910390a19392505050565b5f6115f68242611beb565b9050600454811115610c485760045550565b5f546001600160a01b03828116911614610d8d576040516330cd747160e01b815260040160405180910390fd5b670de0b6b3a764000060025461164b9190611acc565b6116558284611acc565b1015610c4857604051633a23d82560e01b815260040160405180910390fd5b600554826002546116859190611beb565b11156116a457604051631930e3c960e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638112eb2b84847f00000000000000000000000000000000000000000000000000000000000000006116fe610aff565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925263ffffffff90811660448401521660648201526084015f604051808303815f87803b158015611757575f80fd5b505af1158015611769573d5f803e3d5ffd5b505050508160025f82825461177e9190611beb565b9250508190555061179181600154611635565b5f80516020611bff8339815191526117a7611371565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a1505050565b670de0b6b3a76400006005546117ee9190611acc565b6118187f000000000000000000000000000000000000000000000000000000000000000083611acc565b1115611822575f80fd5b600155565b6001600160a01b038116611839575f80fd5b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8015158114610d8d575f80fd5b5f80604083850312156118a6575f80fd5b8235915060208301356118b881611888565b809150509250929050565b5f805f80604085870312156118d6575f80fd5b843567ffffffffffffffff808211156118ed575f80fd5b818701915087601f830112611900575f80fd5b81358181111561190e575f80fd5b8860208260051b8501011115611922575f80fd5b60209283019650945090860135908082111561193c575f80fd5b818701915087601f83011261194f575f80fd5b81358181111561195d575f80fd5b88602082850101111561196e575f80fd5b95989497505060200194505050565b6001600160a01b0381168114610d8d575f80fd5b5f80604083850312156119a2575f80fd5b82356119ad8161197d565b946020939093013593505050565b5f602082840312156119cb575f80fd5b5035919050565b5f805f606084860312156119e4575f80fd5b505081359360208301359350604090920135919050565b5f805f805f60a08688031215611a0f575f80fd5b8535611a1a8161197d565b97602087013597506040870135966060810135965060800135945092505050565b5f805f60608486031215611a4d575f80fd5b8335611a588161197d565b92506020840135611a688161197d565b929592945050506040919091013590565b5f60208284031215611a89575f80fd5b81356114718161197d565b634e487b7160e01b5f52601160045260245ffd5b63ffffffff828116828216039080821115611ac557611ac5611a94565b5092915050565b808202811582820484141761064357610643611a94565b5f82611afd57634e487b7160e01b5f52601260045260245ffd5b500490565b5f60208284031215611b12575f80fd5b81516114718161197d565b6001600160a01b038481168252604060208084018290529083018490525f91859160608501845b87811015611b6b578435611b578161197d565b841682529382019390820190600101611b44565b5098975050505050505050565b60208152816020820152818360408301375f818301604090810191909152601f909201601f19160101919050565b8181038181111561064357610643611a94565b5f60208284031215611bc9575f80fd5b815161147181611888565b5f60208284031215611be4575f80fd5b5051919050565b8082018082111561064357610643611a9456fecb2040b7eb3265a4335698c9ecbe81a5f9857e92aa32e07ce235f44c321a7e35a2646970667358221220e0d1472eeed867eebc25a0da31ae960eff9373280d4f47ced7a6aa819f798c1964736f6c63430008140033a2646970667358221220ba34661e60bdd68f5bc1e9b494071d64c76f4ebabe1e32951d428ddf01ba88aa64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063b3e8918014610038578063c3fd1c3714610067575b5f80fd5b61004b61004636600461026d565b61007a565b6040516001600160a01b03909116815260200160405180910390f35b61004b6100753660046102a7565b6100f0565b5f808290505f6100e8826001600160a01b03166346c715fa6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100bf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100e3919061035d565b6101a5565b949350505050565b5f8b338c8c8c8c8c8c8c8c8c8c60405161010990610249565b6001600160a01b039c8d1681529a8c1660208c0152988b1660408b0152969099166060890152608088019490945260a087019290925260c086015260e085015267ffffffffffffffff1661010084015263ffffffff9384166101208401526101408301529190911661016082015261018001604051809103905ff080158015610194573d5f803e3d5ffd5b509c9b505050505050505050505050565b5f808260601b9050604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528160148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037815ff09250506001600160a01b0382166102435760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b50919050565b6120478061037983390190565b6001600160a01b038116811461026a575f80fd5b50565b5f6020828403121561027d575f80fd5b813561028881610256565b9392505050565b803563ffffffff811681146102a2575f80fd5b919050565b5f805f805f805f805f805f6101608c8e0312156102c2575f80fd5b8b356102cd81610256565b9a5060208c01356102dd81610256565b995060408c01356102ed81610256565b985060608c0135975060808c0135965060a08c0135955060c08c0135945060e08c013567ffffffffffffffff81168114610325575f80fd5b93506103346101008d0161028f565b92506101208c0135915061034b6101408d0161028f565b90509295989b509295989b9093969950565b5f6020828403121561036d575f80fd5b81516102888161025656fe6101a060405234801562000011575f80fd5b5060405162002047380380620020478339810160408190526200003491620001a5565b6203f48086101562000044575f80fd5b6200004f8c620000db565b3060c0526001600160a01b038b811660e0528a81166101005289166101205263ffffffff808416610160528116610180526101408890526001600160401b0384166080526200009f864262000285565b60a08190526004819055620000b690869062000285565b6006556005879055620000c9826200013d565b505050505050505050505050620002bb565b6001600160a01b038116620000ee575f80fd5b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b670de0b6b3a7640000600554620001559190620002a1565b61014051620001659083620002a1565b111562000170575f80fd5b600155565b80516001600160a01b03811681146200018c575f80fd5b919050565b805163ffffffff811681146200018c575f80fd5b5f805f805f805f805f805f806101808d8f031215620001c2575f80fd5b620001cd8d62000175565b9b50620001dd60208e0162000175565b9a50620001ed60408e0162000175565b9950620001fd60608e0162000175565b985060808d0151975060a08d0151965060c08d0151955060e08d015194506101008d015160018060401b038116811462000235575f80fd5b9350620002466101208e0162000191565b92506101408d015191506200025f6101608e0162000191565b90509295989b509295989b509295989b565b634e487b7160e01b5f52601160045260245ffd5b808201808211156200029b576200029b62000271565b92915050565b80820281158282048414176200029b576200029b62000271565b60805160a05160c05160e0516101005161012051610140516101605161018051611c54620003f35f395f8181610357015281816105c20152818161061e0152818161087401528181610a1301528181610ed601526116d701525f818161041f0152610b9001525f81816104980152818161091401528181610c97015281816110ce0152818161156b01526117f301525f818161052201528181610db60152818161128e0152818161138801526114f201525f81816104fb0152818161068b0152818161098501528181610a3c01528181610e6a01526116a601525f81816102e8015281816107c601528181610c5701528181610d2c0152818161108e015261120c01525f6103ad01525f81816104bf0152818161064b01528181610b070152610b3401525f818161029d015261056f0152611c545ff3fe608060405234801561000f575f80fd5b50600436106101fd575f3560e01c806372bf079e11610114578063b0c2ec82116100a9578063c4d4803a11610079578063c4d4803a146104f6578063d8dfeb451461051d578063d9caed1214610544578063f2fde38b14610557578063f3f480d91461056a575f80fd5b8063b0c2ec8214610480578063babe7c7414610493578063be9a6555146104ba578063c2b6b58c146104e1575f80fd5b8063a035b1fe116100e4578063a035b1fe14610453578063a4d66daf1461045c578063a9ced3f014610465578063aee1a9591461046d575f80fd5b806372bf079e146103fe578063787a08a6146104115780637bd6fb9b1461041a5780638da5cb5b14610441575f80fd5b8063383ef46e116101955780634665096d116101655780634665096d1461039f57806346c715fa146103a857806349746f10146103cf5780634f02c420146103e25780636f871cec146103eb575f80fd5b8063383ef46e146103355780633a7c29fb1461035257806340c10f191461037957806342d020411461038c575f80fd5b8063329864aa116101d0578063329864aa14610288578063350c35e9146102d0578063365a86fc146102e3578063371fd8e614610322575f80fd5b806308262940146102015780631bbea34c1461022757806320aa9e721461023c57806324e657fe1461027f575b5f80fd5b61021461020f366004611895565b6105aa565b6040519081526020015b60405180910390f35b61023a6102353660046118c3565b610649565b005b61024f61024a366004611991565b6107b7565b604080516001600160a01b03909516855260208501939093529183015263ffffffff16606082015260800161021e565b61021460035481565b6001546040805191825267ffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016602083018190529082015260600161021e565b61023a6102de366004611991565b61089c565b61030a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161021e565b61023a6103303660046119bb565b610963565b61033d610aff565b60405163ffffffff909116815260200161021e565b61033d7f000000000000000000000000000000000000000000000000000000000000000081565b61023a610387366004611991565b610bc8565b61023a61039a3660046119bb565b610c4c565b61021460065481565b61030a7f000000000000000000000000000000000000000000000000000000000000000081565b61023a6103dd3660046119bb565b610d21565b61021460025481565b61023a6103f93660046119d2565b610d90565b61023a61040c3660046119bb565b610f8f565b61021460045481565b61033d7f000000000000000000000000000000000000000000000000000000000000000081565b5f5461030a906001600160a01b031681565b61021460015481565b61021460055481565b610214611033565b61023a61047b3660046119fb565b611083565b61023a61048e3660046119bb565b61119c565b6102147f000000000000000000000000000000000000000000000000000000000000000081565b6102147f000000000000000000000000000000000000000000000000000000000000000081565b6004546040515f19909114815260200161021e565b61030a7f000000000000000000000000000000000000000000000000000000000000000081565b61030a7f000000000000000000000000000000000000000000000000000000000000000081565b61023a610552366004611a3b565b611283565b61023a610565366004611a79565b61135f565b6105917f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff909116815260200161021e565b5f811561061557620f42406105bd610aff565b6105ea7f0000000000000000000000000000000000000000000000000000000000000000620f4240611aa8565b6105f49190611aa8565b6106049063ffffffff1685611acc565b61060e9190611ae3565b9050610643565b620f42406105f47f000000000000000000000000000000000000000000000000000000000000000082611aa8565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000042106106895760405163ecdd1c2960e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cd3293de6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107099190611b02565b6001600160a01b031663352e3a833386866040518463ffffffff1660e01b815260040161073893929190611b1d565b5f6040518083038186803b15801561074e575f80fd5b505afa158015610760573d5f803e3d5ffd5b5050505061076e5f19600455565b336001600160a01b03167faca80c800ec0d2aa9d9d31b7f886a1dd3067d4676abc637626a18ffb9381653d83836040516107a9929190611b78565b60405180910390a250505050565b5f808080336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610804576040516313bd2e8360e31b815260040160405180910390fd5b8460035f8282546108159190611ba6565b909155505f9050610824611371565b905085811015610832578095505b5f61084060025488846113fe565b905061084b81611478565b61085588886114c5565b506108626203f4806115eb565b5f546001600160a01b031698969750957f000000000000000000000000000000000000000000000000000000000000000095509350505050565b6108a533611608565b600354156108c65760405163d26e2de960e01b815260040160405180910390fd5b60045442111580156108db57506004545f1914155b156108f957604051631c02820f60e21b815260040160405180910390fd5b5f61090483836114c5565b905061091281600154611635565b7f00000000000000000000000000000000000000000000000000000000000000008110801561094057505f81115b1561095e57604051633a23d82560e01b815260040160405180910390fd5b505050565b6040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af11580156109d3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109f79190611bb9565b5060405163a47d75ad60e01b81526004810182905263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a47d75ad906044016020604051808303815f875af1158015610a8a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aae9190611bd4565b9050610ab981611478565b5f80516020611bff833981519152610acf611371565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a15050565b6006545f90817f00000000000000000000000000000000000000000000000000000000000000004210610b325742610b54565b7f00000000000000000000000000000000000000000000000000000000000000005b90505f610b646224ea0084611ba6565b821015610b7a57610b758284611ba6565b610b7f565b6224ea005b90506301e13380610bb663ffffffff7f00000000000000000000000000000000000000000000000000000000000000001683611acc565b610bc09190611ae3565b935050505090565b610bd133611608565b60035415610bf25760405163d26e2de960e01b815260040160405180910390fd5b6004544211610c1457604051631c02820f60e21b815260040160405180910390fd5b6006544210610c3657604051630407b05b60e31b815260040160405180910390fd5b610c488282610c43611371565b611674565b5050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c95576040516313bd2e8360e31b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000081108015610cca5750610cc7611371565b81105b15610ce857604051633c80636b60e21b815260040160405180910390fd5b805f03610d0857604051633c80636b60e21b815260040160405180910390fd5b8060035f828254610d199190611beb565b909155505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610d6a576040516313bd2e8360e31b815260040160405180910390fd5b8060035f828254610d7b9190611ba6565b90915550610d8d9050620151806115eb565b50565b610d9933611608565b5f610da2611371565b905080831115610e5e576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166323b872dd3330610de78588611ba6565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303815f875af1158015610e38573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e5c9190611bb9565b505b600254841015610f45577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663315f3e723386600254610ea69190611ba6565b6040516001600160e01b031960e085901b1681526001600160a01b039092166004830152602482015263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660448201526064016020604051808303815f875af1158015610f1a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f3e9190611bd4565b5060028490555b80831015610f5b57610f5b336102de8584611ba6565b600254841115610f7757610f7733600254866103879190611ba6565b6001548214610f8957610f8982610f8f565b50505050565b610f9833611608565b60035415610fb95760405163d26e2de960e01b815260040160405180910390fd5b600154811115610fd457610fcf6203f4806115eb565b610fe5565b610fe5610fdf611371565b82611635565b610fee816117d8565b5f80516020611bff833981519152611004611371565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a150565b5f80670de0b6b3a7640000600154611049611371565b6110539190611acc565b61105d9190611ae3565b9050600554811061106f575f91505090565b8060055461107d9190611ba6565b91505090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146110cc576040516313bd2e8360e31b815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000083101561110d57604051633a23d82560e01b815260040160405180910390fd5b5f83611121670de0b6b3a764000085611acc565b61112b9190611ae3565b9050670de0b6b3a76400006111408583611acc565b61114a9190611ae3565b92508481111561116d57604051633a23d82560e01b815260040160405180910390fd5b61117686611827565b60058390556006829055611189816117d8565b611194868486611674565b505050505050565b600354156111bd5760405163d26e2de960e01b815260040160405180910390fd5b60045442116111df57604051631c02820f60e21b815260040160405180910390fd5b600654421061120157604051630407b05b60e31b815260040160405180910390fd5b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461124a576040516313bd2e8360e31b815260040160405180910390fd5b611252611033565b81111561127257604051631930e3c960e11b815260040160405180910390fd5b8060055f828254610d199190611ba6565b61128c33611608565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316036112cf5761095e828261089c565b5f6112d8611371565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529192509085169063a9059cbb906044016020604051808303815f875af1158015611328573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061134c9190611bb9565b50611355611371565b8114610f89575f80fd5b61136833611608565b610d8d81611827565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156113d5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113f99190611bd4565b905090565b5f825f0361140d57505f611471565b83611419845f19611ae3565b111561143b578161142a8486611acc565b6114349190611ae3565b9050611471565b82841161145c578361144d8385611ae3565b6114579190611acc565b611434565b826114678386611ae3565b6114349190611acc565b9392505050565b6002548111156114b45760025461148f9082611ba6565b604051635795d46960e11b81526004016114ab91815260200190565b60405180910390fd5b8060025f828254610d199190611ba6565b5f811561155e5760405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303815f875af1158015611538573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061155c9190611bb9565b505b5f611567611371565b90507f0000000000000000000000000000000000000000000000000000000000000000811080156115985750600354155b156115a7576115a75f19600455565b60015460025460055460408051858152602081019490945283019190915260608201525f80516020611bff8339815191529060800160405180910390a19392505050565b5f6115f68242611beb565b9050600454811115610c485760045550565b5f546001600160a01b03828116911614610d8d576040516330cd747160e01b815260040160405180910390fd5b670de0b6b3a764000060025461164b9190611acc565b6116558284611acc565b1015610c4857604051633a23d82560e01b815260040160405180910390fd5b600554826002546116859190611beb565b11156116a457604051631930e3c960e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638112eb2b84847f00000000000000000000000000000000000000000000000000000000000000006116fe610aff565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925263ffffffff90811660448401521660648201526084015f604051808303815f87803b158015611757575f80fd5b505af1158015611769573d5f803e3d5ffd5b505050508160025f82825461177e9190611beb565b9250508190555061179181600154611635565b5f80516020611bff8339815191526117a7611371565b60015460025460055460408051948552602085019390935291830152606082015260800160405180910390a1505050565b670de0b6b3a76400006005546117ee9190611acc565b6118187f000000000000000000000000000000000000000000000000000000000000000083611acc565b1115611822575f80fd5b600155565b6001600160a01b038116611839575f80fd5b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8015158114610d8d575f80fd5b5f80604083850312156118a6575f80fd5b8235915060208301356118b881611888565b809150509250929050565b5f805f80604085870312156118d6575f80fd5b843567ffffffffffffffff808211156118ed575f80fd5b818701915087601f830112611900575f80fd5b81358181111561190e575f80fd5b8860208260051b8501011115611922575f80fd5b60209283019650945090860135908082111561193c575f80fd5b818701915087601f83011261194f575f80fd5b81358181111561195d575f80fd5b88602082850101111561196e575f80fd5b95989497505060200194505050565b6001600160a01b0381168114610d8d575f80fd5b5f80604083850312156119a2575f80fd5b82356119ad8161197d565b946020939093013593505050565b5f602082840312156119cb575f80fd5b5035919050565b5f805f606084860312156119e4575f80fd5b505081359360208301359350604090920135919050565b5f805f805f60a08688031215611a0f575f80fd5b8535611a1a8161197d565b97602087013597506040870135966060810135965060800135945092505050565b5f805f60608486031215611a4d575f80fd5b8335611a588161197d565b92506020840135611a688161197d565b929592945050506040919091013590565b5f60208284031215611a89575f80fd5b81356114718161197d565b634e487b7160e01b5f52601160045260245ffd5b63ffffffff828116828216039080821115611ac557611ac5611a94565b5092915050565b808202811582820484141761064357610643611a94565b5f82611afd57634e487b7160e01b5f52601260045260245ffd5b500490565b5f60208284031215611b12575f80fd5b81516114718161197d565b6001600160a01b038481168252604060208084018290529083018490525f91859160608501845b87811015611b6b578435611b578161197d565b841682529382019390820190600101611b44565b5098975050505050505050565b60208152816020820152818360408301375f818301604090810191909152601f909201601f19160101919050565b8181038181111561064357610643611a94565b5f60208284031215611bc9575f80fd5b815161147181611888565b5f60208284031215611be4575f80fd5b5051919050565b8082018082111561064357610643611a9456fecb2040b7eb3265a4335698c9ecbe81a5f9857e92aa32e07ce235f44c321a7e35a2646970667358221220e0d1472eeed867eebc25a0da31ae960eff9373280d4f47ced7a6aa819f798c1964736f6c63430008140033a2646970667358221220ba34661e60bdd68f5bc1e9b494071d64c76f4ebabe1e32951d428ddf01ba88aa64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "clonePosition(address)": {
        "params": {
          "_existing": "address of the position we want to clone"
        },
        "returns": {
          "_0": "address of the newly created clone position"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "clonePosition(address)": {
        "notice": "clone an existing position. This can be a clone of another clone, or an original position."
      },
      "createNewPosition(address,address,address,uint256,uint256,uint256,uint256,uint64,uint32,uint256,uint32)": {
        "notice": "Create a completely new position in a newly deployed contract. Must be called through minting hub to be recognized as valid position."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}